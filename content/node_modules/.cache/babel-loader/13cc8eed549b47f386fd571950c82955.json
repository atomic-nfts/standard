{"ast":null,"code":"/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AACA;AACA,SAAS,gBAAT,QAA6B,oBAA7B;AACA,SAAS,kBAAT,QAA8B,sBAA9B;AACA,SAAS,mBAAT,QAAgC,uBAAhC;AACA,SAAS,qBAAT,QAA4B,yBAA5B;AACA,SAAS,WAAT,QAA0B,eAA1B;AACA,SAAS,SAAT,QAAyB,aAAzB;AACA,SAAS,QAAT,QAAqB,YAArB;AACA,SAAS,QAAA,IAAU,eAAnB,QAA0C,oBAA1C;AAIA,SAAO,UAAM,IAAW,iBAAxB,QAAyD,sBAAzD;AACE,OAAA,IAAM,WAAU,GAAA,UAAc,MAAd,EAAc;MAC5B,CAAA,CAAA,MAAA,IAAO,OAAA,MAAA,CAAA,iBAAA,CAAA,KAAqC,U,EAAA;AAC7C,WAAA,qBAAA,CAAA,MAAA,CAAA;AAAM,G,MACL,IAAA,WAAO,CAAA,MAAA,CAAP,EAAwB;AACzB,WAAA,gBAAA,CAAA,MAAA,CAAA;AAAM,GADL,MAEA,IAAA,SAAO,CAAA,MAAA,CAAP,EAAO;AACR,WAAA,kBAAA,CAAA,MAAA,CAAA;AAAM,GADL,MAEA,IAAA,CAAA,CAAO,MAAP,IAAO,OAAA,MAAoB,CAAA,eAAA,CAApB,KAAmC,UAA1C,EAA0C;AAC3C,WAAA,mBAAA,CAAA,MAAA,CAAA;AAAM,GADL,MAEA;AACA,QAAM,KAAG,GAAG,QAAA,CAAA,MAAA,CAAA,GAAgB,mBAAhB,GAAqB,MAAA,MAAA,GAA+B,GAAhE;QACI,GAAA,GAAA,kBAAA,KAAA,GAAA,+BAAA,GACE,8D;AACP,UAAA,IAAA,SAAA,CAAA,GAAA,CAAA;AACD;CAdA","sourcesContent":["/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n"]},"metadata":{},"sourceType":"module"}