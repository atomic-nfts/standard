{"ast":null,"code":"import { decomposeSubjectPublicKeyInfo, composeSubjectPublicKeyInfo } from './keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { SubjectPublicKeyInfo } from '../../util/asn1-entities';\nimport { DecodeAsn1FailedError } from '../../util/errors';\nexport const decomposePublicKey = subjectPublicKeyInfoAsn1 => {\n  // Attempt to decode as SubjectPublicKeyInfo\n  let subjectPublicKeyInfo;\n\n  try {\n    subjectPublicKeyInfo = decodeAsn1(subjectPublicKeyInfoAsn1, SubjectPublicKeyInfo);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodeAsn1FailedError;\n    throw err;\n  } // Decompose the SubjectPublicKeyInfo\n\n\n  const {\n    keyAlgorithm,\n    keyData\n  } = decomposeSubjectPublicKeyInfo(subjectPublicKeyInfo);\n  return {\n    format: 'spki-der',\n    keyAlgorithm,\n    keyData\n  };\n};\nexport const composePublicKey = ({\n  keyAlgorithm,\n  keyData\n}) => {\n  // Generate the SubjectPublicKeyInfo based on the key algorithm & key data\n  const subjectPublicKeyInfo = composeSubjectPublicKeyInfo(keyAlgorithm, keyData); // Encode SubjectPublicKeyInfo into ASN1\n\n  const subjectPublicKeyInfoAsn1 = encodeAsn1(subjectPublicKeyInfo, SubjectPublicKeyInfo);\n  return subjectPublicKeyInfoAsn1;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/spki/spki-der.js"],"names":["decomposeSubjectPublicKeyInfo","composeSubjectPublicKeyInfo","decodeAsn1","encodeAsn1","SubjectPublicKeyInfo","DecodeAsn1FailedError","decomposePublicKey","subjectPublicKeyInfoAsn1","subjectPublicKeyInfo","err","invalidInputKey","keyAlgorithm","keyData","format","composePublicKey"],"mappings":"AAAA,SAASA,6BAAT,EAAwCC,2BAAxC,QAA2E,QAA3E;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,yBAAvC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,OAAO,MAAMC,kBAAkB,GAAGC,wBAAwB,IAAI;AAC5D;AACA,MAAIC,oBAAJ;;AAEA,MAAI;AACFA,IAAAA,oBAAoB,GAAGN,UAAU,CAACK,wBAAD,EAA2BH,oBAA3B,CAAjC;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYJ,qBAArC;AACA,UAAMI,GAAN;AACD,GAT2D,CAS1D;;;AAGF,QAAM;AACJE,IAAAA,YADI;AAEJC,IAAAA;AAFI,MAGFZ,6BAA6B,CAACQ,oBAAD,CAHjC;AAIA,SAAO;AACLK,IAAAA,MAAM,EAAE,UADH;AAELF,IAAAA,YAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CArBM;AAsBP,OAAO,MAAME,gBAAgB,GAAG,CAAC;AAC/BH,EAAAA,YAD+B;AAE/BC,EAAAA;AAF+B,CAAD,KAG1B;AACJ;AACA,QAAMJ,oBAAoB,GAAGP,2BAA2B,CAACU,YAAD,EAAeC,OAAf,CAAxD,CAFI,CAE6E;;AAEjF,QAAML,wBAAwB,GAAGJ,UAAU,CAACK,oBAAD,EAAuBJ,oBAAvB,CAA3C;AACA,SAAOG,wBAAP;AACD,CATM","sourcesContent":["import { decomposeSubjectPublicKeyInfo, composeSubjectPublicKeyInfo } from './keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { SubjectPublicKeyInfo } from '../../util/asn1-entities';\nimport { DecodeAsn1FailedError } from '../../util/errors';\nexport const decomposePublicKey = subjectPublicKeyInfoAsn1 => {\n  // Attempt to decode as SubjectPublicKeyInfo\n  let subjectPublicKeyInfo;\n\n  try {\n    subjectPublicKeyInfo = decodeAsn1(subjectPublicKeyInfoAsn1, SubjectPublicKeyInfo);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodeAsn1FailedError;\n    throw err;\n  } // Decompose the SubjectPublicKeyInfo\n\n\n  const {\n    keyAlgorithm,\n    keyData\n  } = decomposeSubjectPublicKeyInfo(subjectPublicKeyInfo);\n  return {\n    format: 'spki-der',\n    keyAlgorithm,\n    keyData\n  };\n};\nexport const composePublicKey = ({\n  keyAlgorithm,\n  keyData\n}) => {\n  // Generate the SubjectPublicKeyInfo based on the key algorithm & key data\n  const subjectPublicKeyInfo = composeSubjectPublicKeyInfo(keyAlgorithm, keyData); // Encode SubjectPublicKeyInfo into ASN1\n\n  const subjectPublicKeyInfoAsn1 = encodeAsn1(subjectPublicKeyInfo, SubjectPublicKeyInfo);\n  return subjectPublicKeyInfoAsn1;\n};"]},"metadata":{},"sourceType":"module"}