{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ArweaveUtils = require(\"./lib/utils\");\n\nrequire(\"arconnect\");\n\nclass Wallets {\n  constructor(api, crypto) {\n    this.api = api;\n    this.crypto = crypto;\n  }\n  /**\n   * Get the wallet balance for the given address.\n   *\n   * @param {string} address - The arweave address to get the balance for.\n   *\n   * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n   */\n\n\n  getBalance(address) {\n    return this.api.get(`wallet/${address}/balance`, {\n      transformResponse: [\n      /**\n       * We need to specify a response transformer to override\n       * the default JSON.parse behaviour, as this causes\n       * balances to be converted to a number and we want to\n       * return it as a winston string.\n       * @param data\n       */\n      function (data) {\n        return data;\n      }]\n    }).then(response => {\n      return response.data;\n    });\n  }\n  /**\n   * Get the last transaction ID for the given wallet address.\n   *\n   * @param {string} address - The arweave address to get the balance for.\n   *\n   * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n   */\n\n\n  getLastTransactionID(address) {\n    return this.api.get(`wallet/${address}/last_tx`).then(response => {\n      return response.data;\n    });\n  }\n\n  generate() {\n    return this.crypto.generateJWK();\n  }\n\n  async jwkToAddress(jwk) {\n    if (!jwk || jwk === \"use_wallet\") {\n      return this.getAddress();\n    } else {\n      return this.getAddress(jwk);\n    }\n  }\n\n  async getAddress(jwk) {\n    if (!jwk || jwk === \"use_wallet\") {\n      try {\n        // @ts-ignore\n        await window.arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n      } catch (_a) {// Permission is already granted\n      } // @ts-ignore\n\n\n      return window.arweaveWallet.getActiveAddress();\n    } else {\n      return this.ownerToAddress(jwk.n);\n    }\n  }\n\n  async ownerToAddress(owner) {\n    return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n  }\n\n}\n\nexports.default = Wallets;","map":{"version":3,"sources":["../../../src/common/wallets.ts"],"names":[],"mappings":";;;;;;AAGA,MAAA,YAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAqB,OAArB,CAA4B;AAK1B,EAAA,WAAA,CAAY,GAAZ,EAAsB,MAAtB,EAA6C;AAC3C,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;;;;AAMG;;;AACI,EAAA,UAAU,CAAC,OAAD,EAAgB;AAC/B,WAAO,KAAK,GAAL,CACJ,GADI,CACA,UAAU,OAAO,UADjB,EAC6B;AAChC,MAAA,iBAAiB,EAAE;AACjB;;;;;;AAMG;AACH,gBAAU,IAAV,EAAc;AACZ,eAAO,IAAP;AACD,OAVgB;AADa,KAD7B,EAeJ,IAfI,CAeE,QAAD,IAAa;AACjB,aAAO,QAAQ,CAAC,IAAhB;AACD,KAjBI,CAAP;AAkBD;AAED;;;;;;AAMG;;;AACI,EAAA,oBAAoB,CAAC,OAAD,EAAgB;AACzC,WAAO,KAAK,GAAL,CAAS,GAAT,CAAa,UAAU,OAAO,UAA9B,EAA0C,IAA1C,CAAgD,QAAD,IAAa;AACjE,aAAO,QAAQ,CAAC,IAAhB;AACD,KAFM,CAAP;AAGD;;AAEM,EAAA,QAAQ,GAAA;AACb,WAAO,KAAK,MAAL,CAAY,WAAZ,EAAP;AACD;;AAEwB,QAAZ,YAAY,CACvB,GADuB,EACU;AAEjC,QAAI,CAAC,GAAD,IAAQ,GAAG,KAAK,YAApB,EAAkC;AAChC,aAAO,KAAK,UAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAP;AACD;AACF;;AAEsB,QAAV,UAAU,CAAC,GAAD,EAAkC;AACvD,QAAI,CAAC,GAAD,IAAQ,GAAG,KAAK,YAApB,EAAkC;AAChC,UAAI;AACF;AACA,cAAM,MAAM,CAAC,aAAP,CAAqB,OAArB,CAA6B,CAAC,gBAAD,CAA7B,CAAN;AACD,OAHD,CAGE,OAAA,EAAA,EAAM,CACN;AACD,OAN+B,CAQhC;;;AACA,aAAO,MAAM,CAAC,aAAP,CAAqB,gBAArB,EAAP;AACD,KAVD,MAUO;AACL,aAAO,KAAK,cAAL,CAAoB,GAAG,CAAC,CAAxB,CAAP;AACD;AACF;;AAE0B,QAAd,cAAc,CAAC,KAAD,EAAc;AACvC,WAAO,YAAY,CAAC,cAAb,CACL,MAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,YAAY,CAAC,cAAb,CAA4B,KAA5B,CAAjB,CADD,CAAP;AAGD;;AArFyB;;AAA5B,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"./lib/utils\");\nrequire(\"arconnect\");\nclass Wallets {\n    constructor(api, crypto) {\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getBalance(address) {\n        return this.api\n            .get(`wallet/${address}/balance`, {\n            transformResponse: [\n                /**\n                 * We need to specify a response transformer to override\n                 * the default JSON.parse behaviour, as this causes\n                 * balances to be converted to a number and we want to\n                 * return it as a winston string.\n                 * @param data\n                 */\n                function (data) {\n                    return data;\n                },\n            ],\n        })\n            .then((response) => {\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response) => {\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        }\n        else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                // @ts-ignore\n                await window.arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n            }\n            catch (_a) {\n                // Permission is already granted\n            }\n            // @ts-ignore\n            return window.arweaveWallet.getActiveAddress();\n        }\n        else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n    }\n}\nexports.default = Wallets;\n//# sourceMappingURL=wallets.js.map"]},"metadata":{},"sourceType":"script"}