{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ar_1 = require(\"./ar\");\n\nvar api_1 = require(\"./lib/api\");\n\nvar network_1 = require(\"./network\");\n\nvar transactions_1 = require(\"./transactions\");\n\nvar wallets_1 = require(\"./wallets\");\n\nvar transaction_1 = require(\"./lib/transaction\");\n\nvar ArweaveUtils = require(\"./lib/utils\");\n\nvar silo_1 = require(\"./silo\");\n\nvar chunks_1 = require(\"./chunks\");\n\nvar blocks_1 = require(\"./blocks\");\n\nvar Arweave = /*#__PURE__*/function () {\n  function Arweave(apiConfig) {\n    _classCallCheck(this, Arweave);\n\n    this.api = new api_1.default(apiConfig);\n    this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n    this.chunks = new chunks_1.default(this.api);\n    this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n    this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n    this.network = new network_1.default(this.api);\n    this.blocks = new blocks_1.default(this.api, this.network);\n    this.ar = new ar_1.default();\n  }\n  /** @deprecated */\n\n\n  _createClass(Arweave, [{\n    key: \"crypto\",\n    get: function get() {\n      return Arweave.crypto;\n    }\n    /** @deprecated */\n\n  }, {\n    key: \"utils\",\n    get: function get() {\n      return Arweave.utils;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        api: this.api.getConfig(),\n        crypto: null\n      };\n    }\n  }, {\n    key: \"createTransaction\",\n    value: function () {\n      var _createTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(attributes, jwk) {\n        var transaction, length, createdTransaction;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                transaction = {};\n                Object.assign(transaction, attributes);\n\n                if (!(!attributes.data && !(attributes.target && attributes.quantity))) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.\");\n\n              case 4:\n                if (attributes.owner == undefined) {\n                  if (jwk && jwk !== \"use_wallet\") {\n                    transaction.owner = jwk.n;\n                  }\n                }\n\n                if (!(attributes.last_tx == undefined)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.transactions.getTransactionAnchor();\n\n              case 8:\n                transaction.last_tx = _context.sent;\n\n              case 9:\n                if (typeof attributes.data === \"string\") {\n                  attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n                }\n\n                if (attributes.data instanceof ArrayBuffer) {\n                  attributes.data = new Uint8Array(attributes.data);\n                }\n\n                if (!(attributes.data && !(attributes.data instanceof Uint8Array))) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n\n              case 13:\n                if (!(attributes.reward == undefined)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                length = attributes.data ? attributes.data.byteLength : 0;\n                _context.next = 17;\n                return this.transactions.getPrice(length, transaction.target);\n\n              case 17:\n                transaction.reward = _context.sent;\n\n              case 18:\n                // here we should call prepare chunk\n                transaction.data_root = \"\";\n                transaction.data_size = attributes.data ? attributes.data.byteLength.toString() : \"0\";\n                transaction.data = attributes.data || new Uint8Array(0);\n                createdTransaction = new transaction_1.default(transaction);\n                _context.next = 24;\n                return createdTransaction.getSignatureData();\n\n              case 24:\n                return _context.abrupt(\"return\", createdTransaction);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createTransaction(_x, _x2) {\n        return _createTransaction.apply(this, arguments);\n      }\n\n      return createTransaction;\n    }()\n  }, {\n    key: \"createSiloTransaction\",\n    value: function () {\n      var _createSiloTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(attributes, jwk, siloUri) {\n        var transaction, siloResource, encrypted, _encrypted, siloTransaction;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                transaction = {};\n                Object.assign(transaction, attributes);\n\n                if (attributes.data) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Silo transactions must have a 'data' value\");\n\n              case 4:\n                if (siloUri) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"No Silo URI specified.\");\n\n              case 6:\n                if (!(attributes.target || attributes.quantity)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.\");\n\n              case 8:\n                if (!(attributes.owner == undefined)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                if (!(!jwk || !jwk.n)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                throw new Error(\"A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.\");\n\n              case 11:\n                transaction.owner = jwk.n;\n\n              case 12:\n                if (!(attributes.last_tx == undefined)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _context2.next = 15;\n                return this.transactions.getTransactionAnchor();\n\n              case 15:\n                transaction.last_tx = _context2.sent;\n\n              case 16:\n                _context2.next = 18;\n                return this.silo.parseUri(siloUri);\n\n              case 18:\n                siloResource = _context2.sent;\n\n                if (!(typeof attributes.data == \"string\")) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                _context2.next = 22;\n                return this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n\n              case 22:\n                encrypted = _context2.sent;\n                _context2.next = 25;\n                return this.transactions.getPrice(encrypted.byteLength);\n\n              case 25:\n                transaction.reward = _context2.sent;\n                transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n\n              case 27:\n                if (!(attributes.data instanceof Uint8Array)) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                _context2.next = 30;\n                return this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n\n              case 30:\n                _encrypted = _context2.sent;\n                _context2.next = 33;\n                return this.transactions.getPrice(_encrypted.byteLength);\n\n              case 33:\n                transaction.reward = _context2.sent;\n                transaction.data = ArweaveUtils.bufferTob64Url(_encrypted);\n\n              case 35:\n                siloTransaction = new transaction_1.default(transaction);\n                siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n                siloTransaction.addTag(\"Silo-Version\", \"0.1.0\");\n                return _context2.abrupt(\"return\", siloTransaction);\n\n              case 39:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createSiloTransaction(_x3, _x4, _x5) {\n        return _createSiloTransaction.apply(this, arguments);\n      }\n\n      return createSiloTransaction;\n    }()\n  }, {\n    key: \"arql\",\n    value: function arql(query) {\n      return this.api.post(\"/arql\", query).then(function (response) {\n        return response.data || [];\n      });\n    }\n  }]);\n\n  return Arweave;\n}();\n\nexports.default = Arweave;\nArweave.utils = ArweaveUtils;","map":{"version":3,"sources":["../../../src/common/common.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;IAoBqB,O;AAuBnB,mBAAY,SAAZ,EAAgC;AAAA;;AAC9B,SAAK,GAAL,GAAW,IAAI,KAAA,CAAA,OAAJ,CAAQ,SAAR,CAAX;AACA,SAAK,OAAL,GAAe,IAAI,SAAA,CAAA,OAAJ,CAAY,KAAK,GAAjB,EAAsB,OAAO,CAAC,MAA9B,CAAf;AACA,SAAK,MAAL,GAAc,IAAI,QAAA,CAAA,OAAJ,CAAW,KAAK,GAAhB,CAAd;AACA,SAAK,YAAL,GAAoB,IAAI,cAAA,CAAA,OAAJ,CAAiB,KAAK,GAAtB,EAA2B,OAAO,CAAC,MAAnC,EAA2C,KAAK,MAAhD,CAApB;AACA,SAAK,IAAL,GAAY,IAAI,MAAA,CAAA,OAAJ,CAAS,KAAK,GAAd,EAAmB,KAAK,MAAxB,EAAgC,KAAK,YAArC,CAAZ;AACA,SAAK,OAAL,GAAe,IAAI,SAAA,CAAA,OAAJ,CAAY,KAAK,GAAjB,CAAf;AACA,SAAK,MAAL,GAAc,IAAI,QAAA,CAAA,OAAJ,CAAW,KAAK,GAAhB,EAAqB,KAAK,OAA1B,CAAd;AACA,SAAK,EAAL,GAAU,IAAI,IAAA,CAAA,OAAJ,EAAV;AACD;AAED;;;;;SACA,eAAiB;AACf,aAAO,OAAO,CAAC,MAAf;AACD;AAED;;;;SACA,eAAgB;AACd,aAAO,OAAO,CAAC,KAAf;AACD;;;WAEM,qBAAS;AACd,aAAO;AACL,QAAA,GAAG,EAAE,KAAK,GAAL,CAAS,SAAT,EADA;AAEL,QAAA,MAAM,EAAE;AAFH,OAAP;AAID;;;;wFAEM,iBACL,UADK,EAEL,GAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,gBAAA,WAJD,GAIoD,EAJpD;AAML,gBAAA,MAAM,CAAC,MAAP,CAAc,WAAd,EAA2B,UAA3B;;AANK,sBAQD,CAAC,UAAU,CAAC,IAAZ,IAAoB,EAAE,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,QAAlC,CARnB;AAAA;AAAA;AAAA;;AAAA,sBASG,IAAI,KAAJ,0FATH;;AAAA;AAcL,oBAAI,UAAU,CAAC,KAAX,IAAoB,SAAxB,EAAmC;AACjC,sBAAI,GAAG,IAAI,GAAG,KAAK,YAAnB,EAAiC;AAC/B,oBAAA,WAAW,CAAC,KAAZ,GAAoB,GAAG,CAAC,CAAxB;AACD;AACF;;AAlBI,sBAoBD,UAAU,CAAC,OAAX,IAAsB,SApBrB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqByB,KAAK,YAAL,CAAkB,oBAAlB,EArBzB;;AAAA;AAqBH,gBAAA,WAAW,CAAC,OArBT;;AAAA;AAwBL,oBAAI,OAAO,UAAU,CAAC,IAAlB,KAA2B,QAA/B,EAAyC;AACvC,kBAAA,UAAU,CAAC,IAAX,GAAkB,YAAY,CAAC,cAAb,CAA4B,UAAU,CAAC,IAAvC,CAAlB;AACD;;AAED,oBAAI,UAAU,CAAC,IAAX,YAA2B,WAA/B,EAA4C;AAC1C,kBAAA,UAAU,CAAC,IAAX,GAAkB,IAAI,UAAJ,CAAe,UAAU,CAAC,IAA1B,CAAlB;AACD;;AA9BI,sBAgCD,UAAU,CAAC,IAAX,IAAmB,EAAE,UAAU,CAAC,IAAX,YAA2B,UAA7B,CAhClB;AAAA;AAAA;AAAA;;AAAA,sBAiCG,IAAI,KAAJ,CACJ,yDADI,CAjCH;;AAAA;AAAA,sBAsCD,UAAU,CAAC,MAAX,IAAqB,SAtCpB;AAAA;AAAA;AAAA;;AAuCG,gBAAA,MAvCH,GAuCY,UAAU,CAAC,IAAX,GAAkB,UAAU,CAAC,IAAX,CAAgB,UAAlC,GAA+C,CAvC3D;AAAA;AAAA,uBAwCwB,KAAK,YAAL,CAAkB,QAAlB,CACzB,MADyB,EAEzB,WAAW,CAAC,MAFa,CAxCxB;;AAAA;AAwCH,gBAAA,WAAW,CAAC,MAxCT;;AAAA;AA8CL;AACA,gBAAA,WAAW,CAAC,SAAZ,GAAwB,EAAxB;AACA,gBAAA,WAAW,CAAC,SAAZ,GAAwB,UAAU,CAAC,IAAX,GACpB,UAAU,CAAC,IAAX,CAAgB,UAAhB,CAA2B,QAA3B,EADoB,GAEpB,GAFJ;AAGA,gBAAA,WAAW,CAAC,IAAZ,GAAmB,UAAU,CAAC,IAAX,IAAmB,IAAI,UAAJ,CAAe,CAAf,CAAtC;AAEM,gBAAA,kBArDD,GAqDsB,IAAI,aAAA,CAAA,OAAJ,CACzB,WADyB,CArDtB;AAAA;AAAA,uBAwDC,kBAAkB,CAAC,gBAAnB,EAxDD;;AAAA;AAAA,iDAyDE,kBAzDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4FA4DA,kBACL,UADK,EAEL,GAFK,EAGL,OAHK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKC,gBAAA,WALD,GAKoD,EALpD;AAOL,gBAAA,MAAM,CAAC,MAAP,CAAc,WAAd,EAA2B,UAA3B;;AAPK,oBASA,UAAU,CAAC,IATX;AAAA;AAAA;AAAA;;AAAA,sBAUG,IAAI,KAAJ,8CAVH;;AAAA;AAAA,oBAaA,OAbA;AAAA;AAAA;AAAA;;AAAA,sBAcG,IAAI,KAAJ,0BAdH;;AAAA;AAAA,sBAiBD,UAAU,CAAC,MAAX,IAAqB,UAAU,CAAC,QAjB/B;AAAA;AAAA;AAAA;;AAAA,sBAkBG,IAAI,KAAJ,qGAlBH;;AAAA;AAAA,sBAuBD,UAAU,CAAC,KAAX,IAAoB,SAvBnB;AAAA;AAAA;AAAA;;AAAA,sBAwBC,CAAC,GAAD,IAAQ,CAAC,GAAG,CAAC,CAxBd;AAAA;AAAA;AAAA;;AAAA,sBAyBK,IAAI,KAAJ,2GAzBL;;AAAA;AA6BH,gBAAA,WAAW,CAAC,KAAZ,GAAoB,GAAG,CAAC,CAAxB;;AA7BG;AAAA,sBAgCD,UAAU,CAAC,OAAX,IAAsB,SAhCrB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAiCyB,KAAK,YAAL,CAAkB,oBAAlB,EAjCzB;;AAAA;AAiCH,gBAAA,WAAW,CAAC,OAjCT;;AAAA;AAAA;AAAA,uBAoCsB,KAAK,IAAL,CAAU,QAAV,CAAmB,OAAnB,CApCtB;;AAAA;AAoCC,gBAAA,YApCD;;AAAA,sBAsCD,OAAO,UAAU,CAAC,IAAlB,IAA0B,QAtCzB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuCqB,KAAK,MAAL,CAAY,OAAZ,CACtB,YAAY,CAAC,cAAb,CAA4B,UAAU,CAAC,IAAvC,CADsB,EAEtB,YAAY,CAAC,gBAAb,EAFsB,CAvCrB;;AAAA;AAuCG,gBAAA,SAvCH;AAAA;AAAA,uBA2CwB,KAAK,YAAL,CAAkB,QAAlB,CACzB,SAAS,CAAC,UADe,CA3CxB;;AAAA;AA2CH,gBAAA,WAAW,CAAC,MA3CT;AA8CH,gBAAA,WAAW,CAAC,IAAZ,GAAmB,YAAY,CAAC,cAAb,CAA4B,SAA5B,CAAnB;;AA9CG;AAAA,sBAiDD,UAAU,CAAC,IAAX,YAA2B,UAjD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAkDqB,KAAK,MAAL,CAAY,OAAZ,CACtB,UAAU,CAAC,IADW,EAEtB,YAAY,CAAC,gBAAb,EAFsB,CAlDrB;;AAAA;AAkDG,gBAAA,UAlDH;AAAA;AAAA,uBAsDwB,KAAK,YAAL,CAAkB,QAAlB,CACzB,UAAS,CAAC,UADe,CAtDxB;;AAAA;AAsDH,gBAAA,WAAW,CAAC,MAtDT;AAyDH,gBAAA,WAAW,CAAC,IAAZ,GAAmB,YAAY,CAAC,cAAb,CAA4B,UAA5B,CAAnB;;AAzDG;AA4DC,gBAAA,eA5DD,GA4DmB,IAAI,aAAA,CAAA,OAAJ,CACtB,WADsB,CA5DnB;AAgEL,gBAAA,eAAe,CAAC,MAAhB,CAAuB,WAAvB,EAAoC,YAAY,CAAC,YAAb,EAApC;AACA,gBAAA,eAAe,CAAC,MAAhB,CAAuB,cAAvB;AAjEK,kDAmEE,eAnEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAsEA,cAAK,KAAL,EAAkB;AACvB,aAAO,KAAK,GAAL,CACJ,IADI,CACC,OADD,EACU,KADV,EAEJ,IAFI,CAEC,UAAC,QAAD;AAAA,eAAc,QAAQ,CAAC,IAAT,IAAiB,EAA/B;AAAA,OAFD,CAAP;AAGD;;;;;;AAzLH,OAAA,CAAA,OAAA,GAAA,OAAA;AAqBgB,OAAA,CAAA,KAAA,GAAQ,YAAR","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ar_1 = require(\"./ar\");\nconst api_1 = require(\"./lib/api\");\nconst network_1 = require(\"./network\");\nconst transactions_1 = require(\"./transactions\");\nconst wallets_1 = require(\"./wallets\");\nconst transaction_1 = require(\"./lib/transaction\");\nconst ArweaveUtils = require(\"./lib/utils\");\nconst silo_1 = require(\"./silo\");\nconst chunks_1 = require(\"./chunks\");\nconst blocks_1 = require(\"./blocks\");\nclass Arweave {\n    constructor(apiConfig) {\n        this.api = new api_1.default(apiConfig);\n        this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n        this.chunks = new chunks_1.default(this.api);\n        this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n        this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n        this.network = new network_1.default(this.api);\n        this.blocks = new blocks_1.default(this.api, this.network);\n        this.ar = new ar_1.default();\n    }\n    /** @deprecated */\n    get crypto() {\n        return Arweave.crypto;\n    }\n    /** @deprecated */\n    get utils() {\n        return Arweave.utils;\n    }\n    getConfig() {\n        return {\n            api: this.api.getConfig(),\n            crypto: null,\n        };\n    }\n    async createTransaction(attributes, jwk) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data && !(attributes.target && attributes.quantity)) {\n            throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n        }\n        if (attributes.owner == undefined) {\n            if (jwk && jwk !== \"use_wallet\") {\n                transaction.owner = jwk.n;\n            }\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        if (typeof attributes.data === \"string\") {\n            attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n        }\n        if (attributes.data instanceof ArrayBuffer) {\n            attributes.data = new Uint8Array(attributes.data);\n        }\n        if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n            throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n        }\n        if (attributes.reward == undefined) {\n            const length = attributes.data ? attributes.data.byteLength : 0;\n            transaction.reward = await this.transactions.getPrice(length, transaction.target);\n        }\n        // here we should call prepare chunk\n        transaction.data_root = \"\";\n        transaction.data_size = attributes.data\n            ? attributes.data.byteLength.toString()\n            : \"0\";\n        transaction.data = attributes.data || new Uint8Array(0);\n        const createdTransaction = new transaction_1.default(transaction);\n        await createdTransaction.getSignatureData();\n        return createdTransaction;\n    }\n    async createSiloTransaction(attributes, jwk, siloUri) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data) {\n            throw new Error(`Silo transactions must have a 'data' value`);\n        }\n        if (!siloUri) {\n            throw new Error(`No Silo URI specified.`);\n        }\n        if (attributes.target || attributes.quantity) {\n            throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);\n        }\n        if (attributes.owner == undefined) {\n            if (!jwk || !jwk.n) {\n                throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);\n            }\n            transaction.owner = jwk.n;\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        const siloResource = await this.silo.parseUri(siloUri);\n        if (typeof attributes.data == \"string\") {\n            const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        if (attributes.data instanceof Uint8Array) {\n            const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        const siloTransaction = new transaction_1.default(transaction);\n        siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n        siloTransaction.addTag(\"Silo-Version\", `0.1.0`);\n        return siloTransaction;\n    }\n    arql(query) {\n        return this.api\n            .post(\"/arql\", query)\n            .then((response) => response.data || []);\n    }\n}\nexports.default = Arweave;\nArweave.utils = ArweaveUtils;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}