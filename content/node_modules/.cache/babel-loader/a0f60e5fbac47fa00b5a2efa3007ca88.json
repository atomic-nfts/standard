{"ast":null,"code":"import { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs8-der';\nimport { binaryStringToUint8Array, uint8ArrayToBinaryString } from '../../util/binary';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { DecodePemFailedError } from '../../util/errors';\nexport var decomposePrivateKey = function decomposePrivateKey(pem, options) {\n  // Decode pem\n  var decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, ['PRIVATE KEY', 'ENCRYPTED PRIVATE KEY']);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  } // Decompose key using `pkcs8-der`\n\n\n  var pkcs8Key = binaryStringToUint8Array(decodedPem.body);\n  var decomposedKey = decomposeDerPrivateKey(pkcs8Key, options);\n  decomposedKey.format = 'pkcs8-pem';\n  return decomposedKey;\n};\nexport var composePrivateKey = function composePrivateKey(decomposedKey, options) {\n  // Compose key using `pkcs8-der`\n  var pkcs8Key = composeDerPrivateKey(decomposedKey, options); // Encode pem\n\n  return encodePem({\n    type: options.password ? 'ENCRYPTED PRIVATE KEY' : 'PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pkcs8Key)\n  });\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs8/pkcs8-pem.js"],"names":["decomposePrivateKey","decomposeDerPrivateKey","composePrivateKey","composeDerPrivateKey","binaryStringToUint8Array","uint8ArrayToBinaryString","decodePem","encodePem","DecodePemFailedError","pem","options","decodedPem","err","invalidInputKey","pkcs8Key","body","decomposedKey","format","type","password"],"mappings":"AAAA,SAASA,mBAAmB,IAAIC,sBAAhC,EAAwDC,iBAAiB,IAAIC,oBAA7E,QAAyG,aAAzG;AACA,SAASC,wBAAT,EAAmCC,wBAAnC,QAAmE,mBAAnE;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,wBAArC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAO,IAAMR,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACS,GAAD,EAAMC,OAAN,EAAkB;AACnD;AACA,MAAIC,UAAJ;;AAEA,MAAI;AACFA,IAAAA,UAAU,GAAGL,SAAS,CAACG,GAAD,EAAM,CAAC,aAAD,EAAgB,uBAAhB,CAAN,CAAtB;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYJ,oBAArC;AACA,UAAMI,GAAN;AACD,GATkD,CASjD;;;AAGF,MAAME,QAAQ,GAAGV,wBAAwB,CAACO,UAAU,CAACI,IAAZ,CAAzC;AACA,MAAMC,aAAa,GAAGf,sBAAsB,CAACa,QAAD,EAAWJ,OAAX,CAA5C;AACAM,EAAAA,aAAa,CAACC,MAAd,GAAuB,WAAvB;AACA,SAAOD,aAAP;AACD,CAhBM;AAiBP,OAAO,IAAMd,iBAAiB,GAAG,SAApBA,iBAAoB,CAACc,aAAD,EAAgBN,OAAhB,EAA4B;AAC3D;AACA,MAAMI,QAAQ,GAAGX,oBAAoB,CAACa,aAAD,EAAgBN,OAAhB,CAArC,CAF2D,CAEI;;AAE/D,SAAOH,SAAS,CAAC;AACfW,IAAAA,IAAI,EAAER,OAAO,CAACS,QAAR,GAAmB,uBAAnB,GAA6C,aADpC;AAEfJ,IAAAA,IAAI,EAAEV,wBAAwB,CAACS,QAAD;AAFf,GAAD,CAAhB;AAID,CARM","sourcesContent":["import { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs8-der';\nimport { binaryStringToUint8Array, uint8ArrayToBinaryString } from '../../util/binary';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { DecodePemFailedError } from '../../util/errors';\nexport const decomposePrivateKey = (pem, options) => {\n  // Decode pem\n  let decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, ['PRIVATE KEY', 'ENCRYPTED PRIVATE KEY']);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  } // Decompose key using `pkcs8-der`\n\n\n  const pkcs8Key = binaryStringToUint8Array(decodedPem.body);\n  const decomposedKey = decomposeDerPrivateKey(pkcs8Key, options);\n  decomposedKey.format = 'pkcs8-pem';\n  return decomposedKey;\n};\nexport const composePrivateKey = (decomposedKey, options) => {\n  // Compose key using `pkcs8-der`\n  const pkcs8Key = composeDerPrivateKey(decomposedKey, options); // Encode pem\n\n  return encodePem({\n    type: options.password ? 'ENCRYPTED PRIVATE KEY' : 'PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pkcs8Key)\n  });\n};"]},"metadata":{},"sourceType":"module"}