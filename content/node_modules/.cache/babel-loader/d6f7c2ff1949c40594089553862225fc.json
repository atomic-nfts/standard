{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Web = void 0;\n\nconst common_1 = require(\"./common\");\n\nclass Web extends common_1.Common {\n  /**\n   * Get top contents of user\n   * @returns Array of user contents\n   */\n  async myContent() {\n    // Get nft records\n    const state = await this.getContractState();\n    const registerRecords = state.registeredRecord; // Get array of my awaitable NFTs\n\n    const contentViewProms = [];\n\n    for (const [txId, addr] of Object.entries(registerRecords)) if (addr === this.address) contentViewProms.push(this.contentView(txId, state)); // Process NFTs simultaneously then return\n\n\n    return await Promise.all(contentViewProms);\n  }\n\n}\n\nexports.Web = Web;\nmodule.exports = {\n  Web\n};","map":{"version":3,"sources":["../src/web.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,GAAb,SAAyB,QAAA,CAAA,MAAzB,CAA+B;AAC7B;;;AAGG;AACY,QAAT,SAAS,GAAA;AACb;AACA,UAAM,KAAK,GAAQ,MAAM,KAAK,gBAAL,EAAzB;AACA,UAAM,eAAe,GAAwB,KAAK,CAAC,gBAAnD,CAHa,CAKb;;AACA,UAAM,gBAAgB,GAAG,EAAzB;;AACA,SAAK,MAAM,CAAC,IAAD,EAAO,IAAP,CAAX,IAA2B,MAAM,CAAC,OAAP,CAAe,eAAf,CAA3B,EACE,IAAI,IAAI,KAAK,KAAK,OAAlB,EACE,gBAAgB,CAAC,IAAjB,CAAsB,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,CAAtB,EATS,CAWb;;;AACA,WAAO,MAAM,OAAO,CAAC,GAAR,CAAY,gBAAZ,CAAb;AACD;;AAlB4B;;AAA/B,OAAA,CAAA,GAAA,GAAA,GAAA;AAqBA,MAAM,CAAC,OAAP,GAAiB;AAAE,EAAA;AAAF,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Web = void 0;\nconst common_1 = require(\"./common\");\nclass Web extends common_1.Common {\n    /**\n     * Get top contents of user\n     * @returns Array of user contents\n     */\n    async myContent() {\n        // Get nft records\n        const state = await this.getContractState();\n        const registerRecords = state.registeredRecord;\n        // Get array of my awaitable NFTs\n        const contentViewProms = [];\n        for (const [txId, addr] of Object.entries(registerRecords))\n            if (addr === this.address)\n                contentViewProms.push(this.contentView(txId, state));\n        // Process NFTs simultaneously then return\n        return await Promise.all(contentViewProms);\n    }\n}\nexports.Web = Web;\nmodule.exports = { Web };\n//# sourceMappingURL=web.js.map"]},"metadata":{},"sourceType":"script"}