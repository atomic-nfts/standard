{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data !== null && data !== undefined) stream.push(data);\n  if (cb) cb(er);\n  var rs = stream._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  var ts = this._transformState = new TransformState(options, this); // when the writable side finishes, then flush out anything remaining.\n\n  var stream = this; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n  this.once('finish', function () {\n    if ('function' === typeof this._flush) this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  var ws = stream._writableState;\n  var rs = stream._readableState;\n  var ts = stream._transformState;\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n  return stream.push(null);\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/contentstream/node_modules/readable-stream/lib/_stream_transform.js"],"names":["module","exports","Transform","Duplex","require","util","inherits","TransformState","options","stream","afterTransform","er","data","needTransform","transforming","writecb","writechunk","ts","_transformState","cb","emit","Error","undefined","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","call","sync","once","_flush","done","prototype","chunk","encoding","_transform","_write","writeencoding","n","ws","_writableState"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined)\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  var ts = this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('finish', function() {\n    if ('function' === typeof this._flush)\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var rs = stream._readableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n"]},"metadata":{},"sourceType":"script"}