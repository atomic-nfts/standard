{"ast":null,"code":"import * as bip39 from 'bip39';\nimport parseAlgorithm from './algorithm';\nimport { composePrivateKey, composePublicKey } from 'crypto-key-composer';\n\nconst composeKeys = ({\n  privateKey,\n  publicKey\n}, keyAlgorithm, options) => {\n  options = {\n    privateKeyFormat: 'pkcs8-pem',\n    publicKeyFormat: 'spki-pem',\n    ...options\n  };\n  const {\n    privateKeyFormat,\n    publicKeyFormat,\n    encryptionAlgorithm,\n    password\n  } = options;\n  return {\n    privateKey: composePrivateKey({\n      format: privateKeyFormat,\n      keyAlgorithm,\n      keyData: privateKey,\n      encryptionAlgorithm\n    }, {\n      password\n    }),\n    publicKey: composePublicKey({\n      format: publicKeyFormat,\n      keyAlgorithm,\n      keyData: publicKey\n    })\n  };\n};\n\nconst generateKeys = async (seed, algorithm, options) => {\n  const {\n    id,\n    params,\n    generate\n  } = parseAlgorithm(algorithm);\n  const keyPair = await generate(params, seed);\n  const keyAlgorithm = {\n    id,\n    ...params\n  };\n  const composedKeyPair = composeKeys(keyPair, keyAlgorithm, options);\n  return {\n    keyAlgorithm,\n    composedKeyPair\n  };\n};\n\nconst generateKeyPair = async (algorithm, options) => {\n  const mnemonic = bip39.generateMnemonic();\n  const seedBuffer = await bip39.mnemonicToSeed(mnemonic);\n  const seed = new Uint8Array(seedBuffer.buffer);\n  const {\n    keyAlgorithm,\n    composedKeyPair\n  } = await generateKeys(seed, algorithm, options);\n  return {\n    algorithm: keyAlgorithm,\n    mnemonic,\n    seed,\n    ...composedKeyPair\n  };\n};\n\nconst getKeyPairFromMnemonic = async (mnemonic, algorithm, options) => {\n  const seedBuffer = await bip39.mnemonicToSeed(mnemonic);\n  const seed = new Uint8Array(seedBuffer.buffer);\n  return getKeyPairFromSeed(seed, algorithm, options);\n};\n\nconst getKeyPairFromSeed = async (seed, algorithm, options) => {\n  const {\n    composedKeyPair\n  } = await generateKeys(seed, algorithm, options);\n  return composedKeyPair;\n};\n\nexport { generateKeyPair, getKeyPairFromMnemonic, getKeyPairFromSeed };","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/human-crypto-keys/es/index.js"],"names":["bip39","parseAlgorithm","composePrivateKey","composePublicKey","composeKeys","privateKey","publicKey","keyAlgorithm","options","privateKeyFormat","publicKeyFormat","encryptionAlgorithm","password","format","keyData","generateKeys","seed","algorithm","id","params","generate","keyPair","composedKeyPair","generateKeyPair","mnemonic","generateMnemonic","seedBuffer","mnemonicToSeed","Uint8Array","buffer","getKeyPairFromMnemonic","getKeyPairFromSeed"],"mappings":"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","sourcesContent":["import * as bip39 from 'bip39';\nimport parseAlgorithm from './algorithm';\nimport { composePrivateKey, composePublicKey } from 'crypto-key-composer';\n\nconst composeKeys = ({\n  privateKey,\n  publicKey\n}, keyAlgorithm, options) => {\n  options = {\n    privateKeyFormat: 'pkcs8-pem',\n    publicKeyFormat: 'spki-pem',\n    ...options\n  };\n  const {\n    privateKeyFormat,\n    publicKeyFormat,\n    encryptionAlgorithm,\n    password\n  } = options;\n  return {\n    privateKey: composePrivateKey({\n      format: privateKeyFormat,\n      keyAlgorithm,\n      keyData: privateKey,\n      encryptionAlgorithm\n    }, {\n      password\n    }),\n    publicKey: composePublicKey({\n      format: publicKeyFormat,\n      keyAlgorithm,\n      keyData: publicKey\n    })\n  };\n};\n\nconst generateKeys = async (seed, algorithm, options) => {\n  const {\n    id,\n    params,\n    generate\n  } = parseAlgorithm(algorithm);\n  const keyPair = await generate(params, seed);\n  const keyAlgorithm = {\n    id,\n    ...params\n  };\n  const composedKeyPair = composeKeys(keyPair, keyAlgorithm, options);\n  return {\n    keyAlgorithm,\n    composedKeyPair\n  };\n};\n\nconst generateKeyPair = async (algorithm, options) => {\n  const mnemonic = bip39.generateMnemonic();\n  const seedBuffer = await bip39.mnemonicToSeed(mnemonic);\n  const seed = new Uint8Array(seedBuffer.buffer);\n  const {\n    keyAlgorithm,\n    composedKeyPair\n  } = await generateKeys(seed, algorithm, options);\n  return {\n    algorithm: keyAlgorithm,\n    mnemonic,\n    seed,\n    ...composedKeyPair\n  };\n};\n\nconst getKeyPairFromMnemonic = async (mnemonic, algorithm, options) => {\n  const seedBuffer = await bip39.mnemonicToSeed(mnemonic);\n  const seed = new Uint8Array(seedBuffer.buffer);\n  return getKeyPairFromSeed(seed, algorithm, options);\n};\n\nconst getKeyPairFromSeed = async (seed, algorithm, options) => {\n  const {\n    composedKeyPair\n  } = await generateKeys(seed, algorithm, options);\n  return composedKeyPair;\n};\n\nexport { generateKeyPair, getKeyPairFromMnemonic, getKeyPairFromSeed };"]},"metadata":{},"sourceType":"module"}