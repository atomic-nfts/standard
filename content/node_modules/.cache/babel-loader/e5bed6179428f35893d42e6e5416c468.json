{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getError = void 0;\n\nvar ArweaveError = /*#__PURE__*/function (_Error) {\n  _inherits(ArweaveError, _Error);\n\n  var _super = _createSuper(ArweaveError);\n\n  function ArweaveError(type) {\n    var _this;\n\n    var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ArweaveError);\n\n    if (optional.message) {\n      _this = _super.call(this, optional.message);\n    } else {\n      _this = _super.call(this);\n    }\n\n    _this.type = type;\n    _this.response = optional.response;\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(ArweaveError, [{\n    key: \"getType\",\n    value: function getType() {\n      return this.type;\n    }\n  }]);\n\n  return ArweaveError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.default = ArweaveError; // Safely get error string\n// from an axios response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\n\nfunction getError(resp) {\n  var data = resp.data;\n\n  if (typeof resp.data === \"string\") {\n    try {\n      data = JSON.parse(resp.data);\n    } catch (e) {}\n  }\n\n  if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n    try {\n      data = JSON.parse(data.toString());\n    } catch (e) {}\n  }\n\n  return data ? data.error || data : resp.statusText || \"unknown\";\n}\n\nexports.getError = getError;","map":{"version":3,"sources":["../../../../src/common/lib/error.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAUqB,Y;;;;;AAInB,wBACE,IADF,EAE+D;AAAA;;AAAA,QAA7D,QAA6D,uEAAF,EAAE;;AAAA;;AAE7D,QAAI,QAAQ,CAAC,OAAb,EAAsB;AACpB,gCAAM,QAAQ,CAAC,OAAf;AACD,KAFD,MAEO;AACL;AACD;;AAED,UAAK,IAAL,GAAY,IAAZ;AACA,UAAK,QAAL,GAAgB,QAAQ,CAAC,QAAzB;AAT6D;AAU9D;;;;WAEM,mBAAO;AACZ,aAAO,KAAK,IAAZ;AACD;;;;iCApBuC,K;;AAA1C,OAAA,CAAA,OAAA,GAAA,YAAA,C,CA6BA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAgB,QAAhB,CAAyB,IAAzB,EAAgD;AAC9C,MAAI,IAAI,GAAG,IAAI,CAAC,IAAhB;;AAEA,MAAI,OAAO,IAAI,CAAC,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,QAAI;AACF,MAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAhB,CAAP;AACD,KAFD,CAEE,OAAO,CAAP,EAAU,CAAE;AACf;;AAED,MAAI,IAAI,CAAC,IAAL,YAAqB,WAArB,IAAoC,IAAI,CAAC,IAAL,YAAqB,UAA7D,EAAyE;AACvE,QAAI;AACF,MAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,QAAL,EAAX,CAAP;AACD,KAFD,CAEE,OAAO,CAAP,EAAU,CAAE;AACf;;AAED,SAAO,IAAI,GAAG,IAAI,CAAC,KAAL,IAAc,IAAjB,GAAwB,IAAI,CAAC,UAAL,IAAmB,SAAtD;AACD;;AAhBD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getError = void 0;\nclass ArweaveError extends Error {\n    constructor(type, optional = {}) {\n        if (optional.message) {\n            super(optional.message);\n        }\n        else {\n            super();\n        }\n        this.type = type;\n        this.response = optional.response;\n    }\n    getType() {\n        return this.type;\n    }\n}\nexports.default = ArweaveError;\n// Safely get error string\n// from an axios response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n    let data = resp.data;\n    if (typeof resp.data === \"string\") {\n        try {\n            data = JSON.parse(resp.data);\n        }\n        catch (e) { }\n    }\n    if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n        try {\n            data = JSON.parse(data.toString());\n        }\n        catch (e) { }\n    }\n    return data ? data.error || data : resp.statusText || \"unknown\";\n}\nexports.getError = getError;\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"script"}