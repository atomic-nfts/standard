{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createContractFromTx = exports.createContract = exports.simulateCreateContractFromTx = exports.simulateCreateContractFromSource = void 0;\n/**\n * Simulates the creation of a new contract from a contract, so that the cost for the creation can be checked\n * Returns the transaction describing the creation simulation.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param initState     the contract initial state, as a JSON string.\n * @param contractSrc optional the contract source as string.\n */\n\nfunction simulateCreateContractFromSource(arweave, wallet, initState, contractSrc) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var srcTx, deployInitStateTx, initStateReward;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return arweave.createTransaction({\n              data: contractSrc\n            }, wallet);\n\n          case 2:\n            srcTx = _context.sent;\n            srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n            srcTx.addTag('App-Version', '0.3.0');\n            srcTx.addTag('Content-Type', 'application/javascript');\n            _context.next = 8;\n            return arweave.transactions.sign(srcTx, wallet);\n\n          case 8:\n            _context.next = 10;\n            return simulateCreateContractFromTx(arweave, wallet, srcTx.id, initState);\n\n          case 10:\n            deployInitStateTx = _context.sent;\n            initStateReward = deployInitStateTx.reward; // update the reward of the contract creation by adding the reward needed for the creation of the state\n\n            srcTx.reward = (parseFloat(srcTx.reward) + parseFloat(initStateReward)).toString();\n            return _context.abrupt(\"return\", srcTx);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.simulateCreateContractFromSource = simulateCreateContractFromSource;\n/**\n * Simulate the creation of a contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction simulateCreateContractFromTx(arweave, wallet, srcTxId, state) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var contractTX, _iterator, _step, tag;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return arweave.createTransaction({\n              data: state\n            }, wallet);\n\n          case 2:\n            contractTX = _context2.sent;\n\n            if (!(target && winstonQty && target.length && +winstonQty > 0)) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 6;\n            return arweave.createTransaction({\n              data: state,\n              target: target.toString(),\n              quantity: winstonQty.toString()\n            }, wallet);\n\n          case 6:\n            contractTX = _context2.sent;\n\n          case 7:\n            if (tags && tags.length) {\n              _iterator = _createForOfIteratorHelper(tags);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  tag = _step.value;\n                  contractTX.addTag(tag.name.toString(), tag.value.toString());\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            contractTX.addTag('App-Name', 'SmartWeaveContract');\n            contractTX.addTag('App-Version', '0.3.0');\n            contractTX.addTag('Contract-Src', srcTxId);\n            contractTX.addTag('Content-Type', 'application/json');\n            _context2.next = 14;\n            return arweave.transactions.sign(contractTX, wallet);\n\n          case 14:\n            return _context2.abrupt(\"return\", contractTX);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.simulateCreateContractFromTx = simulateCreateContractFromTx;\n/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\n\nfunction createContract(arweave, wallet, contractSrc, initState) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var srcTx, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return arweave.createTransaction({\n              data: contractSrc\n            }, wallet);\n\n          case 2:\n            srcTx = _context3.sent;\n            srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n            srcTx.addTag('App-Version', '0.3.0');\n            srcTx.addTag('Content-Type', 'application/javascript');\n            _context3.next = 8;\n            return arweave.transactions.sign(srcTx, wallet);\n\n          case 8:\n            _context3.next = 10;\n            return arweave.transactions.post(srcTx);\n\n          case 10:\n            response = _context3.sent;\n\n            if (!(response.status === 200 || response.status === 208)) {\n              _context3.next = 17;\n              break;\n            }\n\n            _context3.next = 14;\n            return createContractFromTx(arweave, wallet, srcTx.id, initState);\n\n          case 14:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 17:\n            throw new Error('Unable to write Contract Source.');\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.createContract = createContract;\n/**\n * Create a new contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction createContractFromTx(arweave, wallet, srcTxId, state) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var contractTX, _iterator2, _step2, tag, response;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return arweave.createTransaction({\n              data: state\n            }, wallet);\n\n          case 2:\n            contractTX = _context4.sent;\n\n            if (!(target && winstonQty && target.length && +winstonQty > 0)) {\n              _context4.next = 7;\n              break;\n            }\n\n            _context4.next = 6;\n            return arweave.createTransaction({\n              data: state,\n              target: target.toString(),\n              quantity: winstonQty.toString()\n            }, wallet);\n\n          case 6:\n            contractTX = _context4.sent;\n\n          case 7:\n            if (tags && tags.length) {\n              _iterator2 = _createForOfIteratorHelper(tags);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  tag = _step2.value;\n                  contractTX.addTag(tag.name.toString(), tag.value.toString());\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n\n            contractTX.addTag('App-Name', 'SmartWeaveContract');\n            contractTX.addTag('App-Version', '0.3.0');\n            contractTX.addTag('Contract-Src', srcTxId);\n            contractTX.addTag('Content-Type', 'application/json');\n            _context4.next = 14;\n            return arweave.transactions.sign(contractTX, wallet);\n\n          case 14:\n            _context4.next = 16;\n            return arweave.transactions.post(contractTX);\n\n          case 16:\n            response = _context4.sent;\n\n            if (!(response.status === 200 || response.status === 208)) {\n              _context4.next = 21;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", contractTX.id);\n\n          case 21:\n            throw new Error('Unable to write Contract Initial State');\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.createContractFromTx = createContractFromTx;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/@kyve/contract-lib/node_modules/smartweave/lib/contract-create.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","createContractFromTx","createContract","simulateCreateContractFromTx","simulateCreateContractFromSource","arweave","wallet","initState","contractSrc","createTransaction","data","srcTx","addTag","transactions","sign","id","deployInitStateTx","initStateReward","reward","parseFloat","toString","srcTxId","state","tags","target","winstonQty","contractTX","length","quantity","tag","name","post","response","status","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createContractFromTx = exports.createContract = exports.simulateCreateContractFromTx = exports.simulateCreateContractFromSource = void 0;\n/**\n * Simulates the creation of a new contract from a contract, so that the cost for the creation can be checked\n * Returns the transaction describing the creation simulation.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param initState     the contract initial state, as a JSON string.\n * @param contractSrc optional the contract source as string.\n */\nfunction simulateCreateContractFromSource(arweave, wallet, initState, contractSrc) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const srcTx = yield arweave.createTransaction({ data: contractSrc }, wallet);\n        srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n        srcTx.addTag('App-Version', '0.3.0');\n        srcTx.addTag('Content-Type', 'application/javascript');\n        yield arweave.transactions.sign(srcTx, wallet);\n        // compute the fee needed to deploy the init state\n        const deployInitStateTx = yield simulateCreateContractFromTx(arweave, wallet, srcTx.id, initState);\n        const initStateReward = deployInitStateTx.reward;\n        // update the reward of the contract creation by adding the reward needed for the creation of the state\n        srcTx.reward = (parseFloat(srcTx.reward) + parseFloat(initStateReward)).toString();\n        return srcTx;\n    });\n}\nexports.simulateCreateContractFromSource = simulateCreateContractFromSource;\n/**\n * Simulate the creation of a contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction simulateCreateContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let contractTX = yield arweave.createTransaction({ data: state }, wallet);\n        if (target && winstonQty && target.length && +winstonQty > 0) {\n            contractTX = yield arweave.createTransaction({\n                data: state,\n                target: target.toString(),\n                quantity: winstonQty.toString(),\n            }, wallet);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                contractTX.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        contractTX.addTag('App-Name', 'SmartWeaveContract');\n        contractTX.addTag('App-Version', '0.3.0');\n        contractTX.addTag('Contract-Src', srcTxId);\n        contractTX.addTag('Content-Type', 'application/json');\n        yield arweave.transactions.sign(contractTX, wallet);\n        return contractTX;\n    });\n}\nexports.simulateCreateContractFromTx = simulateCreateContractFromTx;\n/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\nfunction createContract(arweave, wallet, contractSrc, initState) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const srcTx = yield arweave.createTransaction({ data: contractSrc }, wallet);\n        srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n        srcTx.addTag('App-Version', '0.3.0');\n        srcTx.addTag('Content-Type', 'application/javascript');\n        yield arweave.transactions.sign(srcTx, wallet);\n        const response = yield arweave.transactions.post(srcTx);\n        if (response.status === 200 || response.status === 208) {\n            return yield createContractFromTx(arweave, wallet, srcTx.id, initState);\n        }\n        else {\n            throw new Error('Unable to write Contract Source.');\n        }\n    });\n}\nexports.createContract = createContract;\n/**\n * Create a new contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction createContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let contractTX = yield arweave.createTransaction({ data: state }, wallet);\n        if (target && winstonQty && target.length && +winstonQty > 0) {\n            contractTX = yield arweave.createTransaction({\n                data: state,\n                target: target.toString(),\n                quantity: winstonQty.toString(),\n            }, wallet);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                contractTX.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        contractTX.addTag('App-Name', 'SmartWeaveContract');\n        contractTX.addTag('App-Version', '0.3.0');\n        contractTX.addTag('Contract-Src', srcTxId);\n        contractTX.addTag('Content-Type', 'application/json');\n        yield arweave.transactions.sign(contractTX, wallet);\n        const response = yield arweave.transactions.post(contractTX);\n        if (response.status === 200 || response.status === 208) {\n            return contractTX.id;\n        }\n        else {\n            throw new Error('Unable to write Contract Initial State');\n        }\n    });\n}\nexports.createContractFromTx = createContractFromTx;\n"]},"metadata":{},"sourceType":"script"}