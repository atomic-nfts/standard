{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nclass Ar {\n  constructor() {\n    // Configure and assign the constructor function for the bignumber library.\n    this.BigNum = (value, decimals) => {\n      let instance = bignumber_js_1.BigNumber.clone({\n        DECIMAL_PLACES: decimals\n      });\n      return new instance(value);\n    };\n  }\n\n  winstonToAr(winstonString, {\n    formatted = false,\n    decimals = 12,\n    trim = true\n  } = {}) {\n    let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n    return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n  }\n\n  arToWinston(arString, {\n    formatted = false\n  } = {}) {\n    let number = this.stringToBigNum(arString).shiftedBy(12);\n    return formatted ? number.toFormat() : number.toFixed(0);\n  }\n\n  compare(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.comparedTo(b);\n  }\n\n  isEqual(winstonStringA, winstonStringB) {\n    return this.compare(winstonStringA, winstonStringB) === 0;\n  }\n\n  isLessThan(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.isLessThan(b);\n  }\n\n  isGreaterThan(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.isGreaterThan(b);\n  }\n\n  add(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.plus(winstonStringB).toFixed(0);\n  }\n\n  sub(winstonStringA, winstonStringB) {\n    let a = this.stringToBigNum(winstonStringA);\n    let b = this.stringToBigNum(winstonStringB);\n    return a.minus(winstonStringB).toFixed(0);\n  }\n\n  stringToBigNum(stringValue, decimalPlaces = 12) {\n    return this.BigNum(stringValue, decimalPlaces);\n  }\n\n}\n\nexports.default = Ar;","map":{"version":3,"sources":["../../../src/common/ar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = require(\"bignumber.js\");\nclass Ar {\n    constructor() {\n        // Configure and assign the constructor function for the bignumber library.\n        this.BigNum = (value, decimals) => {\n            let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });\n            return new instance(value);\n        };\n    }\n    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {\n        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n    arToWinston(arString, { formatted = false } = {}) {\n        let number = this.stringToBigNum(arString).shiftedBy(12);\n        return formatted ? number.toFormat() : number.toFixed(0);\n    }\n    compare(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.comparedTo(b);\n    }\n    isEqual(winstonStringA, winstonStringB) {\n        return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n    isLessThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isLessThan(b);\n    }\n    isGreaterThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isGreaterThan(b);\n    }\n    add(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.plus(winstonStringB).toFixed(0);\n    }\n    sub(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.minus(winstonStringB).toFixed(0);\n    }\n    stringToBigNum(stringValue, decimalPlaces = 12) {\n        return this.BigNum(stringValue, decimalPlaces);\n    }\n}\nexports.default = Ar;\n//# sourceMappingURL=ar.js.map"]},"metadata":{},"sourceType":"script"}