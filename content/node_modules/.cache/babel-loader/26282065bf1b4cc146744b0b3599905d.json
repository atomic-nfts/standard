{"ast":null,"code":"/* eslint-disable newline-per-chained-call */\nimport { Buffer } from 'buffer';\nimport { define, objidValues } from './asn1-encoder';\nimport { FLIPPED_OIDS } from './oids'; // RAW related entities\n// ---------------------------------\n\nvar OtherPrimeInfo = define('OtherPrimeInfo', function (asn1) {\n  asn1.seq().obj(asn1.key('prime').int(), asn1.key('exponent').int(), asn1.key('coefficient').int());\n});\nexport var RsaPrivateKey = define('RSAPrivateKey', function (asn1) {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('modulus').int(), asn1.key('publicExponent').int(), asn1.key('privateExponent').int(), asn1.key('prime1').int(), asn1.key('prime2').int(), asn1.key('exponent1').int(), asn1.key('exponent2').int(), asn1.key('coefficient').int(), asn1.key('otherPrimeInfos').seqof(OtherPrimeInfo).optional());\n});\nexport var RsaPublicKey = define('RSAPublicKey', function (asn1) {\n  asn1.seq().obj(asn1.key('modulus').int(), asn1.key('publicExponent').int());\n});\nexport var EcPrivateKey = define('ECPrivateKey', function (asn1) {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('privateKey').octstr(), asn1.key('parameters').explicit(0).optional().use(EcParameters), asn1.key('publicKey').explicit(1).optional().bitstr());\n});\nexport var EcParameters = define('ECParameters', function (asn1) {\n  asn1.choice({\n    namedCurve: asn1.objid(objidValues)\n  });\n}); // PKCS8 related entities\n// ---------------------------------\n\nexport var AlgorithmIdentifier = define('AlgorithmIdentifier', function (asn1) {\n  asn1.seq().obj(asn1.key('id').objid(objidValues), asn1.key('parameters').optional().any());\n}); // This is actually a OneAsymmetricKey, defined in https://tools.ietf.org/html/rfc8410\n\nexport var PrivateKeyInfo = define('PrivateKeyInfo', function (asn1) {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('privateKeyAlgorithm').use(AlgorithmIdentifier), asn1.key('privateKey').octstr(), asn1.key('attributes').implicit(0).optional().any(), asn1.key('publicKey').implicit(1).optional().bitstr());\n});\nexport var EncryptedPrivateKeyInfo = define('EncryptedPrivateKeyInfo', function (asn1) {\n  asn1.seq().obj(asn1.key('encryptionAlgorithm').use(AlgorithmIdentifier), asn1.key('encryptedData').octstr());\n});\nexport var Pbes2Algorithms = define('PBES2Algorithms', function (asn1) {\n  asn1.seq().obj(asn1.key('keyDerivationFunc').use(AlgorithmIdentifier), asn1.key('encryptionScheme').use(AlgorithmIdentifier));\n});\nexport var Pbes2EsParams = {\n  'des-cbc': define('desCBC', function (asn1) {\n    return asn1.octstr();\n  }),\n  'des-ede3-cbc': define('des-EDE3-CBC', function (asn1) {\n    return asn1.octstr();\n  }),\n  'aes128-cbc': define('aes128-CBC', function (asn1) {\n    return asn1.octstr();\n  }),\n  'aes192-cbc': define('aes192-CBC', function (asn1) {\n    return asn1.octstr();\n  }),\n  'aes256-cbc': define('aes256-CBC', function (asn1) {\n    return asn1.octstr();\n  })\n};\nexport var Pbkdf2Params = define('PBKDF2-params', function (asn1) {\n  asn1.seq().obj(asn1.key('salt').choice({\n    specified: asn1.octstr(),\n    otherSource: asn1.use(AlgorithmIdentifier)\n  }), asn1.key('iterationCount').int(), asn1.key('keyLength').int().optional(), asn1.key('prf').use(AlgorithmIdentifier).def({\n    id: FLIPPED_OIDS['hmac-with-sha1'],\n    parameters: Buffer.from([0x05, 0x00])\n  }));\n});\nexport var Rc2CbcParameter = define('RC2-CBC-Parameter', function (asn1) {\n  asn1.seq().obj(asn1.key('rc2ParameterVersion').int().optional(), asn1.key('iv').octstr());\n});\nexport var CurvePrivateKey = define('CurvePrivateKey', function (asn1) {\n  asn1.octstr();\n}); // SPKI related entities\n// ---------------------------------\n\nexport var SubjectPublicKeyInfo = define('SubjectPublicKeyInfo', function (asn1) {\n  asn1.seq().obj(asn1.key('algorithm').use(AlgorithmIdentifier), asn1.key('publicKey').bitstr());\n});","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/util/asn1-entities.js"],"names":["Buffer","define","objidValues","FLIPPED_OIDS","OtherPrimeInfo","asn1","seq","obj","key","int","RsaPrivateKey","seqof","optional","RsaPublicKey","EcPrivateKey","octstr","explicit","use","EcParameters","bitstr","choice","namedCurve","objid","AlgorithmIdentifier","any","PrivateKeyInfo","implicit","EncryptedPrivateKeyInfo","Pbes2Algorithms","Pbes2EsParams","Pbkdf2Params","specified","otherSource","def","id","parameters","from","Rc2CbcParameter","CurvePrivateKey","SubjectPublicKeyInfo"],"mappings":"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","sourcesContent":["/* eslint-disable newline-per-chained-call */\nimport { Buffer } from 'buffer';\nimport { define, objidValues } from './asn1-encoder';\nimport { FLIPPED_OIDS } from './oids'; // RAW related entities\n// ---------------------------------\n\nconst OtherPrimeInfo = define('OtherPrimeInfo', asn1 => {\n  asn1.seq().obj(asn1.key('prime').int(), asn1.key('exponent').int(), asn1.key('coefficient').int());\n});\nexport const RsaPrivateKey = define('RSAPrivateKey', asn1 => {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('modulus').int(), asn1.key('publicExponent').int(), asn1.key('privateExponent').int(), asn1.key('prime1').int(), asn1.key('prime2').int(), asn1.key('exponent1').int(), asn1.key('exponent2').int(), asn1.key('coefficient').int(), asn1.key('otherPrimeInfos').seqof(OtherPrimeInfo).optional());\n});\nexport const RsaPublicKey = define('RSAPublicKey', asn1 => {\n  asn1.seq().obj(asn1.key('modulus').int(), asn1.key('publicExponent').int());\n});\nexport const EcPrivateKey = define('ECPrivateKey', asn1 => {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('privateKey').octstr(), asn1.key('parameters').explicit(0).optional().use(EcParameters), asn1.key('publicKey').explicit(1).optional().bitstr());\n});\nexport const EcParameters = define('ECParameters', asn1 => {\n  asn1.choice({\n    namedCurve: asn1.objid(objidValues)\n  });\n}); // PKCS8 related entities\n// ---------------------------------\n\nexport const AlgorithmIdentifier = define('AlgorithmIdentifier', asn1 => {\n  asn1.seq().obj(asn1.key('id').objid(objidValues), asn1.key('parameters').optional().any());\n}); // This is actually a OneAsymmetricKey, defined in https://tools.ietf.org/html/rfc8410\n\nexport const PrivateKeyInfo = define('PrivateKeyInfo', asn1 => {\n  asn1.seq().obj(asn1.key('version').int(), asn1.key('privateKeyAlgorithm').use(AlgorithmIdentifier), asn1.key('privateKey').octstr(), asn1.key('attributes').implicit(0).optional().any(), asn1.key('publicKey').implicit(1).optional().bitstr());\n});\nexport const EncryptedPrivateKeyInfo = define('EncryptedPrivateKeyInfo', asn1 => {\n  asn1.seq().obj(asn1.key('encryptionAlgorithm').use(AlgorithmIdentifier), asn1.key('encryptedData').octstr());\n});\nexport const Pbes2Algorithms = define('PBES2Algorithms', asn1 => {\n  asn1.seq().obj(asn1.key('keyDerivationFunc').use(AlgorithmIdentifier), asn1.key('encryptionScheme').use(AlgorithmIdentifier));\n});\nexport const Pbes2EsParams = {\n  'des-cbc': define('desCBC', asn1 => asn1.octstr()),\n  'des-ede3-cbc': define('des-EDE3-CBC', asn1 => asn1.octstr()),\n  'aes128-cbc': define('aes128-CBC', asn1 => asn1.octstr()),\n  'aes192-cbc': define('aes192-CBC', asn1 => asn1.octstr()),\n  'aes256-cbc': define('aes256-CBC', asn1 => asn1.octstr())\n};\nexport const Pbkdf2Params = define('PBKDF2-params', asn1 => {\n  asn1.seq().obj(asn1.key('salt').choice({\n    specified: asn1.octstr(),\n    otherSource: asn1.use(AlgorithmIdentifier)\n  }), asn1.key('iterationCount').int(), asn1.key('keyLength').int().optional(), asn1.key('prf').use(AlgorithmIdentifier).def({\n    id: FLIPPED_OIDS['hmac-with-sha1'],\n    parameters: Buffer.from([0x05, 0x00])\n  }));\n});\nexport const Rc2CbcParameter = define('RC2-CBC-Parameter', asn1 => {\n  asn1.seq().obj(asn1.key('rc2ParameterVersion').int().optional(), asn1.key('iv').octstr());\n});\nexport const CurvePrivateKey = define('CurvePrivateKey', asn1 => {\n  asn1.octstr();\n}); // SPKI related entities\n// ---------------------------------\n\nexport const SubjectPublicKeyInfo = define('SubjectPublicKeyInfo', asn1 => {\n  asn1.seq().obj(asn1.key('algorithm').use(AlgorithmIdentifier), asn1.key('publicKey').bitstr());\n});"]},"metadata":{},"sourceType":"module"}