{"ast":null,"code":"var _jsxFileName = \"/home/al/Desktop/koi/narcissus/content/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from \"react\"; // import * as kweb from \"@_koi/sdk/web\";\n// import gifFrames from \"gif-frames\";\n\nimport axios from 'axios';\nimport media from \"./narcissus.json\"; // import SmartWeave from \"smartweave\";\n\nimport \"./App.css\"; // console.log('narcissus', media, media.length)\n// const ktools = new kweb.Web();\n// console.log(\"ktools\", ktools);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet state;\nlet id; // let koii;\n\nlet totalFrames = 225;\n\nfunction App() {\n  _s();\n\n  const [narcissus, setNarcissus] = useState( /*#__PURE__*/_jsxDEV(\"canvas\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 46\n  }, this));\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0); // const [canvas, setCanvas] = useState(<canvas></canvas>);\n\n  const mainRef = useRef(null);\n  const flower = media;\n\n  const updateScore = () => {\n    console.log(\"useEffect score\", mainRef, 'score is', score);\n\n    if (!mainRef.current) {\n      console.log('not updating score because', mainRef.current); // setTimeout(updateScore, 1000)\n\n      return;\n    } else {\n      let scoreSpan = document.getElementsByClassName('scoreSpan');\n\n      if (scoreSpan.length < 1) {\n        let scoreSpan = document.createElement('span');\n        scoreSpan.innerText = score;\n        scoreSpan.className = \"scoreSpan\";\n        mainRef.current.appendChild(scoreSpan);\n      } else {\n        scoreSpan[0].innerText = score;\n      }\n    }\n  };\n\n  function updateImage() {\n    console.log(\"update narcissus\", mainRef);\n\n    if (!mainRef.current) {\n      console.log('not updating narcissus because', mainRef.current);\n      return;\n    } else {\n      console.log('about to append because main is', mainRef.current);\n      let blob = new Blob([narcissus], {\n        type: 'image/svg+xml'\n      });\n      let url = URL.createObjectURL(blob);\n      console.log('got url', url);\n      let narci = document.getElementsByClassName('narcissus');\n\n      if (narci.length < 1) {\n        let image = document.createElement('img');\n        image.src = url;\n        image.className = \"narcissus hide\";\n        image.addEventListener('load', () => URL.revokeObjectURL(url), {\n          once: true\n        });\n        console.log('image', image);\n        setTimeout(function () {\n          let narci = document.getElementsByClassName('narcissus')[0];\n          narci.className = narci.className.split('hide').join('');\n        }, 1200);\n        mainRef.current.appendChild(image);\n      } else {\n        narci[0].src = url;\n      }\n    }\n  }\n\n  useLayoutEffect(() => {\n    console.log('triggered score update');\n    updateScore(score); // Clean up\n\n    return () => {// var spans = document.getElementsByClassName('scoreSpan')\n      // for ( let span of spans ) {\n      //   span.remove()\n      // }\n    };\n  }, [score]);\n  useLayoutEffect(() => {\n    console.log('triggered image update');\n    updateImage(); // Clean up\n\n    return () => {// console.log(\"clean up\");\n      // // mainRef.current.innerHTML = null\n      // let narci = document.getElementsByClassName('narcissus')\n      // for ( let n of narci ) {\n      //   n.remove()\n      // }\n    };\n  }, [narcissus]);\n  /* -- Functions -- */\n\n  const init = async () => {\n    let correctFreezeFrame = await getCorrectFreezeFrame();\n    console.log('setting frame', correctFreezeFrame);\n    await setSVG(correctFreezeFrame);\n    return {\n      state,\n      id\n    };\n  };\n\n  async function getData(url) {\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getCorrectFreezeFrame() {\n    try {\n      var oid = window.location.pathname.split('/')[1] || '1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo'; // console.log('got oid', oid)\n      // var nft_state = await ktools.readNftState(oid);\n\n      var nft_state = await getData('https://arweave.net/1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo'); // var koii_state = await ktools.getContractState();\n\n      var koii_state = await getData('https://arweave.net/cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc'); // contract state\n\n      let current = nft_state.decay.lockState || 0;\n      let lockBlock = nft_state.decay.lastLock;\n      let list = koii_state.stateUpdate.trafficLogs.rewardReport;\n      let newScore; // this will contain the output\n      // looping variables\n\n      let change = 0;\n      let max = nft_state.decay.lastMax || 1;\n      let scalar = 1;\n      let last = 0;\n      let lastMax = 0;\n      let i = 0;\n\n      for (var item of list) {\n        // console.log('checking', i, 'change is ', change)\n        if (item.dailyTrafficBlock > lockBlock) {\n          if (typeof item.logsSummary && Object.keys(item.logsSummary).includes(oid)) {\n            let aScore = item.logsSummary[oid];\n\n            if (aScore < max) {\n              if (last === i - 1) {\n                // if we are on a streak, incremement the scalar\n                scalar = scalar + scalar;\n              }\n\n              if (i - 10 < lastMax) {\n                // we are in a recovery slump, so the scalar is negative now\n                scalar = -1 * scalar;\n              } // increment the adjustment \n\n\n              change = change + aScore * (1 + scalar / 100);\n            } else {\n              // if we have a new max we get a major boost\n              max = aScore;\n              lastMax = i;\n              change = change + 10000;\n            }\n\n            last = i;\n          }\n        }\n\n        i = i + 1;\n      }\n\n      if (change < 1) {\n        // return current;\n        console.log('returning current', current);\n        newScore = current; // return 200;\n      } else {\n        // return current + change;\n        let remainder = totalFrames - current; // the maximum score adjustment we can give (total frames less current score)\n\n        newScore = remainder * (10001 - change);\n\n        if (newScore > totalFrames) {\n          newScore = totalFrames;\n        } else if (newScore < 0) {\n          newScore = 0;\n        }\n      } // newScore = 200; // enable to check gif scrolling locally\n\n\n      console.log('newScore is', newScore); // setScore(newScore);\n\n      return newScore; // return 226;\n    } catch (err) {\n      console.log('error loading nft data', err);\n      setScore(1);\n      return 1;\n    }\n  }\n\n  async function setSVG(frameToSet) {\n    console.log('setSVG');\n    return new Promise(function (resolve, reject) {\n      try {\n        // console.log('narcissus', flower.length)\n        let obj = \"\"; // obj = obj + getSVGContents(flower[index])\n        // obj = flower[index]\n\n        for (let x = 1; x < frameToSet; x++) {\n          setTimeout(function () {\n            // obj = obj + getSVGContents(flower[index])\n            obj = flower[x];\n            setNarcissus(obj);\n            setScore(x); // console.log(index)\n          }, x * 100);\n        }\n\n        console.log('about to set narcissus', obj);\n        console.log('about to set narcissus', typeof obj); // setLoading(false);\n\n        resolve(obj);\n      } catch (err) {\n        console.log(\"err\", err);\n        reject(err);\n      }\n    });\n  } // function getSVGContents(inputString){\n  //     let domParser = new DOMParser();\n  //     let svgDOM = domParser.parseFromString(inputString, 'text/xml')\n  //         .getElementsByTagName('svg')[0];\n  //     return svgDOM.innerHTML\n  // }\n\n\n  useEffect(() => {\n    init();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        ref: mainRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7LtgE5mxydNtYJDNgMEuqsu6THM=\");\n\n_c = App;\nexport default App; // need to fetch the attention logs from koi state\n// then, iterate over the logs and sum the total attention\n// then, check the last time the nft was updated\n// then, check the nft's decay from it's state.decay\n// then, increment counters based on the difference of current block height and the block height at last adjustment\n// then, adjust the 'durability' score\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/src/App.js"],"names":["React","useState","useEffect","useLayoutEffect","useRef","axios","media","state","id","totalFrames","App","narcissus","setNarcissus","loading","setLoading","score","setScore","mainRef","flower","updateScore","console","log","current","scoreSpan","document","getElementsByClassName","length","createElement","innerText","className","appendChild","updateImage","blob","Blob","type","url","URL","createObjectURL","narci","image","src","addEventListener","revokeObjectURL","once","setTimeout","split","join","init","correctFreezeFrame","getCorrectFreezeFrame","setSVG","getData","response","get","data","error","oid","window","location","pathname","nft_state","koii_state","decay","lockState","lockBlock","lastLock","list","stateUpdate","trafficLogs","rewardReport","newScore","change","max","lastMax","scalar","last","i","item","dailyTrafficBlock","logsSummary","Object","keys","includes","aScore","remainder","err","frameToSet","Promise","resolve","reject","obj","x"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect, useRef } from \"react\";\n\n// import * as kweb from \"@_koi/sdk/web\";\n// import gifFrames from \"gif-frames\";\nimport axios from 'axios';\nimport media from \"./narcissus.json\";\n\n// import SmartWeave from \"smartweave\";\n\nimport \"./App.css\";\n\n// console.log('narcissus', media, media.length)\n// const ktools = new kweb.Web();\n\n// console.log(\"ktools\", ktools);\n\nlet state;\nlet id;\n// let koii;\nlet totalFrames = 225;\n\nfunction App() {\n  const [narcissus, setNarcissus] = useState(<canvas></canvas>);\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  // const [canvas, setCanvas] = useState(<canvas></canvas>);\n  const mainRef = useRef(null)\n  const flower = media;\n\n  const updateScore = () => {\n    console.log(\"useEffect score\", mainRef, 'score is', score);\n    if (!mainRef.current) {\n      console.log('not updating score because', mainRef.current)\n      // setTimeout(updateScore, 1000)\n      return;\n    } else {\n      let scoreSpan = document.getElementsByClassName('scoreSpan')\n      \n      if (scoreSpan.length < 1 ) {\n        let scoreSpan = document.createElement('span')\n          scoreSpan.innerText = score;\n          scoreSpan.className = \"scoreSpan\"\n            \n        mainRef.current.appendChild(scoreSpan);\n      } else {\n        scoreSpan[0].innerText = score;\n      }\n    }\n  }\n\n  function updateImage () {\n    console.log(\"update narcissus\", mainRef);\n    if (!mainRef.current) {\n      \n      console.log('not updating narcissus because', mainRef.current)\n      \n      return;\n    } else {\n      console.log('about to append because main is', mainRef.current)\n\n      let blob = new Blob([narcissus], {type: 'image/svg+xml'});\n\n      let url = URL.createObjectURL(blob);\n\n      console.log('got url', url)\n\n      let narci = document.getElementsByClassName('narcissus');\n\n      if (narci.length < 1) {\n        let image = document.createElement('img');\n            image.src = url;\n            image.className = \"narcissus hide\";\n  \n            image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true});\n\n        console.log('image', image)\n\n        setTimeout(function () {\n          let narci = document.getElementsByClassName('narcissus')[0];\n          narci.className = narci.className.split('hide').join('')\n        }, 1200)\n  \n        mainRef.current.appendChild(image); \n      } else {\n        narci[0].src = url;\n      }\n    }\n  }\n\n  useLayoutEffect(() => {\n    console.log('triggered score update')\n    updateScore(score)\n\n    // Clean up\n    return () => {\n      // var spans = document.getElementsByClassName('scoreSpan')\n      // for ( let span of spans ) {\n      //   span.remove()\n      // }\n    };\n  }, [score]);\n\n  \n  useLayoutEffect(() => {\n    console.log('triggered image update')\n    updateImage();\n\n    // Clean up\n    return () => {\n      // console.log(\"clean up\");\n      // // mainRef.current.innerHTML = null\n      // let narci = document.getElementsByClassName('narcissus')\n      // for ( let n of narci ) {\n      //   n.remove()\n      // }\n\n    };\n  }, [narcissus]);\n\n  /* -- Functions -- */\n\n  const init = async () => {\n    let correctFreezeFrame = await getCorrectFreezeFrame()\n    console.log('setting frame', correctFreezeFrame)\n    await setSVG(correctFreezeFrame)\n    return { state, id };\n  };\n\n  async function getData (url) {\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getCorrectFreezeFrame() {\n    try {\n      var oid = (window.location.pathname).split('/')[1] || '1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo';\n      // console.log('got oid', oid)\n      // var nft_state = await ktools.readNftState(oid);\n      var nft_state = await getData('https://arweave.net/1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo')\n      \n      // var koii_state = await ktools.getContractState();\n      var koii_state = await getData('https://arweave.net/cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc');\n\n      // contract state\n      let current = nft_state.decay.lockState || 0;\n      let lockBlock = nft_state.decay.lastLock;\n      let list = koii_state.stateUpdate.trafficLogs.rewardReport;\n      let newScore; // this will contain the output\n\n      // looping variables\n      let change = 0;\n      let max = nft_state.decay.lastMax || 1;\n      let scalar = 1;\n      let last = 0;\n      let lastMax = 0;\n      let i = 0;\n\n      for ( var item of list ) {\n        // console.log('checking', i, 'change is ', change)\n        if ( item.dailyTrafficBlock > lockBlock ) { \n            if ( typeof(item.logsSummary) && Object.keys(item.logsSummary).includes(oid) ) {\n              let aScore = item.logsSummary[oid];\n              if ( aScore < max ) {\n                \n                if ( last === i - 1 ) {\n                  // if we are on a streak, incremement the scalar\n                  scalar = scalar + scalar;\n                }\n                \n                if ( ( i - 10 ) < lastMax ) {\n                  // we are in a recovery slump, so the scalar is negative now\n                  scalar = ( -1 ) * scalar;\n                }\n                \n                // increment the adjustment \n                change = change + aScore * ( 1 + scalar / 100 )\n\n              } else {\n                // if we have a new max we get a major boost\n                max = aScore;\n                lastMax = i;\n                change = change + 10000;\n              }\n              last = i;\n            }\n        }\n        i = i + 1;\n      }\n      \n      if (change < 1) {\n        // return current;\n        console.log('returning current', current)\n        newScore = current;\n        // return 200;\n      } else {\n        // return current + change;\n        let remainder = totalFrames - current; // the maximum score adjustment we can give (total frames less current score)\n        newScore = remainder * ( 10001 - change );\n        if ( newScore > totalFrames ) {\n          newScore = totalFrames;\n        } else if ( newScore < 0 ) {\n          newScore = 0;\n        }\n      }\n      // newScore = 200; // enable to check gif scrolling locally\n      console.log('newScore is', newScore)\n      // setScore(newScore);\n      return newScore;\n      // return 226;\n    } catch (err) {\n      console.log('error loading nft data', err)\n      setScore(1)\n      return 1;\n    }\n  }\n\n  async function setSVG(frameToSet) {\n    console.log('setSVG')\n    return new Promise(function (resolve, reject) {\n      try {\n        // console.log('narcissus', flower.length)\n        let obj = \"\";\n        // obj = obj + getSVGContents(flower[index])\n        // obj = flower[index]\n        for (let x = 1; x < frameToSet; x++ ) {\n          setTimeout( function () {\n            // obj = obj + getSVGContents(flower[index])\n            obj = flower[x]\n            setNarcissus(obj);\n            setScore(x)\n            // console.log(index)\n          }, x*100)\n        }\n        console.log('about to set narcissus', obj)\n        console.log('about to set narcissus', typeof(obj))\n        // setLoading(false);\n        resolve(obj);\n      } catch (err) {\n        console.log(\"err\", err);\n        reject(err);\n      }\n    });\n  }\n\n  // function getSVGContents(inputString){\n  //     let domParser = new DOMParser();\n  //     let svgDOM = domParser.parseFromString(inputString, 'text/xml')\n  //         .getElementsByTagName('svg')[0];\n  //     return svgDOM.innerHTML\n  // }\n\n  useEffect(() => {\n    init();\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      {/* {loading && (\n        // <img alt=\"this is the loading icon\" src={window.location.origin + \"/img/narcissus.gif\"} />\n      )} */}\n      {/* {!loading && ( */}\n        <React.Fragment>\n          <header></header>\n          <main ref={mainRef}>\n          </main>\n        </React.Fragment>\n      {/* )} */}\n    </div>\n  );\n\n}\n\nexport default App;\n\n// need to fetch the attention logs from koi state\n// then, iterate over the logs and sum the total attention\n// then, check the last time the nft was updated\n// then, check the nft's decay from it's state.decay\n// then, increment counters based on the difference of current block height and the block height at last adjustment\n// then, adjust the 'durability' score\n"]},"metadata":{},"sourceType":"module"}