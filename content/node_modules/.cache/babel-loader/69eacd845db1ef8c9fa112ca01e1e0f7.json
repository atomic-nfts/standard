{"ast":null,"code":"import _objectSpread from \"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"encryptionAlgorithm\"];\nimport { maybeDecryptPemBody, maybeEncryptPemBody } from '../raw/encryption';\nimport { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs1-der';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { uint8ArrayToBinaryString } from '../../util/binary';\nimport { DecodePemFailedError } from '../../util/errors';\nexport var decomposePrivateKey = function decomposePrivateKey(pem, options) {\n  var decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'RSA PRIVATE KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  var _maybeDecryptPemBody = maybeDecryptPemBody(decodedPem, options.password),\n      pkcs1Key = _maybeDecryptPemBody.pemBody,\n      encryptionAlgorithm = _maybeDecryptPemBody.encryptionAlgorithm;\n\n  var decomposedKey = decomposeDerPrivateKey(pkcs1Key, options);\n  decomposedKey.encryptionAlgorithm = encryptionAlgorithm;\n  decomposedKey.format = 'pkcs1-pem';\n  return decomposedKey;\n};\nexport var composePrivateKey = function composePrivateKey(_ref, options) {\n  var encryptionAlgorithm = _ref.encryptionAlgorithm,\n      decomposedKey = _objectWithoutProperties(_ref, _excluded);\n\n  var pkcs1Key = composeDerPrivateKey(decomposedKey, options);\n\n  var _maybeEncryptPemBody = maybeEncryptPemBody(pkcs1Key, encryptionAlgorithm, options.password),\n      pemBody = _maybeEncryptPemBody.pemBody,\n      pemHeaders = _maybeEncryptPemBody.pemHeaders;\n\n  return encodePem(_objectSpread({\n    type: 'RSA PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pemBody)\n  }, pemHeaders));\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs1/pkcs1-pem.js"],"names":["maybeDecryptPemBody","maybeEncryptPemBody","decomposePrivateKey","decomposeDerPrivateKey","composePrivateKey","composeDerPrivateKey","decodePem","encodePem","uint8ArrayToBinaryString","DecodePemFailedError","pem","options","decodedPem","err","invalidInputKey","password","pkcs1Key","pemBody","encryptionAlgorithm","decomposedKey","format","pemHeaders","type","body"],"mappings":";;;AAAA,SAASA,mBAAT,EAA8BC,mBAA9B,QAAyD,mBAAzD;AACA,SAASC,mBAAmB,IAAIC,sBAAhC,EAAwDC,iBAAiB,IAAIC,oBAA7E,QAAyG,aAAzG;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,wBAArC;AACA,SAASC,wBAAT,QAAyC,mBAAzC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAO,IAAMP,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACQ,GAAD,EAAMC,OAAN,EAAkB;AACnD,MAAIC,UAAJ;;AAEA,MAAI;AACFA,IAAAA,UAAU,GAAGN,SAAS,CAACI,GAAD,EAAM,iBAAN,CAAtB;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYJ,oBAArC;AACA,UAAMI,GAAN;AACD;;AAED,6BAGIb,mBAAmB,CAACY,UAAD,EAAaD,OAAO,CAACI,QAArB,CAHvB;AAAA,MACWC,QADX,wBACEC,OADF;AAAA,MAEEC,mBAFF,wBAEEA,mBAFF;;AAIA,MAAMC,aAAa,GAAGhB,sBAAsB,CAACa,QAAD,EAAWL,OAAX,CAA5C;AACAQ,EAAAA,aAAa,CAACD,mBAAd,GAAoCA,mBAApC;AACAC,EAAAA,aAAa,CAACC,MAAd,GAAuB,WAAvB;AACA,SAAOD,aAAP;AACD,CAlBM;AAmBP,OAAO,IAAMf,iBAAiB,GAAG,SAApBA,iBAAoB,OAG9BO,OAH8B,EAGlB;AAAA,MAFbO,mBAEa,QAFbA,mBAEa;AAAA,MADVC,aACU;;AACb,MAAMH,QAAQ,GAAGX,oBAAoB,CAACc,aAAD,EAAgBR,OAAhB,CAArC;;AACA,6BAGIV,mBAAmB,CAACe,QAAD,EAAWE,mBAAX,EAAgCP,OAAO,CAACI,QAAxC,CAHvB;AAAA,MACEE,OADF,wBACEA,OADF;AAAA,MAEEI,UAFF,wBAEEA,UAFF;;AAIA,SAAOd,SAAS;AACde,IAAAA,IAAI,EAAE,iBADQ;AAEdC,IAAAA,IAAI,EAAEf,wBAAwB,CAACS,OAAD;AAFhB,KAGXI,UAHW,EAAhB;AAKD,CAdM","sourcesContent":["import { maybeDecryptPemBody, maybeEncryptPemBody } from '../raw/encryption';\nimport { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs1-der';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { uint8ArrayToBinaryString } from '../../util/binary';\nimport { DecodePemFailedError } from '../../util/errors';\nexport const decomposePrivateKey = (pem, options) => {\n  let decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'RSA PRIVATE KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  const {\n    pemBody: pkcs1Key,\n    encryptionAlgorithm\n  } = maybeDecryptPemBody(decodedPem, options.password);\n  const decomposedKey = decomposeDerPrivateKey(pkcs1Key, options);\n  decomposedKey.encryptionAlgorithm = encryptionAlgorithm;\n  decomposedKey.format = 'pkcs1-pem';\n  return decomposedKey;\n};\nexport const composePrivateKey = ({\n  encryptionAlgorithm,\n  ...decomposedKey\n}, options) => {\n  const pkcs1Key = composeDerPrivateKey(decomposedKey, options);\n  const {\n    pemBody,\n    pemHeaders\n  } = maybeEncryptPemBody(pkcs1Key, encryptionAlgorithm, options.password);\n  return encodePem({\n    type: 'RSA PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pemBody),\n    ...pemHeaders\n  });\n};"]},"metadata":{},"sourceType":"module"}