{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectWeightedPstHolder = void 0;\n/**\n * Given an map of address->balance, select one random address\n * weighted by the amount of tokens they hold.\n *\n * @param balances  A balances object, where the key is address and the value is the number of tokens they hold\n */\n\nfunction selectWeightedPstHolder(balances) {\n  // Count the total tokens\n  let totalTokens = 0;\n\n  for (const address of Object.keys(balances)) {\n    totalTokens += balances[address];\n  } // Create a copy of balances where the amount each holder owns is represented\n  // by a value 0-1.\n\n\n  const weighted = {};\n\n  for (const address of Object.keys(balances)) {\n    weighted[address] = balances[address] / totalTokens;\n  }\n\n  let sum = 0;\n  const r = Math.random();\n\n  for (const address of Object.keys(weighted)) {\n    sum += weighted[address];\n\n    if (r <= sum && weighted[address] > 0) {\n      return address;\n    }\n  }\n\n  throw new Error('Unable to select token holder');\n}\n\nexports.selectWeightedPstHolder = selectWeightedPstHolder;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/@kyve/contract-lib/node_modules/smartweave/lib/weighted-pst-holder.js"],"names":["Object","defineProperty","exports","value","selectWeightedPstHolder","balances","totalTokens","address","keys","weighted","sum","r","Math","random","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,uBAAT,CAAiCC,QAAjC,EAA2C;AACvC;AACA,MAAIC,WAAW,GAAG,CAAlB;;AACA,OAAK,MAAMC,OAAX,IAAsBP,MAAM,CAACQ,IAAP,CAAYH,QAAZ,CAAtB,EAA6C;AACzCC,IAAAA,WAAW,IAAID,QAAQ,CAACE,OAAD,CAAvB;AACH,GALsC,CAMvC;AACA;;;AACA,QAAME,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAMF,OAAX,IAAsBP,MAAM,CAACQ,IAAP,CAAYH,QAAZ,CAAtB,EAA6C;AACzCI,IAAAA,QAAQ,CAACF,OAAD,CAAR,GAAoBF,QAAQ,CAACE,OAAD,CAAR,GAAoBD,WAAxC;AACH;;AACD,MAAII,GAAG,GAAG,CAAV;AACA,QAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,EAAV;;AACA,OAAK,MAAMN,OAAX,IAAsBP,MAAM,CAACQ,IAAP,CAAYC,QAAZ,CAAtB,EAA6C;AACzCC,IAAAA,GAAG,IAAID,QAAQ,CAACF,OAAD,CAAf;;AACA,QAAII,CAAC,IAAID,GAAL,IAAYD,QAAQ,CAACF,OAAD,CAAR,GAAoB,CAApC,EAAuC;AACnC,aAAOA,OAAP;AACH;AACJ;;AACD,QAAM,IAAIO,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACDZ,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.selectWeightedPstHolder = void 0;\n/**\n * Given an map of address->balance, select one random address\n * weighted by the amount of tokens they hold.\n *\n * @param balances  A balances object, where the key is address and the value is the number of tokens they hold\n */\nfunction selectWeightedPstHolder(balances) {\n    // Count the total tokens\n    let totalTokens = 0;\n    for (const address of Object.keys(balances)) {\n        totalTokens += balances[address];\n    }\n    // Create a copy of balances where the amount each holder owns is represented\n    // by a value 0-1.\n    const weighted = {};\n    for (const address of Object.keys(balances)) {\n        weighted[address] = balances[address] / totalTokens;\n    }\n    let sum = 0;\n    const r = Math.random();\n    for (const address of Object.keys(weighted)) {\n        sum += weighted[address];\n        if (r <= sum && weighted[address] > 0) {\n            return address;\n        }\n    }\n    throw new Error('Unable to select token holder');\n}\nexports.selectWeightedPstHolder = selectWeightedPstHolder;\n"]},"metadata":{},"sourceType":"script"}