{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactRead = exports.readContract = void 0;\n\nvar index_1 = require(\"./index\");\n\nvar core_1 = require(\"@kyve/core\");\n\nvar extensions_1 = require(\"@kyve/core/dist/extensions\");\n\nvar ardb_1 = __importDefault(require(\"ardb\"));\n\nvar contract_step_1 = require(\"smartweave/lib/contract-step\");\n\nvar utils_1 = require(\"smartweave/lib/utils\");\n\nvar smartweave_1 = require(\"smartweave\");\n\nvar readContract = function readContract(poolID, contractID, returnValidity) {\n  var arweave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : extensions_1.arweaveClient;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var query, result, transaction, latestArchivedBlock, data, state, networkInfo, height, ardb, missingTXs, contractInfo, handler, swGlobal, validity, _iterator, _step, txInfo, tags, currentTx, input, interaction, _result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // load last KYVE state for this contract\n            query = new index_1.Query(poolID, false, arweave);\n            _context.next = 3;\n            return query.tag(\"Target-Contract\", contractID).only([\"id\", \"tags\", \"tags.name\", \"tags.value\"]).limit(1).find();\n\n          case 3:\n            result = _context.sent;\n\n            if (result) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error(\"No matching transactions in pool found.\");\n\n          case 6:\n            transaction = result[0]; // find 'Block' tag\n\n            latestArchivedBlock = parseInt(transaction.tags.find(function (tag) {\n              return tag.name == \"Block\";\n            }).value);\n            _context.t0 = JSON;\n            _context.next = 11;\n            return core_1.getData(transaction.id);\n\n          case 11:\n            _context.t1 = _context.sent;\n            data = _context.t0.parse.call(_context.t0, _context.t1);\n            state = data.state; // find txs which have not been added to state\n            // get latest network height\n\n            _context.next = 16;\n            return arweave.network.getInfo();\n\n          case 16:\n            networkInfo = _context.sent;\n            height = networkInfo.height;\n            ardb = new ardb_1.default(arweave);\n            _context.next = 21;\n            return ardb.sort(\"HEIGHT_ASC\").min(latestArchivedBlock + 1).max(height).tags([{\n              name: \"App-Name\",\n              values: [\"SmartWeaveAction\"]\n            }, {\n              name: \"Contract\",\n              values: [contractID]\n            }]).findAll();\n\n          case 21:\n            missingTXs = _context.sent;\n            _context.next = 24;\n            return sortTransactions(arweave, missingTXs);\n\n          case 24:\n            _context.next = 26;\n            return smartweave_1.loadContract(arweave, contractID);\n\n          case 26:\n            contractInfo = _context.sent;\n            handler = contractInfo.handler, swGlobal = contractInfo.swGlobal;\n            validity = {};\n            _iterator = _createForOfIteratorHelper(missingTXs);\n            _context.prev = 30;\n\n            _iterator.s();\n\n          case 32:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 62;\n              break;\n            }\n\n            txInfo = _step.value;\n            tags = utils_1.formatTags(txInfo.node.tags);\n            currentTx = Object.assign(Object.assign({}, txInfo.node), {\n              tags: tags\n            });\n            input = currentTx.tags.Input; // Check that input is not an array. If a tx has multiple input tags, it will be an array\n\n            if (!Array.isArray(input)) {\n              _context.next = 40;\n              break;\n            }\n\n            console.warn(\"Skipping tx with multiple Input tags - \".concat(currentTx.id));\n            return _context.abrupt(\"continue\", 60);\n\n          case 40:\n            _context.prev = 40;\n            input = JSON.parse(input);\n            _context.next = 48;\n            break;\n\n          case 44:\n            _context.prev = 44;\n            _context.t2 = _context[\"catch\"](40);\n            console.log(_context.t2);\n            return _context.abrupt(\"continue\", 60);\n\n          case 48:\n            if (input) {\n              _context.next = 51;\n              break;\n            }\n\n            console.log(\"Skipping tx with missing or invalid Input tag - \".concat(currentTx.id));\n            return _context.abrupt(\"continue\", 60);\n\n          case 51:\n            interaction = {\n              input: input,\n              caller: currentTx.owner.address\n            };\n            swGlobal._activeTx = currentTx;\n            _context.next = 55;\n            return contract_step_1.execute(handler, interaction, state);\n\n          case 55:\n            _result = _context.sent;\n\n            if (_result.type === \"exception\") {\n              console.warn(\"Executing of interaction: \".concat(currentTx.id, \" threw exception.\"));\n              console.warn(\"\".concat(_result.result));\n            }\n\n            if (_result.type === \"error\") {\n              console.warn(\"Executing of interaction: \".concat(currentTx.id, \" returned error.\"));\n              console.warn(\"\".concat(_result.result));\n            }\n\n            validity[currentTx.id] = _result.type === \"ok\";\n            state = _result.state;\n\n          case 60:\n            _context.next = 32;\n            break;\n\n          case 62:\n            _context.next = 67;\n            break;\n\n          case 64:\n            _context.prev = 64;\n            _context.t3 = _context[\"catch\"](30);\n\n            _iterator.e(_context.t3);\n\n          case 67:\n            _context.prev = 67;\n\n            _iterator.f();\n\n            return _context.finish(67);\n\n          case 70:\n            return _context.abrupt(\"return\", returnValidity ? {\n              state: state,\n              validity: validity\n            } : state);\n\n          case 71:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[30, 64, 67, 70], [40, 44]]);\n  }));\n};\n\nexports.readContract = readContract;\n\nvar interactRead = function interactRead(poolID, contractID, input, wallet) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : \"\";\n  var arweave = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : extensions_1.arweaveClient;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var latestState, _yield$smartweave_1$l, handler, swGlobal, from, interaction, tx, currentBlock, result;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return exports.readContract(poolID, contractID, false, arweave);\n\n          case 2:\n            latestState = _context2.sent;\n            _context2.next = 5;\n            return smartweave_1.loadContract(arweave, contractID);\n\n          case 5:\n            _yield$smartweave_1$l = _context2.sent;\n            handler = _yield$smartweave_1$l.handler;\n            swGlobal = _yield$smartweave_1$l.swGlobal;\n\n            if (!wallet) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 11;\n            return arweave.wallets.getAddress(wallet);\n\n          case 11:\n            _context2.t0 = _context2.sent;\n            _context2.next = 15;\n            break;\n\n          case 14:\n            _context2.t0 = \"\";\n\n          case 15:\n            from = _context2.t0;\n            interaction = {\n              input: input,\n              caller: from\n            };\n            _context2.next = 19;\n            return createTx(arweave, wallet, contractID, input, tags, target, winstonQty);\n\n          case 19:\n            tx = _context2.sent;\n            _context2.next = 22;\n            return arweave.blocks.getCurrent();\n\n          case 22:\n            currentBlock = _context2.sent;\n            // @ts-ignore\n            swGlobal._activeTx = createDummyTx(tx, from, currentBlock);\n            _context2.next = 26;\n            return contract_step_1.execute(handler, interaction, latestState);\n\n          case 26:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result.result);\n\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n\nexports.interactRead = interactRead; // Sort the transactions based on the sort key generated in addSortKey()\n\nfunction sortTransactions(arweave, txInfos) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var addKeysFuncs;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            addKeysFuncs = txInfos.map(function (tx) {\n              return addSortKey(arweave, tx);\n            });\n            _context3.next = 3;\n            return Promise.all(addKeysFuncs);\n\n          case 3:\n            txInfos.sort(function (a, b) {\n              return a.sortKey.localeCompare(b.sortKey);\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n} // Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\n\n\nfunction addSortKey(arweave, txInfo) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var node, blockHashBytes, txIdBytes, concatted, hashed, blockHeight;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            node = txInfo.node;\n            blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n            txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n            concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n            _context4.t0 = utils_1;\n            _context4.next = 7;\n            return arweave.crypto.hash(concatted);\n\n          case 7:\n            _context4.t1 = _context4.sent;\n            hashed = _context4.t0.arrayToHex.call(_context4.t0, _context4.t1);\n            blockHeight = \"000000\".concat(node.block.height).slice(-12);\n            txInfo.sortKey = \"\".concat(blockHeight, \",\").concat(hashed);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nfunction createTx(arweave, wallet, contractId, input, tags) {\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"\";\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : \"0\";\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var options, interactionTx, _iterator2, _step2, tag;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            options = {\n              data: Math.random().toString().slice(-4)\n            };\n\n            if (target && target.length) {\n              options.target = target.toString();\n\n              if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n              }\n            }\n\n            _context5.next = 4;\n            return arweave.createTransaction(options, wallet);\n\n          case 4:\n            interactionTx = _context5.sent;\n\n            if (input) {\n              _context5.next = 7;\n              break;\n            }\n\n            throw new Error(\"Input should be a truthy value: \".concat(JSON.stringify(input)));\n\n          case 7:\n            if (tags && tags.length) {\n              _iterator2 = _createForOfIteratorHelper(tags);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  tag = _step2.value;\n                  interactionTx.addTag(tag.name.toString(), tag.value.toString());\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n\n            interactionTx.addTag(\"App-Name\", \"SmartWeaveAction\");\n            interactionTx.addTag(\"App-Version\", \"0.3.0\");\n            interactionTx.addTag(\"Contract\", contractId);\n            interactionTx.addTag(\"Input\", JSON.stringify(input));\n            _context5.next = 14;\n            return arweave.transactions.sign(interactionTx, wallet);\n\n          case 14:\n            return _context5.abrupt(\"return\", interactionTx);\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}\n\nfunction createDummyTx(tx, from, block) {\n  return {\n    id: tx.id,\n    owner: {\n      address: from\n    },\n    recipient: tx.target,\n    tags: tx.tags,\n    fee: {\n      winston: tx.reward\n    },\n    quantity: {\n      winston: tx.quantity\n    },\n    block: {\n      id: block.indep_hash,\n      height: block.height,\n      timestamp: block.timestamp\n    }\n  };\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/@kyve/query/dist/smartweave.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","interactRead","readContract","index_1","require","core_1","extensions_1","ardb_1","contract_step_1","utils_1","smartweave_1","poolID","contractID","returnValidity","arweave","arweaveClient","query","Query","tag","only","limit","find","Error","transaction","latestArchivedBlock","parseInt","tags","name","JSON","getData","id","data","parse","state","network","getInfo","networkInfo","height","ardb","default","sort","min","max","values","findAll","missingTXs","sortTransactions","loadContract","contractInfo","handler","swGlobal","validity","txInfo","formatTags","node","currentTx","assign","input","Input","Array","isArray","console","warn","log","interaction","caller","owner","address","_activeTx","execute","type","wallet","target","winstonQty","latestState","wallets","getAddress","from","createTx","tx","blocks","getCurrent","currentBlock","createDummyTx","txInfos","addKeysFuncs","map","addSortKey","all","a","b","sortKey","localeCompare","blockHashBytes","utils","b64UrlToBuffer","block","txIdBytes","concatted","concatBuffers","crypto","hash","hashed","arrayToHex","blockHeight","slice","contractId","options","Math","random","toString","length","quantity","createTransaction","interactionTx","stringify","addTag","transactions","sign","recipient","fee","winston","reward","indep_hash","timestamp"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.interactRead = exports.readContract = void 0;\nconst index_1 = require(\"./index\");\nconst core_1 = require(\"@kyve/core\");\nconst extensions_1 = require(\"@kyve/core/dist/extensions\");\nconst ardb_1 = __importDefault(require(\"ardb\"));\nconst contract_step_1 = require(\"smartweave/lib/contract-step\");\nconst utils_1 = require(\"smartweave/lib/utils\");\nconst smartweave_1 = require(\"smartweave\");\nconst readContract = (poolID, contractID, returnValidity, arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n    // load last KYVE state for this contract\n    const query = new index_1.Query(poolID, false, arweave);\n    const result = yield query\n        .tag(\"Target-Contract\", contractID)\n        .only([\"id\", \"tags\", \"tags.name\", \"tags.value\"])\n        .limit(1)\n        .find();\n    if (!result) {\n        throw new Error(\"No matching transactions in pool found.\");\n    }\n    const transaction = result[0];\n    // find 'Block' tag\n    const latestArchivedBlock = parseInt(transaction.tags.find((tag) => tag.name == \"Block\").value);\n    const data = JSON.parse(yield core_1.getData(transaction.id));\n    let state = data.state;\n    // find txs which have not been added to state\n    // get latest network height\n    const networkInfo = yield arweave.network.getInfo();\n    const height = networkInfo.height;\n    const ardb = new ardb_1.default(arweave);\n    const missingTXs = (yield ardb\n        .sort(\"HEIGHT_ASC\")\n        .min(latestArchivedBlock + 1)\n        .max(height)\n        .tags([\n        { name: \"App-Name\", values: [\"SmartWeaveAction\"] },\n        { name: \"Contract\", values: [contractID] },\n    ])\n        .findAll());\n    // from https://github.com/ArweaveTeam/SmartWeave/blob/master/src/contract-read.ts#L56\n    // TODO: FIX ONCE https://github.com/ArweaveTeam/SmartWeave/pull/82 is merged\n    yield sortTransactions(arweave, missingTXs);\n    const contractInfo = yield smartweave_1.loadContract(arweave, contractID);\n    const { handler, swGlobal } = contractInfo;\n    const validity = {};\n    for (const txInfo of missingTXs) {\n        const tags = utils_1.formatTags(txInfo.node.tags);\n        const currentTx = Object.assign(Object.assign({}, txInfo.node), { tags });\n        let input = currentTx.tags.Input;\n        // Check that input is not an array. If a tx has multiple input tags, it will be an array\n        if (Array.isArray(input)) {\n            console.warn(`Skipping tx with multiple Input tags - ${currentTx.id}`);\n            continue;\n        }\n        try {\n            input = JSON.parse(input);\n        }\n        catch (e) {\n            console.log(e);\n            continue;\n        }\n        if (!input) {\n            console.log(`Skipping tx with missing or invalid Input tag - ${currentTx.id}`);\n            continue;\n        }\n        const interaction = {\n            input,\n            caller: currentTx.owner.address,\n        };\n        swGlobal._activeTx = currentTx;\n        const result = yield contract_step_1.execute(handler, interaction, state);\n        if (result.type === \"exception\") {\n            console.warn(`Executing of interaction: ${currentTx.id} threw exception.`);\n            console.warn(`${result.result}`);\n        }\n        if (result.type === \"error\") {\n            console.warn(`Executing of interaction: ${currentTx.id} returned error.`);\n            console.warn(`${result.result}`);\n        }\n        validity[currentTx.id] = result.type === \"ok\";\n        state = result.state;\n    }\n    return returnValidity ? { state, validity } : state;\n});\nexports.readContract = readContract;\nconst interactRead = (poolID, contractID, input, wallet, tags = [], target = \"\", winstonQty = \"\", arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n    const latestState = yield exports.readContract(poolID, contractID, false, arweave);\n    const { handler, swGlobal } = yield smartweave_1.loadContract(arweave, contractID);\n    const from = wallet ? yield arweave.wallets.getAddress(wallet) : \"\";\n    const interaction = {\n        input,\n        caller: from,\n    };\n    const tx = yield createTx(arweave, wallet, contractID, input, tags, target, winstonQty);\n    const currentBlock = yield arweave.blocks.getCurrent();\n    // @ts-ignore\n    swGlobal._activeTx = createDummyTx(tx, from, currentBlock);\n    const result = yield contract_step_1.execute(handler, interaction, latestState);\n    return result.result;\n});\nexports.interactRead = interactRead;\n// Sort the transactions based on the sort key generated in addSortKey()\nfunction sortTransactions(arweave, txInfos) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const addKeysFuncs = txInfos.map((tx) => addSortKey(arweave, tx));\n        yield Promise.all(addKeysFuncs);\n        txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n    });\n}\n// Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\nfunction addSortKey(arweave, txInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { node } = txInfo;\n        const blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n        const txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n        const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n        const hashed = utils_1.arrayToHex(yield arweave.crypto.hash(concatted));\n        const blockHeight = `000000${node.block.height}`.slice(-12);\n        txInfo.sortKey = `${blockHeight},${hashed}`;\n    });\n}\nfunction createTx(arweave, wallet, contractId, input, tags, target = \"\", winstonQty = \"0\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        const options = {\n            data: Math.random().toString().slice(-4),\n        };\n        if (target && target.length) {\n            options.target = target.toString();\n            if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n            }\n        }\n        const interactionTx = yield arweave.createTransaction(options, wallet);\n        if (!input) {\n            throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                interactionTx.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        interactionTx.addTag(\"App-Name\", \"SmartWeaveAction\");\n        interactionTx.addTag(\"App-Version\", \"0.3.0\");\n        interactionTx.addTag(\"Contract\", contractId);\n        interactionTx.addTag(\"Input\", JSON.stringify(input));\n        yield arweave.transactions.sign(interactionTx, wallet);\n        return interactionTx;\n    });\n}\nfunction createDummyTx(tx, from, block) {\n    return {\n        id: tx.id,\n        owner: {\n            address: from,\n        },\n        recipient: tx.target,\n        tags: tx.tags,\n        fee: {\n            winston: tx.reward,\n        },\n        quantity: {\n            winston: tx.quantity,\n        },\n        block: {\n            id: block.indep_hash,\n            height: block.height,\n            timestamp: block.timestamp,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}