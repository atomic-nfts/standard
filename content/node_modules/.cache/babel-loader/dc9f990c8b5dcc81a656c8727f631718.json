{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SiloResource = void 0;\n\nconst ArweaveUtils = require(\"./lib/utils\");\n\nclass Silo {\n  constructor(api, crypto, transactions) {\n    this.api = api;\n    this.crypto = crypto;\n    this.transactions = transactions;\n  }\n\n  async get(siloURI) {\n    if (!siloURI) {\n      throw new Error(`No Silo URI specified`);\n    }\n\n    const resource = await this.parseUri(siloURI);\n    const ids = await this.transactions.search(\"Silo-Name\", resource.getAccessKey());\n\n    if (ids.length == 0) {\n      throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n    }\n\n    const transaction = await this.transactions.get(ids[0]);\n\n    if (!transaction) {\n      throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n    }\n\n    const encrypted = transaction.get(\"data\", {\n      decode: true,\n      string: false\n    });\n    return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n  }\n\n  async readTransactionData(transaction, siloURI) {\n    if (!siloURI) {\n      throw new Error(`No Silo URI specified`);\n    }\n\n    const resource = await this.parseUri(siloURI);\n    const encrypted = transaction.get(\"data\", {\n      decode: true,\n      string: false\n    });\n    return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n  }\n\n  async parseUri(siloURI) {\n    const parsed = siloURI.match(/^([a-z0-9-_]+)\\.([0-9]+)/i);\n\n    if (!parsed) {\n      throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);\n    }\n\n    const siloName = parsed[1];\n    const hashIterations = Math.pow(2, parseInt(parsed[2]));\n    const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);\n    const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));\n    const encryptionkey = await this.hash(digest.slice(16, 31), 1);\n    return new SiloResource(siloURI, accessKey, encryptionkey);\n  }\n\n  async hash(input, iterations) {\n    let digest = await this.crypto.hash(input);\n\n    for (let count = 0; count < iterations - 1; count++) {\n      digest = await this.crypto.hash(digest);\n    }\n\n    return digest;\n  }\n\n}\n\nexports.default = Silo;\n\nclass SiloResource {\n  constructor(uri, accessKey, encryptionKey) {\n    this.uri = uri;\n    this.accessKey = accessKey;\n    this.encryptionKey = encryptionKey;\n  }\n\n  getUri() {\n    return this.uri;\n  }\n\n  getAccessKey() {\n    return this.accessKey;\n  }\n\n  getEncryptionKey() {\n    return this.encryptionKey;\n  }\n\n}\n\nexports.SiloResource = SiloResource;","map":{"version":3,"sources":["../../../src/common/silo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiloResource = void 0;\nconst ArweaveUtils = require(\"./lib/utils\");\nclass Silo {\n    constructor(api, crypto, transactions) {\n        this.api = api;\n        this.crypto = crypto;\n        this.transactions = transactions;\n    }\n    async get(siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const ids = await this.transactions.search(\"Silo-Name\", resource.getAccessKey());\n        if (ids.length == 0) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const transaction = await this.transactions.get(ids[0]);\n        if (!transaction) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async readTransactionData(transaction, siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async parseUri(siloURI) {\n        const parsed = siloURI.match(/^([a-z0-9-_]+)\\.([0-9]+)/i);\n        if (!parsed) {\n            throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);\n        }\n        const siloName = parsed[1];\n        const hashIterations = Math.pow(2, parseInt(parsed[2]));\n        const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);\n        const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));\n        const encryptionkey = await this.hash(digest.slice(16, 31), 1);\n        return new SiloResource(siloURI, accessKey, encryptionkey);\n    }\n    async hash(input, iterations) {\n        let digest = await this.crypto.hash(input);\n        for (let count = 0; count < iterations - 1; count++) {\n            digest = await this.crypto.hash(digest);\n        }\n        return digest;\n    }\n}\nexports.default = Silo;\nclass SiloResource {\n    constructor(uri, accessKey, encryptionKey) {\n        this.uri = uri;\n        this.accessKey = accessKey;\n        this.encryptionKey = encryptionKey;\n    }\n    getUri() {\n        return this.uri;\n    }\n    getAccessKey() {\n        return this.accessKey;\n    }\n    getEncryptionKey() {\n        return this.encryptionKey;\n    }\n}\nexports.SiloResource = SiloResource;\n//# sourceMappingURL=silo.js.map"]},"metadata":{},"sourceType":"script"}