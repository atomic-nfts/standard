{"ast":null,"code":"\"use strict\";\n/*exported ndjsonStream*/\n\nvar namespace = require('can-namespace');\n\nvar ndjsonStream = function (response) {\n  // For cancellation\n  var is_reader,\n      cancellationRequest = false;\n  return new ReadableStream({\n    start: function (controller) {\n      var reader = response.getReader();\n      is_reader = reader;\n      var decoder = new TextDecoder();\n      var data_buf = \"\";\n      reader.read().then(function processResult(result) {\n        if (result.done) {\n          if (cancellationRequest) {\n            // Immediately exit\n            return;\n          }\n\n          data_buf = data_buf.trim();\n\n          if (data_buf.length !== 0) {\n            try {\n              var data_l = JSON.parse(data_buf);\n              controller.enqueue(data_l);\n            } catch (e) {\n              controller.error(e);\n              return;\n            }\n          }\n\n          controller.close();\n          return;\n        }\n\n        var data = decoder.decode(result.value, {\n          stream: true\n        });\n        data_buf += data;\n        var lines = data_buf.split(\"\\n\");\n\n        for (var i = 0; i < lines.length - 1; ++i) {\n          var l = lines[i].trim();\n\n          if (l.length > 0) {\n            try {\n              var data_line = JSON.parse(l);\n              controller.enqueue(data_line);\n            } catch (e) {\n              controller.error(e);\n              cancellationRequest = true;\n              reader.cancel();\n              return;\n            }\n          }\n        }\n\n        data_buf = lines[lines.length - 1];\n        return reader.read().then(processResult);\n      });\n    },\n    cancel: function (reason) {\n      console.log(\"Cancel registered due to \", reason);\n      cancellationRequest = true;\n      is_reader.cancel();\n    }\n  });\n};\n\nmodule.exports = namespace.ndjsonStream = ndjsonStream;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/can-ndjson-stream/can-ndjson-stream.js"],"names":["namespace","require","ndjsonStream","response","is_reader","cancellationRequest","ReadableStream","start","controller","reader","getReader","decoder","TextDecoder","data_buf","read","then","processResult","result","done","trim","length","data_l","JSON","parse","enqueue","e","error","close","data","decode","value","stream","lines","split","i","l","data_line","cancel","reason","console","log","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AAEA,IAAIC,YAAY,GAAG,UAASC,QAAT,EAAmB;AACpC;AACA,MAAIC,SAAJ;AAAA,MAAeC,mBAAmB,GAAG,KAArC;AACA,SAAO,IAAIC,cAAJ,CAAmB;AACxBC,IAAAA,KAAK,EAAE,UAASC,UAAT,EAAqB;AAC1B,UAAIC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAb;AACAN,MAAAA,SAAS,GAAGK,MAAZ;AACA,UAAIE,OAAO,GAAG,IAAIC,WAAJ,EAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AAEAJ,MAAAA,MAAM,CAACK,IAAP,GAAcC,IAAd,CAAmB,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAChD,YAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,cAAIb,mBAAJ,EAAyB;AACvB;AACA;AACD;;AAEDQ,UAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,EAAX;;AACA,cAAIN,QAAQ,CAACO,MAAT,KAAoB,CAAxB,EAA2B;AACzB,gBAAI;AACF,kBAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWV,QAAX,CAAb;AACAL,cAAAA,UAAU,CAACgB,OAAX,CAAmBH,MAAnB;AACD,aAHD,CAGE,OAAMI,CAAN,EAAS;AACTjB,cAAAA,UAAU,CAACkB,KAAX,CAAiBD,CAAjB;AACA;AACD;AACF;;AACDjB,UAAAA,UAAU,CAACmB,KAAX;AACA;AACD;;AAED,YAAIC,IAAI,GAAGjB,OAAO,CAACkB,MAAR,CAAeZ,MAAM,CAACa,KAAtB,EAA6B;AAACC,UAAAA,MAAM,EAAE;AAAT,SAA7B,CAAX;AACAlB,QAAAA,QAAQ,IAAIe,IAAZ;AACA,YAAII,KAAK,GAAGnB,QAAQ,CAACoB,KAAT,CAAe,IAAf,CAAZ;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAACZ,MAAN,GAAe,CAAlC,EAAqC,EAAEc,CAAvC,EAA0C;AACxC,cAAIC,CAAC,GAAGH,KAAK,CAACE,CAAD,CAAL,CAASf,IAAT,EAAR;;AACA,cAAIgB,CAAC,CAACf,MAAF,GAAW,CAAf,EAAkB;AAChB,gBAAI;AACF,kBAAIgB,SAAS,GAAGd,IAAI,CAACC,KAAL,CAAWY,CAAX,CAAhB;AACA3B,cAAAA,UAAU,CAACgB,OAAX,CAAmBY,SAAnB;AACD,aAHD,CAGE,OAAMX,CAAN,EAAS;AACTjB,cAAAA,UAAU,CAACkB,KAAX,CAAiBD,CAAjB;AACApB,cAAAA,mBAAmB,GAAG,IAAtB;AACAI,cAAAA,MAAM,CAAC4B,MAAP;AACA;AACD;AACF;AACF;;AACDxB,QAAAA,QAAQ,GAAGmB,KAAK,CAACA,KAAK,CAACZ,MAAN,GAAa,CAAd,CAAhB;AAEA,eAAOX,MAAM,CAACK,IAAP,GAAcC,IAAd,CAAmBC,aAAnB,CAAP;AACD,OAzCD;AA2CD,KAlDuB;AAmDxBqB,IAAAA,MAAM,EAAE,UAASC,MAAT,EAAiB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACAjC,MAAAA,mBAAmB,GAAG,IAAtB;AACAD,MAAAA,SAAS,CAACiC,MAAV;AACD;AAvDuB,GAAnB,CAAP;AAyDD,CA5DD;;AA8DAI,MAAM,CAACC,OAAP,GAAiB1C,SAAS,CAACE,YAAV,GAAyBA,YAA1C","sourcesContent":["\"use strict\";\n/*exported ndjsonStream*/\n\nvar namespace = require('can-namespace');\n\nvar ndjsonStream = function(response) {\n  // For cancellation\n  var is_reader, cancellationRequest = false;\n  return new ReadableStream({\n    start: function(controller) {\n      var reader = response.getReader();\n      is_reader = reader;\n      var decoder = new TextDecoder();\n      var data_buf = \"\";\n\n      reader.read().then(function processResult(result) {\n        if (result.done) {\n          if (cancellationRequest) {\n            // Immediately exit\n            return;\n          }\n\n          data_buf = data_buf.trim();\n          if (data_buf.length !== 0) {\n            try {\n              var data_l = JSON.parse(data_buf);\n              controller.enqueue(data_l);\n            } catch(e) {\n              controller.error(e);\n              return;\n            }\n          }\n          controller.close();\n          return;\n        }\n\n        var data = decoder.decode(result.value, {stream: true});\n        data_buf += data;\n        var lines = data_buf.split(\"\\n\");\n        for(var i = 0; i < lines.length - 1; ++i) {\n          var l = lines[i].trim();\n          if (l.length > 0) {\n            try {\n              var data_line = JSON.parse(l);\n              controller.enqueue(data_line);\n            } catch(e) {\n              controller.error(e);\n              cancellationRequest = true;\n              reader.cancel();\n              return;\n            }\n          }\n        }\n        data_buf = lines[lines.length-1];\n\n        return reader.read().then(processResult);\n      });\n\n    },\n    cancel: function(reason) {\n      console.log(\"Cancel registered due to \", reason);\n      cancellationRequest = true;\n      is_reader.cancel();\n    }\n  });\n};\n\nmodule.exports = namespace.ndjsonStream = ndjsonStream;\n"]},"metadata":{},"sourceType":"script"}