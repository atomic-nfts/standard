{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\nmodule.exports = Writable;\n/*<replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {}; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  var hwm = options.highWaterMark;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode; // cast to ints.\n\n  this.highWaterMark = ~~this.highWaterMark;\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.buffer = []; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex'); // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n\n\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n  this._writableState = new WritableState(options, this); // legacy.\n\n  this.writable = true;\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb\n\n  stream.emit('error', er);\n  process.nextTick(function () {\n    cb(er);\n  });\n} // If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function () {\n      cb(er);\n    });\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = function cb() {};\n  if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  return ret;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n\n  return chunk;\n} // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\n\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n  if (state.writing) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, len, chunk, encoding, cb);\n  return ret;\n}\n\nfunction doWrite(stream, state, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n\n  stream._write(chunk, encoding, state.onwrite);\n\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync) process.nextTick(function () {\n    cb(er);\n  });else cb(er);\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n    if (!finished && !state.bufferProcessing && state.buffer.length) clearBuffer(stream, state);\n\n    if (sync) {\n      process.nextTick(function () {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  cb();\n  if (finished) finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  for (var c = 0; c < state.buffer.length; c++) {\n    var entry = state.buffer[c];\n    var chunk = entry.chunk;\n    var encoding = entry.encoding;\n    var cb = entry.callback;\n    var len = state.objectMode ? 1 : chunk.length;\n    doWrite(stream, state, len, chunk, encoding, cb); // if we didn't call the onwrite immediately, then\n    // it means that we need to wait until it does.\n    // also, that means that the chunk and cb are currently\n    // being processed, so move the buffer counter past them.\n\n    if (state.writing) {\n      c++;\n      break;\n    }\n  }\n\n  state.bufferProcessing = false;\n  if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (typeof chunk !== 'undefined' && chunk !== null) this.write(chunk, encoding); // ignore unnecessary end() calls.\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(stream, state) {\n  return state.ending && state.length === 0 && !state.finished && !state.writing;\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n\n  if (need) {\n    state.finished = true;\n    stream.emit('finish');\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/contentstream/node_modules/readable-stream/lib/_stream_writable.js"],"names":["module","exports","Writable","Buffer","require","WritableState","util","inherits","Stream","WriteReq","chunk","encoding","cb","callback","options","stream","hwm","highWaterMark","objectMode","needDrain","ending","ended","finished","noDecode","decodeStrings","defaultEncoding","length","writing","sync","bufferProcessing","onwrite","er","writecb","writelen","buffer","errorEmitted","Duplex","_writableState","writable","call","prototype","pipe","emit","Error","writeAfterEnd","state","process","nextTick","validChunk","valid","isBuffer","undefined","TypeError","write","ret","writeOrBuffer","decodeChunk","len","push","doWrite","_write","onwriteError","onwriteStateUpdate","needFinish","clearBuffer","afterWrite","onwriteDrain","finishMaybe","c","entry","slice","end","endWritable","need","once"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAA/B;AACA;;;AAEAD,QAAQ,CAACG,aAAT,GAAyBA,aAAzB;AAGA;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,cAAD,CAAlB;;AACAE,IAAI,CAACC,QAAL,GAAgBH,OAAO,CAAC,UAAD,CAAvB;AACA;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AAEAE,IAAI,CAACC,QAAL,CAAcL,QAAd,EAAwBM,MAAxB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,EAAnC,EAAuC;AACrC,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKE,QAAL,GAAgBD,EAAhB;AACD;;AAED,SAASP,aAAT,CAAuBS,OAAvB,EAAgCC,MAAhC,EAAwC;AACtCD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADsC,CAGtC;AACA;AACA;;AACA,MAAIE,GAAG,GAAGF,OAAO,CAACG,aAAlB;AACA,OAAKA,aAAL,GAAsBD,GAAG,IAAIA,GAAG,KAAK,CAAhB,GAAqBA,GAArB,GAA2B,KAAK,IAArD,CAPsC,CAStC;AACA;;AACA,OAAKE,UAAL,GAAkB,CAAC,CAACJ,OAAO,CAACI,UAA5B,CAXsC,CAatC;;AACA,OAAKD,aAAL,GAAqB,CAAC,CAAC,KAAKA,aAA5B;AAEA,OAAKE,SAAL,GAAiB,KAAjB,CAhBsC,CAiBtC;;AACA,OAAKC,MAAL,GAAc,KAAd,CAlBsC,CAmBtC;;AACA,OAAKC,KAAL,GAAa,KAAb,CApBsC,CAqBtC;;AACA,OAAKC,QAAL,GAAgB,KAAhB,CAtBsC,CAwBtC;AACA;AACA;;AACA,MAAIC,QAAQ,GAAGT,OAAO,CAACU,aAAR,KAA0B,KAAzC;AACA,OAAKA,aAAL,GAAqB,CAACD,QAAtB,CA5BsC,CA8BtC;AACA;AACA;;AACA,OAAKE,eAAL,GAAuBX,OAAO,CAACW,eAAR,IAA2B,MAAlD,CAjCsC,CAmCtC;AACA;AACA;;AACA,OAAKC,MAAL,GAAc,CAAd,CAtCsC,CAwCtC;;AACA,OAAKC,OAAL,GAAe,KAAf,CAzCsC,CA2CtC;AACA;AACA;AACA;;AACA,OAAKC,IAAL,GAAY,IAAZ,CA/CsC,CAiDtC;AACA;AACA;;AACA,OAAKC,gBAAL,GAAwB,KAAxB,CApDsC,CAsDtC;;AACA,OAAKC,OAAL,GAAe,UAASC,EAAT,EAAa;AAC1BD,IAAAA,OAAO,CAACf,MAAD,EAASgB,EAAT,CAAP;AACD,GAFD,CAvDsC,CA2DtC;;;AACA,OAAKC,OAAL,GAAe,IAAf,CA5DsC,CA8DtC;;AACA,OAAKC,QAAL,GAAgB,CAAhB;AAEA,OAAKC,MAAL,GAAc,EAAd,CAjEsC,CAmEtC;;AACA,OAAKC,YAAL,GAAoB,KAApB;AACD;;AAED,SAASjC,QAAT,CAAkBY,OAAlB,EAA2B;AACzB,MAAIsB,MAAM,GAAGhC,OAAO,CAAC,kBAAD,CAApB,CADyB,CAGzB;AACA;;;AACA,MAAI,EAAE,gBAAgBF,QAAlB,KAA+B,EAAE,gBAAgBkC,MAAlB,CAAnC,EACE,OAAO,IAAIlC,QAAJ,CAAaY,OAAb,CAAP;AAEF,OAAKuB,cAAL,GAAsB,IAAIhC,aAAJ,CAAkBS,OAAlB,EAA2B,IAA3B,CAAtB,CARyB,CAUzB;;AACA,OAAKwB,QAAL,GAAgB,IAAhB;AAEA9B,EAAAA,MAAM,CAAC+B,IAAP,CAAY,IAAZ;AACD,C,CAED;;;AACArC,QAAQ,CAACsC,SAAT,CAAmBC,IAAnB,GAA0B,YAAW;AACnC,OAAKC,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAU,4BAAV,CAAnB;AACD,CAFD;;AAKA,SAASC,aAAT,CAAuB7B,MAAvB,EAA+B8B,KAA/B,EAAsCjC,EAAtC,EAA0C;AACxC,MAAImB,EAAE,GAAG,IAAIY,KAAJ,CAAU,iBAAV,CAAT,CADwC,CAExC;;AACA5B,EAAAA,MAAM,CAAC2B,IAAP,CAAY,OAAZ,EAAqBX,EAArB;AACAe,EAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BnC,IAAAA,EAAE,CAACmB,EAAD,CAAF;AACD,GAFD;AAGD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASiB,UAAT,CAAoBjC,MAApB,EAA4B8B,KAA5B,EAAmCnC,KAAnC,EAA0CE,EAA1C,EAA8C;AAC5C,MAAIqC,KAAK,GAAG,IAAZ;;AACA,MAAI,CAAC9C,MAAM,CAAC+C,QAAP,CAAgBxC,KAAhB,CAAD,IACA,aAAa,OAAOA,KADpB,IAEAA,KAAK,KAAK,IAFV,IAGAA,KAAK,KAAKyC,SAHV,IAIA,CAACN,KAAK,CAAC3B,UAJX,EAIuB;AACrB,QAAIa,EAAE,GAAG,IAAIqB,SAAJ,CAAc,iCAAd,CAAT;AACArC,IAAAA,MAAM,CAAC2B,IAAP,CAAY,OAAZ,EAAqBX,EAArB;AACAe,IAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BnC,MAAAA,EAAE,CAACmB,EAAD,CAAF;AACD,KAFD;AAGAkB,IAAAA,KAAK,GAAG,KAAR;AACD;;AACD,SAAOA,KAAP;AACD;;AAED/C,QAAQ,CAACsC,SAAT,CAAmBa,KAAnB,GAA2B,UAAS3C,KAAT,EAAgBC,QAAhB,EAA0BC,EAA1B,EAA8B;AACvD,MAAIiC,KAAK,GAAG,KAAKR,cAAjB;AACA,MAAIiB,GAAG,GAAG,KAAV;;AAEA,MAAI,OAAO3C,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,IAAAA,EAAE,GAAGD,QAAL;AACAA,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,MAAIR,MAAM,CAAC+C,QAAP,CAAgBxC,KAAhB,CAAJ,EACEC,QAAQ,GAAG,QAAX,CADF,KAEK,IAAI,CAACA,QAAL,EACHA,QAAQ,GAAGkC,KAAK,CAACpB,eAAjB;AAEF,MAAI,OAAOb,EAAP,KAAc,UAAlB,EACEA,EAAE,GAAG,cAAW,CAAE,CAAlB;AAEF,MAAIiC,KAAK,CAACxB,KAAV,EACEuB,aAAa,CAAC,IAAD,EAAOC,KAAP,EAAcjC,EAAd,CAAb,CADF,KAEK,IAAIoC,UAAU,CAAC,IAAD,EAAOH,KAAP,EAAcnC,KAAd,EAAqBE,EAArB,CAAd,EACH0C,GAAG,GAAGC,aAAa,CAAC,IAAD,EAAOV,KAAP,EAAcnC,KAAd,EAAqBC,QAArB,EAA+BC,EAA/B,CAAnB;AAEF,SAAO0C,GAAP;AACD,CAvBD;;AAyBA,SAASE,WAAT,CAAqBX,KAArB,EAA4BnC,KAA5B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAI,CAACkC,KAAK,CAAC3B,UAAP,IACA2B,KAAK,CAACrB,aAAN,KAAwB,KADxB,IAEA,OAAOd,KAAP,KAAiB,QAFrB,EAE+B;AAC7BA,IAAAA,KAAK,GAAG,IAAIP,MAAJ,CAAWO,KAAX,EAAkBC,QAAlB,CAAR;AACD;;AACD,SAAOD,KAAP;AACD,C,CAED;AACA;AACA;;;AACA,SAAS6C,aAAT,CAAuBxC,MAAvB,EAA+B8B,KAA/B,EAAsCnC,KAAtC,EAA6CC,QAA7C,EAAuDC,EAAvD,EAA2D;AACzDF,EAAAA,KAAK,GAAG8C,WAAW,CAACX,KAAD,EAAQnC,KAAR,EAAeC,QAAf,CAAnB;AACA,MAAIR,MAAM,CAAC+C,QAAP,CAAgBxC,KAAhB,CAAJ,EACEC,QAAQ,GAAG,QAAX;AACF,MAAI8C,GAAG,GAAGZ,KAAK,CAAC3B,UAAN,GAAmB,CAAnB,GAAuBR,KAAK,CAACgB,MAAvC;AAEAmB,EAAAA,KAAK,CAACnB,MAAN,IAAgB+B,GAAhB;AAEA,MAAIH,GAAG,GAAGT,KAAK,CAACnB,MAAN,GAAemB,KAAK,CAAC5B,aAA/B,CARyD,CASzD;;AACA,MAAI,CAACqC,GAAL,EACET,KAAK,CAAC1B,SAAN,GAAkB,IAAlB;AAEF,MAAI0B,KAAK,CAAClB,OAAV,EACEkB,KAAK,CAACX,MAAN,CAAawB,IAAb,CAAkB,IAAIjD,QAAJ,CAAaC,KAAb,EAAoBC,QAApB,EAA8BC,EAA9B,CAAlB,EADF,KAGE+C,OAAO,CAAC5C,MAAD,EAAS8B,KAAT,EAAgBY,GAAhB,EAAqB/C,KAArB,EAA4BC,QAA5B,EAAsCC,EAAtC,CAAP;AAEF,SAAO0C,GAAP;AACD;;AAED,SAASK,OAAT,CAAiB5C,MAAjB,EAAyB8B,KAAzB,EAAgCY,GAAhC,EAAqC/C,KAArC,EAA4CC,QAA5C,EAAsDC,EAAtD,EAA0D;AACxDiC,EAAAA,KAAK,CAACZ,QAAN,GAAiBwB,GAAjB;AACAZ,EAAAA,KAAK,CAACb,OAAN,GAAgBpB,EAAhB;AACAiC,EAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,EAAAA,KAAK,CAACjB,IAAN,GAAa,IAAb;;AACAb,EAAAA,MAAM,CAAC6C,MAAP,CAAclD,KAAd,EAAqBC,QAArB,EAA+BkC,KAAK,CAACf,OAArC;;AACAe,EAAAA,KAAK,CAACjB,IAAN,GAAa,KAAb;AACD;;AAED,SAASiC,YAAT,CAAsB9C,MAAtB,EAA8B8B,KAA9B,EAAqCjB,IAArC,EAA2CG,EAA3C,EAA+CnB,EAA/C,EAAmD;AACjD,MAAIgB,IAAJ,EACEkB,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BnC,IAAAA,EAAE,CAACmB,EAAD,CAAF;AACD,GAFD,EADF,KAKEnB,EAAE,CAACmB,EAAD,CAAF;AAEFhB,EAAAA,MAAM,CAACsB,cAAP,CAAsBF,YAAtB,GAAqC,IAArC;AACApB,EAAAA,MAAM,CAAC2B,IAAP,CAAY,OAAZ,EAAqBX,EAArB;AACD;;AAED,SAAS+B,kBAAT,CAA4BjB,KAA5B,EAAmC;AACjCA,EAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,EAAAA,KAAK,CAACb,OAAN,GAAgB,IAAhB;AACAa,EAAAA,KAAK,CAACnB,MAAN,IAAgBmB,KAAK,CAACZ,QAAtB;AACAY,EAAAA,KAAK,CAACZ,QAAN,GAAiB,CAAjB;AACD;;AAED,SAASH,OAAT,CAAiBf,MAAjB,EAAyBgB,EAAzB,EAA6B;AAC3B,MAAIc,KAAK,GAAG9B,MAAM,CAACsB,cAAnB;AACA,MAAIT,IAAI,GAAGiB,KAAK,CAACjB,IAAjB;AACA,MAAIhB,EAAE,GAAGiC,KAAK,CAACb,OAAf;AAEA8B,EAAAA,kBAAkB,CAACjB,KAAD,CAAlB;AAEA,MAAId,EAAJ,EACE8B,YAAY,CAAC9C,MAAD,EAAS8B,KAAT,EAAgBjB,IAAhB,EAAsBG,EAAtB,EAA0BnB,EAA1B,CAAZ,CADF,KAEK;AACH;AACA,QAAIU,QAAQ,GAAGyC,UAAU,CAAChD,MAAD,EAAS8B,KAAT,CAAzB;AAEA,QAAI,CAACvB,QAAD,IAAa,CAACuB,KAAK,CAAChB,gBAApB,IAAwCgB,KAAK,CAACX,MAAN,CAAaR,MAAzD,EACEsC,WAAW,CAACjD,MAAD,EAAS8B,KAAT,CAAX;;AAEF,QAAIjB,IAAJ,EAAU;AACRkB,MAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BkB,QAAAA,UAAU,CAAClD,MAAD,EAAS8B,KAAT,EAAgBvB,QAAhB,EAA0BV,EAA1B,CAAV;AACD,OAFD;AAGD,KAJD,MAIO;AACLqD,MAAAA,UAAU,CAAClD,MAAD,EAAS8B,KAAT,EAAgBvB,QAAhB,EAA0BV,EAA1B,CAAV;AACD;AACF;AACF;;AAED,SAASqD,UAAT,CAAoBlD,MAApB,EAA4B8B,KAA5B,EAAmCvB,QAAnC,EAA6CV,EAA7C,EAAiD;AAC/C,MAAI,CAACU,QAAL,EACE4C,YAAY,CAACnD,MAAD,EAAS8B,KAAT,CAAZ;AACFjC,EAAAA,EAAE;AACF,MAAIU,QAAJ,EACE6C,WAAW,CAACpD,MAAD,EAAS8B,KAAT,CAAX;AACH,C,CAED;AACA;AACA;;;AACA,SAASqB,YAAT,CAAsBnD,MAAtB,EAA8B8B,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACnB,MAAN,KAAiB,CAAjB,IAAsBmB,KAAK,CAAC1B,SAAhC,EAA2C;AACzC0B,IAAAA,KAAK,CAAC1B,SAAN,GAAkB,KAAlB;AACAJ,IAAAA,MAAM,CAAC2B,IAAP,CAAY,OAAZ;AACD;AACF,C,CAGD;;;AACA,SAASsB,WAAT,CAAqBjD,MAArB,EAA6B8B,KAA7B,EAAoC;AAClCA,EAAAA,KAAK,CAAChB,gBAAN,GAAyB,IAAzB;;AAEA,OAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,KAAK,CAACX,MAAN,CAAaR,MAAjC,EAAyC0C,CAAC,EAA1C,EAA8C;AAC5C,QAAIC,KAAK,GAAGxB,KAAK,CAACX,MAAN,CAAakC,CAAb,CAAZ;AACA,QAAI1D,KAAK,GAAG2D,KAAK,CAAC3D,KAAlB;AACA,QAAIC,QAAQ,GAAG0D,KAAK,CAAC1D,QAArB;AACA,QAAIC,EAAE,GAAGyD,KAAK,CAACxD,QAAf;AACA,QAAI4C,GAAG,GAAGZ,KAAK,CAAC3B,UAAN,GAAmB,CAAnB,GAAuBR,KAAK,CAACgB,MAAvC;AAEAiC,IAAAA,OAAO,CAAC5C,MAAD,EAAS8B,KAAT,EAAgBY,GAAhB,EAAqB/C,KAArB,EAA4BC,QAA5B,EAAsCC,EAAtC,CAAP,CAP4C,CAS5C;AACA;AACA;AACA;;AACA,QAAIiC,KAAK,CAAClB,OAAV,EAAmB;AACjByC,MAAAA,CAAC;AACD;AACD;AACF;;AAEDvB,EAAAA,KAAK,CAAChB,gBAAN,GAAyB,KAAzB;AACA,MAAIuC,CAAC,GAAGvB,KAAK,CAACX,MAAN,CAAaR,MAArB,EACEmB,KAAK,CAACX,MAAN,GAAeW,KAAK,CAACX,MAAN,CAAaoC,KAAb,CAAmBF,CAAnB,CAAf,CADF,KAGEvB,KAAK,CAACX,MAAN,CAAaR,MAAb,GAAsB,CAAtB;AACH;;AAEDxB,QAAQ,CAACsC,SAAT,CAAmBoB,MAAnB,GAA4B,UAASlD,KAAT,EAAgBC,QAAhB,EAA0BC,EAA1B,EAA8B;AACxDA,EAAAA,EAAE,CAAC,IAAI+B,KAAJ,CAAU,iBAAV,CAAD,CAAF;AACD,CAFD;;AAIAzC,QAAQ,CAACsC,SAAT,CAAmB+B,GAAnB,GAAyB,UAAS7D,KAAT,EAAgBC,QAAhB,EAA0BC,EAA1B,EAA8B;AACrD,MAAIiC,KAAK,GAAG,KAAKR,cAAjB;;AAEA,MAAI,OAAO3B,KAAP,KAAiB,UAArB,EAAiC;AAC/BE,IAAAA,EAAE,GAAGF,KAAL;AACAA,IAAAA,KAAK,GAAG,IAAR;AACAC,IAAAA,QAAQ,GAAG,IAAX;AACD,GAJD,MAIO,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AACzCC,IAAAA,EAAE,GAAGD,QAAL;AACAA,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,MAAI,OAAOD,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA9C,EACE,KAAK2C,KAAL,CAAW3C,KAAX,EAAkBC,QAAlB,EAbmD,CAerD;;AACA,MAAI,CAACkC,KAAK,CAACzB,MAAP,IAAiB,CAACyB,KAAK,CAACvB,QAA5B,EACEkD,WAAW,CAAC,IAAD,EAAO3B,KAAP,EAAcjC,EAAd,CAAX;AACH,CAlBD;;AAqBA,SAASmD,UAAT,CAAoBhD,MAApB,EAA4B8B,KAA5B,EAAmC;AACjC,SAAQA,KAAK,CAACzB,MAAN,IACAyB,KAAK,CAACnB,MAAN,KAAiB,CADjB,IAEA,CAACmB,KAAK,CAACvB,QAFP,IAGA,CAACuB,KAAK,CAAClB,OAHf;AAID;;AAED,SAASwC,WAAT,CAAqBpD,MAArB,EAA6B8B,KAA7B,EAAoC;AAClC,MAAI4B,IAAI,GAAGV,UAAU,CAAChD,MAAD,EAAS8B,KAAT,CAArB;;AACA,MAAI4B,IAAJ,EAAU;AACR5B,IAAAA,KAAK,CAACvB,QAAN,GAAiB,IAAjB;AACAP,IAAAA,MAAM,CAAC2B,IAAP,CAAY,QAAZ;AACD;;AACD,SAAO+B,IAAP;AACD;;AAED,SAASD,WAAT,CAAqBzD,MAArB,EAA6B8B,KAA7B,EAAoCjC,EAApC,EAAwC;AACtCiC,EAAAA,KAAK,CAACzB,MAAN,GAAe,IAAf;AACA+C,EAAAA,WAAW,CAACpD,MAAD,EAAS8B,KAAT,CAAX;;AACA,MAAIjC,EAAJ,EAAQ;AACN,QAAIiC,KAAK,CAACvB,QAAV,EACEwB,OAAO,CAACC,QAAR,CAAiBnC,EAAjB,EADF,KAGEG,MAAM,CAAC2D,IAAP,CAAY,QAAZ,EAAsB9D,EAAtB;AACH;;AACDiC,EAAAA,KAAK,CAACxB,KAAN,GAAc,IAAd;AACD","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function')\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb))\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n\n  return ret;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      cb(er);\n    });\n  else\n    cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished && !state.bufferProcessing && state.buffer.length)\n      clearBuffer(stream, state);\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  cb();\n  if (finished)\n    finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  for (var c = 0; c < state.buffer.length; c++) {\n    var entry = state.buffer[c];\n    var chunk = entry.chunk;\n    var encoding = entry.encoding;\n    var cb = entry.callback;\n    var len = state.objectMode ? 1 : chunk.length;\n\n    doWrite(stream, state, len, chunk, encoding, cb);\n\n    // if we didn't call the onwrite immediately, then\n    // it means that we need to wait until it does.\n    // also, that means that the chunk and cb are currently\n    // being processed, so move the buffer counter past them.\n    if (state.writing) {\n      c++;\n      break;\n    }\n  }\n\n  state.bufferProcessing = false;\n  if (c < state.buffer.length)\n    state.buffer = state.buffer.slice(c);\n  else\n    state.buffer.length = 0;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (typeof chunk !== 'undefined' && chunk !== null)\n    this.write(chunk, encoding);\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    state.finished = true;\n    stream.emit('finish');\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n"]},"metadata":{},"sourceType":"script"}