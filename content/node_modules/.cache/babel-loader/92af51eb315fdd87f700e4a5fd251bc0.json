{"ast":null,"code":"'use strict';\n\nconst processFn = (fn, options) => function (...args) {\n  const P = options.promiseModule;\n  return new P((resolve, reject) => {\n    if (options.multiArgs) {\n      args.push((...result) => {\n        if (options.errorFirst) {\n          if (result[0]) {\n            reject(result);\n          } else {\n            result.shift();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      });\n    } else if (options.errorFirst) {\n      args.push((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    } else {\n      args.push(resolve);\n    }\n\n    fn.apply(this, args);\n  });\n};\n\nmodule.exports = (input, options) => {\n  options = Object.assign({\n    exclude: [/.+(Sync|Stream)$/],\n    errorFirst: true,\n    promiseModule: Promise\n  }, options);\n  const objType = typeof input;\n\n  if (!(input !== null && (objType === 'object' || objType === 'function'))) {\n    throw new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? 'null' : objType}\\``);\n  }\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n    return options.include ? options.include.some(match) : !options.exclude.some(match);\n  };\n\n  let ret;\n\n  if (objType === 'function') {\n    ret = function (...args) {\n      return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n    };\n  } else {\n    ret = Object.create(Object.getPrototypeOf(input));\n  }\n\n  for (const key in input) {\n    // eslint-disable-line guard-for-in\n    const property = input[key];\n    ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/pify/index.js"],"names":["processFn","fn","options","args","P","promiseModule","resolve","reject","multiArgs","push","result","errorFirst","shift","error","apply","module","exports","input","Object","assign","exclude","Promise","objType","TypeError","filter","key","match","pattern","test","include","some","ret","excludeMain","create","getPrototypeOf","property"],"mappings":"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","sourcesContent":["'use strict';\n\nconst processFn = (fn, options) => function (...args) {\n\tconst P = options.promiseModule;\n\n\treturn new P((resolve, reject) => {\n\t\tif (options.multiArgs) {\n\t\t\targs.push((...result) => {\n\t\t\t\tif (options.errorFirst) {\n\t\t\t\t\tif (result[0]) {\n\t\t\t\t\t\treject(result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.shift();\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (options.errorFirst) {\n\t\t\targs.push((error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\targs.push(resolve);\n\t\t}\n\n\t\tfn.apply(this, args);\n\t});\n};\n\nmodule.exports = (input, options) => {\n\toptions = Object.assign({\n\t\texclude: [/.+(Sync|Stream)$/],\n\t\terrorFirst: true,\n\t\tpromiseModule: Promise\n\t}, options);\n\n\tconst objType = typeof input;\n\tif (!(input !== null && (objType === 'object' || objType === 'function'))) {\n\t\tthrow new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? 'null' : objType}\\``);\n\t}\n\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\t\treturn options.include ? options.include.some(match) : !options.exclude.some(match);\n\t};\n\n\tlet ret;\n\tif (objType === 'function') {\n\t\tret = function (...args) {\n\t\t\treturn options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n\t\t};\n\t} else {\n\t\tret = Object.create(Object.getPrototypeOf(input));\n\t}\n\n\tfor (const key in input) { // eslint-disable-line guard-for-in\n\t\tconst property = input[key];\n\t\tret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n\t}\n\n\treturn ret;\n};\n"]},"metadata":{},"sourceType":"script"}