{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"../common\");\n\nasync function deepHash(data) {\n  if (Array.isArray(data)) {\n    const tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer(\"list\"), common_1.default.utils.stringToBuffer(data.length.toString())]);\n    return await deepHashChunks(data, await common_1.default.crypto.hash(tag, \"SHA-384\"));\n  }\n\n  const tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer(\"blob\"), common_1.default.utils.stringToBuffer(data.byteLength.toString())]);\n  const taggedHash = common_1.default.utils.concatBuffers([await common_1.default.crypto.hash(tag, \"SHA-384\"), await common_1.default.crypto.hash(data, \"SHA-384\")]);\n  return await common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\n\nexports.default = deepHash;\n\nasync function deepHashChunks(chunks, acc) {\n  if (chunks.length < 1) {\n    return acc;\n  }\n\n  const hashPair = common_1.default.utils.concatBuffers([acc, await deepHash(chunks[0])]);\n  const newAcc = await common_1.default.crypto.hash(hashPair, \"SHA-384\");\n  return await deepHashChunks(chunks.slice(1), newAcc);\n}","map":{"version":3,"sources":["../../../../src/common/lib/deepHash.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAOe,eAAe,QAAf,CACb,IADa,EACM;AAEnB,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,UAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CACtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,MAA7B,CADsC,EAEtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,IAAI,CAAC,MAAL,CAAY,QAAZ,EAA7B,CAFsC,CAA5B,CAAZ;AAKA,WAAO,MAAM,cAAc,CACzB,IADyB,EAEzB,MAAM,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,GAApB,EAAyB,SAAzB,CAFmB,CAA3B;AAID;;AAED,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CACtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,MAA7B,CADsC,EAEtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,IAAI,CAAC,UAAL,CAAgB,QAAhB,EAA7B,CAFsC,CAA5B,CAAZ;AAKA,QAAM,UAAU,GAAG,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CAC7C,MAAM,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,GAApB,EAAyB,SAAzB,CADuC,EAE7C,MAAM,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,IAApB,EAA0B,SAA1B,CAFuC,CAA5B,CAAnB;AAKA,SAAO,MAAM,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,UAApB,EAAgC,SAAhC,CAAb;AACD;;AA1BD,OAAA,CAAA,OAAA,GAAA,QAAA;;AA4BA,eAAe,cAAf,CACE,MADF,EAEE,GAFF,EAEiB;AAEf,MAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAO,GAAP;AACD;;AAED,QAAM,QAAQ,GAAG,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CAC3C,GAD2C,EAE3C,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAP,CAF6B,CAA5B,CAAjB;AAIA,QAAM,MAAM,GAAG,MAAM,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,QAApB,EAA8B,SAA9B,CAArB;AACA,SAAO,MAAM,cAAc,CAAC,MAAM,CAAC,KAAP,CAAa,CAAb,CAAD,EAAkB,MAAlB,CAA3B;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"../common\");\nasync function deepHash(data) {\n    if (Array.isArray(data)) {\n        const tag = common_1.default.utils.concatBuffers([\n            common_1.default.utils.stringToBuffer(\"list\"),\n            common_1.default.utils.stringToBuffer(data.length.toString()),\n        ]);\n        return await deepHashChunks(data, await common_1.default.crypto.hash(tag, \"SHA-384\"));\n    }\n    const tag = common_1.default.utils.concatBuffers([\n        common_1.default.utils.stringToBuffer(\"blob\"),\n        common_1.default.utils.stringToBuffer(data.byteLength.toString()),\n    ]);\n    const taggedHash = common_1.default.utils.concatBuffers([\n        await common_1.default.crypto.hash(tag, \"SHA-384\"),\n        await common_1.default.crypto.hash(data, \"SHA-384\"),\n    ]);\n    return await common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\nexports.default = deepHash;\nasync function deepHashChunks(chunks, acc) {\n    if (chunks.length < 1) {\n        return acc;\n    }\n    const hashPair = common_1.default.utils.concatBuffers([\n        acc,\n        await deepHash(chunks[0]),\n    ]);\n    const newAcc = await common_1.default.crypto.hash(hashPair, \"SHA-384\");\n    return await deepHashChunks(chunks.slice(1), newAcc);\n}\n//# sourceMappingURL=deepHash.js.map"]},"metadata":{},"sourceType":"script"}