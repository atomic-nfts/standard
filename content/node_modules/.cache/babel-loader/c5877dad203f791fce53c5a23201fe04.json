{"ast":null,"code":"import _regeneratorRuntime from \"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport rsa from 'node-forge/lib/rsa';\nimport pify from 'pify';\nimport createPrng from '../utils/prng';\nimport disableWorker from '../utils/disable-worker';\nvar forgeGenerateKeyPair = pify(rsa.generateKeyPair);\nvar defaultParams = {\n  modulusLength: 2048,\n  publicExponent: 65537,\n  method: 'PRIMEINC'\n};\n\nvar parseForgePrivateKey = function parseForgePrivateKey(privateKey) {\n  var n = privateKey.n,\n      e = privateKey.e,\n      d = privateKey.d,\n      p = privateKey.p,\n      q = privateKey.q,\n      dP = privateKey.dP,\n      dQ = privateKey.dQ,\n      qInv = privateKey.qInv;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue(),\n    privateExponent: new Uint8Array(d.toByteArray()),\n    prime1: new Uint8Array(p.toByteArray()),\n    prime2: new Uint8Array(q.toByteArray()),\n    exponent1: new Uint8Array(dP.toByteArray()),\n    exponent2: new Uint8Array(dQ.toByteArray()),\n    coefficient: new Uint8Array(qInv.toByteArray())\n  };\n};\n\nvar parseForgePublicKey = function parseForgePublicKey(publicKey) {\n  var n = publicKey.n,\n      e = publicKey.e;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue()\n  };\n};\n\nvar generateKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params, seed) {\n    var modulusLength, publicExponent, method, restoreWorker, _yield$forgeGenerateK, privateKey, publicKey;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            modulusLength = params.modulusLength, publicExponent = params.publicExponent, method = params.method;\n            restoreWorker = disableWorker();\n            _context.next = 4;\n            return forgeGenerateKeyPair(modulusLength, publicExponent, {\n              prng: createPrng(seed),\n              algorithm: method\n            });\n\n          case 4:\n            _yield$forgeGenerateK = _context.sent;\n            privateKey = _yield$forgeGenerateK.privateKey;\n            publicKey = _yield$forgeGenerateK.publicKey;\n            restoreWorker();\n            return _context.abrupt(\"return\", {\n              privateKey: parseForgePrivateKey(privateKey),\n              publicKey: parseForgePublicKey(publicKey)\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function generateKeyPair(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { generateKeyPair, defaultParams };","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/human-crypto-keys/es/keys/rsa.js"],"names":["rsa","pify","createPrng","disableWorker","forgeGenerateKeyPair","generateKeyPair","defaultParams","modulusLength","publicExponent","method","parseForgePrivateKey","privateKey","n","e","d","p","q","dP","dQ","qInv","modulus","Uint8Array","toByteArray","intValue","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","parseForgePublicKey","publicKey","params","seed","restoreWorker","prng","algorithm"],"mappings":"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","sourcesContent":["import rsa from 'node-forge/lib/rsa';\nimport pify from 'pify';\nimport createPrng from '../utils/prng';\nimport disableWorker from '../utils/disable-worker';\nconst forgeGenerateKeyPair = pify(rsa.generateKeyPair);\nconst defaultParams = {\n  modulusLength: 2048,\n  publicExponent: 65537,\n  method: 'PRIMEINC'\n};\n\nconst parseForgePrivateKey = privateKey => {\n  const {\n    n,\n    e,\n    d,\n    p,\n    q,\n    dP,\n    dQ,\n    qInv\n  } = privateKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue(),\n    privateExponent: new Uint8Array(d.toByteArray()),\n    prime1: new Uint8Array(p.toByteArray()),\n    prime2: new Uint8Array(q.toByteArray()),\n    exponent1: new Uint8Array(dP.toByteArray()),\n    exponent2: new Uint8Array(dQ.toByteArray()),\n    coefficient: new Uint8Array(qInv.toByteArray())\n  };\n};\n\nconst parseForgePublicKey = publicKey => {\n  const {\n    n,\n    e\n  } = publicKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue()\n  };\n};\n\nconst generateKeyPair = async (params, seed) => {\n  const {\n    modulusLength,\n    publicExponent,\n    method\n  } = params;\n  const restoreWorker = disableWorker();\n  const {\n    privateKey,\n    publicKey\n  } = await forgeGenerateKeyPair(modulusLength, publicExponent, {\n    prng: createPrng(seed),\n    algorithm: method\n  });\n  restoreWorker();\n  return {\n    privateKey: parseForgePrivateKey(privateKey),\n    publicKey: parseForgePublicKey(publicKey)\n  };\n};\n\nexport { generateKeyPair, defaultParams };"]},"metadata":{},"sourceType":"module"}