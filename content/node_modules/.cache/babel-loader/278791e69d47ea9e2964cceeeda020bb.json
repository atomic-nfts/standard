{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactRead = exports.interactWriteDryRunCustom = exports.interactWriteDryRun = exports.simulateInteractWrite = exports.interactWrite = void 0;\n\nconst contract_load_1 = require(\"./contract-load\");\n\nconst contract_read_1 = require(\"./contract-read\");\n\nconst contract_step_1 = require(\"./contract-step\");\n\nconst utils_1 = require(\"./utils\");\n\nconst errors_1 = __importDefault(require(\"./errors\"));\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\n\nfunction interactWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n  return __awaiter(this, void 0, void 0, function* () {\n    const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n    const response = yield arweave.transactions.post(interactionTx);\n    if (response.status !== 200) return null;\n    return interactionTx.id;\n  });\n}\n\nexports.interactWrite = interactWrite;\n/**\n * Simulates an interaction on the blockchain and returns the simulated transaction.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction simulateInteractWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n  return __awaiter(this, void 0, void 0, function* () {\n    const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n    return interactionTx;\n  });\n}\n\nexports.simulateInteractWrite = simulateInteractWrite;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\n\nfunction interactWriteDryRun(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '', myState, fromParam, contractInfoParam) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // tslint:disable-next-line: prefer-const\n    let {\n      handler,\n      swGlobal,\n      contractSrc\n    } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n    const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n    const from = fromParam || (yield arweave.wallets.getAddress(wallet));\n    const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n    const evolve = latestState.evolve || settings.get('evolve');\n    let canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n    if (canEvolve === undefined || canEvolve === null) {\n      canEvolve = true;\n    }\n\n    if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n      if (contractSrc !== latestState.evolve) {\n        try {\n          const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n          handler = contractInfo.handler;\n        } catch (e) {\n          const error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n          /* CONTRACT_NOT_FOUND */\n          , {\n            message: `Contract having txId: ${contractId} not found`,\n            requestedTxId: contractId\n          });\n          throw error;\n        }\n      }\n    }\n\n    const interaction = {\n      input,\n      caller: from\n    };\n    const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n    const ts = utils_1.unpackTags(tx);\n    const currentBlock = yield arweave.blocks.getCurrent();\n    swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n    return yield contract_step_1.execute(handler, interaction, latestState);\n  });\n}\n\nexports.interactWriteDryRun = interactWriteDryRun;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param tx            a signed transaction\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\n\nfunction interactWriteDryRunCustom(arweave, tx, contractId, input, myState, fromParam = {}, contractInfoParam) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // tslint:disable-next-line: prefer-const\n    let {\n      handler,\n      swGlobal,\n      contractSrc\n    } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n    const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n    const from = fromParam;\n    const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n    const evolve = latestState.evolve || settings.get('evolve');\n    let canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n    if (canEvolve === undefined || canEvolve === null) {\n      canEvolve = true;\n    }\n\n    if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n      if (contractSrc !== latestState.evolve) {\n        try {\n          const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n          handler = contractInfo.handler;\n        } catch (e) {\n          const error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n          /* CONTRACT_NOT_FOUND */\n          , {\n            message: `Contract having txId: ${contractId} not found`,\n            requestedTxId: contractId\n          });\n          throw error;\n        }\n      }\n    }\n\n    const interaction = {\n      input,\n      caller: from\n    };\n    const ts = utils_1.unpackTags(tx);\n    const currentBlock = yield arweave.blocks.getCurrent();\n    swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n    return yield contract_step_1.execute(handler, interaction, latestState);\n  });\n}\n\nexports.interactWriteDryRunCustom = interactWriteDryRunCustom;\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction interactRead(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n  return __awaiter(this, void 0, void 0, function* () {\n    // tslint:disable-next-line: prefer-const\n    let {\n      handler,\n      swGlobal,\n      contractSrc\n    } = yield contract_load_1.loadContract(arweave, contractId);\n    const latestState = yield contract_read_1.readContract(arweave, contractId);\n    const from = wallet ? yield arweave.wallets.getAddress(wallet) : '';\n    const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n    const evolve = latestState.evolve || settings.get('evolve');\n    let canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n    if (canEvolve === undefined || canEvolve === null) {\n      canEvolve = true;\n    }\n\n    if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n      if (contractSrc !== latestState.evolve) {\n        try {\n          const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n          handler = contractInfo.handler;\n        } catch (e) {\n          const error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n          /* CONTRACT_NOT_FOUND */\n          , {\n            message: `Contract having txId: ${contractId} not found`,\n            requestedTxId: contractId\n          });\n          throw error;\n        }\n      }\n    }\n\n    const interaction = {\n      input,\n      caller: from\n    };\n    const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n    const ts = utils_1.unpackTags(tx);\n    const currentBlock = yield arweave.blocks.getCurrent();\n    swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n    const result = yield contract_step_1.execute(handler, interaction, latestState);\n    return result.result;\n  });\n}\n\nexports.interactRead = interactRead;\n\nfunction createTx(arweave, wallet, contractId, input, tags, target = '', winstonQty = '0') {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = {\n      data: Math.random().toString().slice(-4)\n    };\n\n    if (target && target.length) {\n      options.target = target.toString();\n\n      if (winstonQty && +winstonQty > 0) {\n        options.quantity = winstonQty.toString();\n      }\n    }\n\n    const interactionTx = yield arweave.createTransaction(options, wallet);\n\n    if (!input) {\n      throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n    }\n\n    if (tags && tags.length) {\n      for (const tag of tags) {\n        interactionTx.addTag(tag.name.toString(), tag.value.toString());\n      }\n    }\n\n    interactionTx.addTag('App-Name', 'SmartWeaveAction');\n    interactionTx.addTag('App-Version', '0.3.0');\n    interactionTx.addTag('Contract', contractId);\n    interactionTx.addTag('Input', JSON.stringify(input));\n    yield arweave.transactions.sign(interactionTx, wallet);\n    return interactionTx;\n  });\n}\n\nfunction createDummyTx(tx, from, tags, block) {\n  return {\n    id: tx.id,\n    owner: {\n      address: from\n    },\n    recipient: tx.target,\n    tags,\n    fee: {\n      winston: tx.reward\n    },\n    quantity: {\n      winston: tx.quantity\n    },\n    block: {\n      id: block.indep_hash,\n      height: block.height,\n      timestamp: block.timestamp\n    }\n  };\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/smartweave/lib/contract-interact.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","interactRead","interactWriteDryRunCustom","interactWriteDryRun","simulateInteractWrite","interactWrite","contract_load_1","require","contract_read_1","contract_step_1","utils_1","errors_1","arweave","wallet","contractId","input","tags","target","winstonQty","interactionTx","createTx","response","transactions","post","status","id","myState","fromParam","contractInfoParam","handler","swGlobal","contractSrc","loadContract","latestState","readContract","from","wallets","getAddress","settings","Map","evolve","get","canEvolve","undefined","test","contractInfo","error","default","message","requestedTxId","interaction","caller","tx","ts","unpackTags","currentBlock","blocks","getCurrent","_activeTx","createDummyTx","execute","options","data","Math","random","toString","slice","length","quantity","createTransaction","Error","JSON","stringify","tag","addTag","name","sign","block","owner","address","recipient","fee","winston","reward","indep_hash","height","timestamp"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.interactRead = exports.interactWriteDryRunCustom = exports.interactWriteDryRun = exports.simulateInteractWrite = exports.interactWrite = void 0;\nconst contract_load_1 = require(\"./contract-load\");\nconst contract_read_1 = require(\"./contract-read\");\nconst contract_step_1 = require(\"./contract-step\");\nconst utils_1 = require(\"./utils\");\nconst errors_1 = __importDefault(require(\"./errors\"));\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction interactWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const response = yield arweave.transactions.post(interactionTx);\n        if (response.status !== 200)\n            return null;\n        return interactionTx.id;\n    });\n}\nexports.interactWrite = interactWrite;\n/**\n * Simulates an interaction on the blockchain and returns the simulated transaction.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction simulateInteractWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        return interactionTx;\n    });\n}\nexports.simulateInteractWrite = simulateInteractWrite;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\nfunction interactWriteDryRun(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '', myState, fromParam, contractInfoParam) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n        const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n        const from = fromParam || (yield arweave.wallets.getAddress(wallet));\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        return yield contract_step_1.execute(handler, interaction, latestState);\n    });\n}\nexports.interactWriteDryRun = interactWriteDryRun;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param tx            a signed transaction\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\nfunction interactWriteDryRunCustom(arweave, tx, contractId, input, myState, fromParam = {}, contractInfoParam) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n        const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n        const from = fromParam;\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        return yield contract_step_1.execute(handler, interaction, latestState);\n    });\n}\nexports.interactWriteDryRunCustom = interactWriteDryRunCustom;\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction interactRead(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = yield contract_load_1.loadContract(arweave, contractId);\n        const latestState = yield contract_read_1.readContract(arweave, contractId);\n        const from = wallet ? yield arweave.wallets.getAddress(wallet) : '';\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        const result = yield contract_step_1.execute(handler, interaction, latestState);\n        return result.result;\n    });\n}\nexports.interactRead = interactRead;\nfunction createTx(arweave, wallet, contractId, input, tags, target = '', winstonQty = '0') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const options = {\n            data: Math.random().toString().slice(-4),\n        };\n        if (target && target.length) {\n            options.target = target.toString();\n            if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n            }\n        }\n        const interactionTx = yield arweave.createTransaction(options, wallet);\n        if (!input) {\n            throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                interactionTx.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        interactionTx.addTag('App-Name', 'SmartWeaveAction');\n        interactionTx.addTag('App-Version', '0.3.0');\n        interactionTx.addTag('Contract', contractId);\n        interactionTx.addTag('Input', JSON.stringify(input));\n        yield arweave.transactions.sign(interactionTx, wallet);\n        return interactionTx;\n    });\n}\nfunction createDummyTx(tx, from, tags, block) {\n    return {\n        id: tx.id,\n        owner: {\n            address: from,\n        },\n        recipient: tx.target,\n        tags,\n        fee: {\n            winston: tx.reward,\n        },\n        quantity: {\n            winston: tx.quantity,\n        },\n        block: {\n            id: block.indep_hash,\n            height: block.height,\n            timestamp: block.timestamp,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}