{"ast":null,"code":"import { decomposeRsaPublicKey, composeRsaPublicKey } from '../raw/keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EcParameters } from '../../util/asn1-entities';\nimport { decodeEcPoint, encodeEcPoint } from '../../util/ec';\nimport { hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError } from '../../util/errors';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nimport { KEY_TYPES } from '../../util/key-types';\n\nvar decomposeRsaSubjectPublicKeyInfo = function decomposeRsaSubjectPublicKeyInfo(subjectPublicKeyInfo) {\n  var algorithm = subjectPublicKeyInfo.algorithm,\n      publicKeyAsn1 = subjectPublicKeyInfo.publicKey;\n  var keyAlgorithm = {\n    id: OIDS[algorithm.id]\n  };\n\n  switch (keyAlgorithm.id) {\n    case 'rsa-encryption':\n    case 'md2-with-rsa-encryption':\n    case 'md4-with-rsa-encryption':\n    case 'md5-with-rsa-encryption':\n    case 'sha1-with-rsa-encryption':\n    case 'sha224-with-rsa-encryption':\n    case 'sha256-with-rsa-encryption':\n    case 'sha384-with-rsa-encryption':\n    case 'sha512-with-rsa-encryption':\n    case 'sha512-224-with-rsa-encryption':\n    case 'sha512-256-with-rsa-encryption':\n      break;\n\n    /* istanbul ignore next */\n\n    case 'rsaes-oaep':\n      throw new UnsupportedAlgorithmError('RSA-OAEP keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    case 'rsassa-pss':\n      throw new UnsupportedAlgorithmError('RSA-PSS keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm OID '\".concat(algorithm.id, \"'\"));\n  }\n\n  var _decomposeRsaPublicKe = decomposeRsaPublicKey(publicKeyAsn1.data),\n      keyData = _decomposeRsaPublicKe.keyData;\n\n  return {\n    keyAlgorithm: {\n      id: OIDS[algorithm.id]\n    },\n    keyData: keyData\n  };\n};\n\nvar composeRsaSubjectPublicKeyInfo = function composeRsaSubjectPublicKeyInfo(keyAlgorithm, keyData) {\n  var rsaPublicKeyAsn1 = composeRsaPublicKey(keyAlgorithm, keyData);\n  return {\n    algorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: hexStringToUint8Array('0500')\n    },\n    publicKey: {\n      unused: 0,\n      data: rsaPublicKeyAsn1\n    }\n  };\n};\n\nvar decomposeEcSubjectPublicKeyInfo = function decomposeEcSubjectPublicKeyInfo(subjectPublicKeyInfo) {\n  var algorithm = subjectPublicKeyInfo.algorithm,\n      publicKey = subjectPublicKeyInfo.publicKey;\n  var ecParameters = decodeAsn1(algorithm.parameters, EcParameters); // Validate parameters\n\n  /* istanbul ignore if */\n\n  if (ecParameters.type !== 'namedCurve') {\n    throw new UnsupportedAlgorithmError('Only EC named curves are supported');\n  } // Ensure that the named curve is supported\n\n\n  var namedCurve = OIDS[ecParameters.value];\n\n  if (!namedCurve) {\n    throw new UnsupportedAlgorithmError(\"Unsupported named curve OID '\".concat(ecParameters.value, \"'\"));\n  } // Validate & get encoded point (public key)\n\n\n  var _decodeEcPoint = decodeEcPoint(namedCurve, publicKey.data),\n      x = _decodeEcPoint.x,\n      y = _decodeEcPoint.y;\n\n  return {\n    keyAlgorithm: {\n      id: 'ec-public-key',\n      namedCurve: namedCurve\n    },\n    keyData: {\n      x: x,\n      y: y\n    }\n  };\n};\n\nvar composeEcSubjectPublicKeyInfo = function composeEcSubjectPublicKeyInfo(keyAlgorithm, keyData) {\n  // Validate named curve\n  var namedCurveOid = FLIPPED_OIDS[keyAlgorithm.namedCurve];\n\n  if (!namedCurveOid) {\n    throw new UnsupportedAlgorithmError(\"Unsupported named curve '\".concat(keyAlgorithm.namedCurve, \"'\"));\n  } // Encode point (public key)\n\n\n  var encodedPoint = encodeEcPoint(keyAlgorithm.namedCurve, keyData.x, keyData.y);\n  var ecParametersAsn1 = encodeAsn1({\n    type: 'namedCurve',\n    value: namedCurveOid\n  }, EcParameters);\n  return {\n    algorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: ecParametersAsn1\n    },\n    publicKey: {\n      unused: 0,\n      data: encodedPoint\n    }\n  };\n};\n\nvar decomposeEd25519SubjectPublicKeyInfo = function decomposeEd25519SubjectPublicKeyInfo(subjectPublicKeyInfo) {\n  var algorithm = subjectPublicKeyInfo.algorithm,\n      publicKey = subjectPublicKeyInfo.publicKey;\n  return {\n    keyAlgorithm: {\n      id: OIDS[algorithm.id]\n    },\n    keyData: {\n      bytes: publicKey.data\n    }\n  };\n};\n\nvar composeEd25519SubjectPublicKeyInfo = function composeEd25519SubjectPublicKeyInfo(keyAlgorithm, keyData) {\n  return {\n    algorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id]\n    },\n    publicKey: {\n      unused: 0,\n      data: keyData.bytes\n    }\n  };\n};\n\nexport var decomposeSubjectPublicKeyInfo = function decomposeSubjectPublicKeyInfo(subjectPublicKeyInfo) {\n  var keyType = KEY_TYPES[OIDS[subjectPublicKeyInfo.algorithm.id]];\n\n  switch (keyType) {\n    case 'rsa':\n      return decomposeRsaSubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    case 'ec':\n      return decomposeEcSubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    case 'ed25519':\n      return decomposeEd25519SubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm OID '\".concat(subjectPublicKeyInfo.algorithm.id, \"'\"));\n  }\n};\nexport var composeSubjectPublicKeyInfo = function composeSubjectPublicKeyInfo(keyAlgorithm, keyData) {\n  var keyType = KEY_TYPES[keyAlgorithm.id];\n\n  switch (keyType) {\n    case 'rsa':\n      return composeRsaSubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    case 'ec':\n      return composeEcSubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    case 'ed25519':\n      return composeEd25519SubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm id '\".concat(keyAlgorithm.id, \"'\"));\n  }\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/spki/keys.js"],"names":["decomposeRsaPublicKey","composeRsaPublicKey","decodeAsn1","encodeAsn1","EcParameters","decodeEcPoint","encodeEcPoint","hexStringToUint8Array","UnsupportedAlgorithmError","OIDS","FLIPPED_OIDS","KEY_TYPES","decomposeRsaSubjectPublicKeyInfo","subjectPublicKeyInfo","algorithm","publicKeyAsn1","publicKey","keyAlgorithm","id","data","keyData","composeRsaSubjectPublicKeyInfo","rsaPublicKeyAsn1","parameters","unused","decomposeEcSubjectPublicKeyInfo","ecParameters","type","namedCurve","value","x","y","composeEcSubjectPublicKeyInfo","namedCurveOid","encodedPoint","ecParametersAsn1","decomposeEd25519SubjectPublicKeyInfo","bytes","composeEd25519SubjectPublicKeyInfo","decomposeSubjectPublicKeyInfo","keyType","composeSubjectPublicKeyInfo"],"mappings":"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","sourcesContent":["import { decomposeRsaPublicKey, composeRsaPublicKey } from '../raw/keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EcParameters } from '../../util/asn1-entities';\nimport { decodeEcPoint, encodeEcPoint } from '../../util/ec';\nimport { hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError } from '../../util/errors';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nimport { KEY_TYPES } from '../../util/key-types';\n\nconst decomposeRsaSubjectPublicKeyInfo = subjectPublicKeyInfo => {\n  const {\n    algorithm,\n    publicKey: publicKeyAsn1\n  } = subjectPublicKeyInfo;\n  const keyAlgorithm = {\n    id: OIDS[algorithm.id]\n  };\n\n  switch (keyAlgorithm.id) {\n    case 'rsa-encryption':\n    case 'md2-with-rsa-encryption':\n    case 'md4-with-rsa-encryption':\n    case 'md5-with-rsa-encryption':\n    case 'sha1-with-rsa-encryption':\n    case 'sha224-with-rsa-encryption':\n    case 'sha256-with-rsa-encryption':\n    case 'sha384-with-rsa-encryption':\n    case 'sha512-with-rsa-encryption':\n    case 'sha512-224-with-rsa-encryption':\n    case 'sha512-256-with-rsa-encryption':\n      break;\n\n    /* istanbul ignore next */\n\n    case 'rsaes-oaep':\n      throw new UnsupportedAlgorithmError('RSA-OAEP keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    case 'rsassa-pss':\n      throw new UnsupportedAlgorithmError('RSA-PSS keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm OID '${algorithm.id}'`);\n  }\n\n  const {\n    keyData\n  } = decomposeRsaPublicKey(publicKeyAsn1.data);\n  return {\n    keyAlgorithm: {\n      id: OIDS[algorithm.id]\n    },\n    keyData\n  };\n};\n\nconst composeRsaSubjectPublicKeyInfo = (keyAlgorithm, keyData) => {\n  const rsaPublicKeyAsn1 = composeRsaPublicKey(keyAlgorithm, keyData);\n  return {\n    algorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: hexStringToUint8Array('0500')\n    },\n    publicKey: {\n      unused: 0,\n      data: rsaPublicKeyAsn1\n    }\n  };\n};\n\nconst decomposeEcSubjectPublicKeyInfo = subjectPublicKeyInfo => {\n  const {\n    algorithm,\n    publicKey\n  } = subjectPublicKeyInfo;\n  const ecParameters = decodeAsn1(algorithm.parameters, EcParameters); // Validate parameters\n\n  /* istanbul ignore if */\n\n  if (ecParameters.type !== 'namedCurve') {\n    throw new UnsupportedAlgorithmError('Only EC named curves are supported');\n  } // Ensure that the named curve is supported\n\n\n  const namedCurve = OIDS[ecParameters.value];\n\n  if (!namedCurve) {\n    throw new UnsupportedAlgorithmError(`Unsupported named curve OID '${ecParameters.value}'`);\n  } // Validate & get encoded point (public key)\n\n\n  const {\n    x,\n    y\n  } = decodeEcPoint(namedCurve, publicKey.data);\n  return {\n    keyAlgorithm: {\n      id: 'ec-public-key',\n      namedCurve\n    },\n    keyData: {\n      x,\n      y\n    }\n  };\n};\n\nconst composeEcSubjectPublicKeyInfo = (keyAlgorithm, keyData) => {\n  // Validate named curve\n  const namedCurveOid = FLIPPED_OIDS[keyAlgorithm.namedCurve];\n\n  if (!namedCurveOid) {\n    throw new UnsupportedAlgorithmError(`Unsupported named curve '${keyAlgorithm.namedCurve}'`);\n  } // Encode point (public key)\n\n\n  const encodedPoint = encodeEcPoint(keyAlgorithm.namedCurve, keyData.x, keyData.y);\n  const ecParametersAsn1 = encodeAsn1({\n    type: 'namedCurve',\n    value: namedCurveOid\n  }, EcParameters);\n  return {\n    algorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: ecParametersAsn1\n    },\n    publicKey: {\n      unused: 0,\n      data: encodedPoint\n    }\n  };\n};\n\nconst decomposeEd25519SubjectPublicKeyInfo = subjectPublicKeyInfo => {\n  const {\n    algorithm,\n    publicKey\n  } = subjectPublicKeyInfo;\n  return {\n    keyAlgorithm: {\n      id: OIDS[algorithm.id]\n    },\n    keyData: {\n      bytes: publicKey.data\n    }\n  };\n};\n\nconst composeEd25519SubjectPublicKeyInfo = (keyAlgorithm, keyData) => ({\n  algorithm: {\n    id: FLIPPED_OIDS[keyAlgorithm.id]\n  },\n  publicKey: {\n    unused: 0,\n    data: keyData.bytes\n  }\n});\n\nexport const decomposeSubjectPublicKeyInfo = subjectPublicKeyInfo => {\n  const keyType = KEY_TYPES[OIDS[subjectPublicKeyInfo.algorithm.id]];\n\n  switch (keyType) {\n    case 'rsa':\n      return decomposeRsaSubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    case 'ec':\n      return decomposeEcSubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    case 'ed25519':\n      return decomposeEd25519SubjectPublicKeyInfo(subjectPublicKeyInfo);\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm OID '${subjectPublicKeyInfo.algorithm.id}'`);\n  }\n};\nexport const composeSubjectPublicKeyInfo = (keyAlgorithm, keyData) => {\n  const keyType = KEY_TYPES[keyAlgorithm.id];\n\n  switch (keyType) {\n    case 'rsa':\n      return composeRsaSubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    case 'ec':\n      return composeEcSubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    case 'ed25519':\n      return composeEd25519SubjectPublicKeyInfo(keyAlgorithm, keyData);\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm id '${keyAlgorithm.id}'`);\n  }\n};"]},"metadata":{},"sourceType":"module"}