{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\nmodule.exports = Writable;\n/*<replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {}; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // cast to ints.\n\n  this.highWaterMark = ~~this.highWaterMark;\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.buffer = []; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex'); // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n\n\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n  this._writableState = new WritableState(options, this); // legacy.\n\n  this.writable = true;\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb\n\n  stream.emit('error', er);\n  process.nextTick(function () {\n    cb(er);\n  });\n} // If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function () {\n      cb(er);\n    });\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (!util.isFunction(cb)) cb = function cb() {};\n  if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.buffer.length) clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n\n  return chunk;\n} // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\n\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, false, len, chunk, encoding, cb);\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync) process.nextTick(function () {\n    state.pendingcb--;\n    cb(er);\n  });else {\n    state.pendingcb--;\n    cb(er);\n  }\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function () {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n\n    for (var c = 0; c < state.buffer.length; c++) {\n      cbs.push(state.buffer[c].callback);\n    } // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n\n\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function (err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    }); // Clear buffer\n\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb); // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk)) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(stream, state) {\n  return state.ending && state.length === 0 && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else prefinish(stream, state);\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/gif-encoder/node_modules/readable-stream/lib/_stream_writable.js"],"names":["module","exports","Writable","Buffer","require","WritableState","util","inherits","Stream","WriteReq","chunk","encoding","cb","callback","options","stream","Duplex","hwm","highWaterMark","defaultHwm","objectMode","writableObjectMode","needDrain","ending","ended","finished","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","buffer","pendingcb","prefinished","errorEmitted","_writableState","writable","call","prototype","pipe","emit","Error","writeAfterEnd","state","process","nextTick","validChunk","valid","isBuffer","isString","isNullOrUndefined","TypeError","write","ret","isFunction","writeOrBuffer","cork","uncork","clearBuffer","decodeChunk","len","push","doWrite","writev","_writev","_write","onwriteError","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","finishMaybe","cbs","c","err","i","entry","slice","end","endWritable","prefinish","need","once"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n"]},"metadata":{},"sourceType":"script"}