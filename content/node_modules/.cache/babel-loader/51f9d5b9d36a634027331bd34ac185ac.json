{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar common_1 = __importDefault(require(\"../common\"));\n\nfunction deepHash(_x) {\n  return _deepHash.apply(this, arguments);\n}\n\nfunction _deepHash() {\n  _deepHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var _tag, tag, taggedHash;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(data)) {\n              _context.next = 10;\n              break;\n            }\n\n            _tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer(\"list\"), common_1.default.utils.stringToBuffer(data.length.toString())]);\n            _context.t0 = deepHashChunks;\n            _context.t1 = data;\n            _context.next = 6;\n            return common_1.default.crypto.hash(_tag, \"SHA-384\");\n\n          case 6:\n            _context.t2 = _context.sent;\n            _context.next = 9;\n            return (0, _context.t0)(_context.t1, _context.t2);\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n            tag = common_1.default.utils.concatBuffers([common_1.default.utils.stringToBuffer(\"blob\"), common_1.default.utils.stringToBuffer(data.byteLength.toString())]);\n            _context.t3 = common_1.default.utils;\n            _context.next = 14;\n            return common_1.default.crypto.hash(tag, \"SHA-384\");\n\n          case 14:\n            _context.t4 = _context.sent;\n            _context.next = 17;\n            return common_1.default.crypto.hash(data, \"SHA-384\");\n\n          case 17:\n            _context.t5 = _context.sent;\n            _context.t6 = [_context.t4, _context.t5];\n            taggedHash = _context.t3.concatBuffers.call(_context.t3, _context.t6);\n            _context.next = 22;\n            return common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n\n          case 22:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _deepHash.apply(this, arguments);\n}\n\nexports.default = deepHash;\n\nfunction deepHashChunks(_x2, _x3) {\n  return _deepHashChunks.apply(this, arguments);\n}\n\nfunction _deepHashChunks() {\n  _deepHashChunks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chunks, acc) {\n    var hashPair, newAcc;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(chunks.length < 1)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", acc);\n\n          case 2:\n            _context2.t0 = common_1.default.utils;\n            _context2.t1 = acc;\n            _context2.next = 6;\n            return deepHash(chunks[0]);\n\n          case 6:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = [_context2.t1, _context2.t2];\n            hashPair = _context2.t0.concatBuffers.call(_context2.t0, _context2.t3);\n            _context2.next = 11;\n            return common_1.default.crypto.hash(hashPair, \"SHA-384\");\n\n          case 11:\n            newAcc = _context2.sent;\n            _context2.next = 14;\n            return deepHashChunks(chunks.slice(1), newAcc);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _deepHashChunks.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/common/lib/deepHash.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;SAO8B,Q;;;;;uEAAf,iBACb,IADa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGT,KAAK,CAAC,OAAN,CAAc,IAAd,CAHS;AAAA;AAAA;AAAA;;AAIL,YAAA,IAJK,GAIC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CACtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,MAA7B,CADsC,EAEtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,IAAI,CAAC,MAAL,CAAY,QAAZ,EAA7B,CAFsC,CAA5B,CAJD;AAAA,0BASE,cATF;AAAA,0BAUT,IAVS;AAAA;AAAA,mBAWH,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,IAApB,EAAyB,SAAzB,CAXG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAeP,YAAA,GAfO,GAeD,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,aAAd,CAA4B,CACtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,MAA7B,CADsC,EAEtC,QAAA,CAAA,OAAA,CAAQ,KAAR,CAAc,cAAd,CAA6B,IAAI,CAAC,UAAL,CAAgB,QAAhB,EAA7B,CAFsC,CAA5B,CAfC;AAAA,0BAoBM,QAAA,CAAA,OAAA,CAAQ,KApBd;AAAA;AAAA,mBAqBL,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,GAApB,EAAyB,SAAzB,CArBK;;AAAA;AAAA;AAAA;AAAA,mBAsBL,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,IAApB,EAA0B,SAA1B,CAtBK;;AAAA;AAAA;AAAA;AAoBP,YAAA,UApBO,eAoBoB,aApBpB;AAAA;AAAA,mBAyBA,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,UAApB,EAAgC,SAAhC,CAzBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAf,OAAA,CAAA,OAAA,GAAA,QAAA;;SA4Be,c;;;;;6EAAf,kBACE,MADF,EAEE,GAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIM,MAAM,CAAC,MAAP,GAAgB,CAJtB;AAAA;AAAA;AAAA;;AAAA,8CAKW,GALX;;AAAA;AAAA,2BAQmB,QAAA,CAAA,OAAA,CAAQ,KAR3B;AAAA,2BASI,GATJ;AAAA;AAAA,mBAUU,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAP,CAVlB;;AAAA;AAAA;AAAA;AAQQ,YAAA,QARR,gBAQiC,aARjC;AAAA;AAAA,mBAYuB,QAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,CAAoB,QAApB,EAA8B,SAA9B,CAZvB;;AAAA;AAYQ,YAAA,MAZR;AAAA;AAAA,mBAae,cAAc,CAAC,MAAM,CAAC,KAAP,CAAa,CAAb,CAAD,EAAkB,MAAlB,CAb7B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = __importDefault(require(\"../common\"));\nasync function deepHash(data) {\n    if (Array.isArray(data)) {\n        const tag = common_1.default.utils.concatBuffers([\n            common_1.default.utils.stringToBuffer(\"list\"),\n            common_1.default.utils.stringToBuffer(data.length.toString()),\n        ]);\n        return await deepHashChunks(data, await common_1.default.crypto.hash(tag, \"SHA-384\"));\n    }\n    const tag = common_1.default.utils.concatBuffers([\n        common_1.default.utils.stringToBuffer(\"blob\"),\n        common_1.default.utils.stringToBuffer(data.byteLength.toString()),\n    ]);\n    const taggedHash = common_1.default.utils.concatBuffers([\n        await common_1.default.crypto.hash(tag, \"SHA-384\"),\n        await common_1.default.crypto.hash(data, \"SHA-384\"),\n    ]);\n    return await common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\nexports.default = deepHash;\nasync function deepHashChunks(chunks, acc) {\n    if (chunks.length < 1) {\n        return acc;\n    }\n    const hashPair = common_1.default.utils.concatBuffers([\n        acc,\n        await deepHash(chunks[0]),\n    ]);\n    const newAcc = await common_1.default.crypto.hash(hashPair, \"SHA-384\");\n    return await deepHashChunks(chunks.slice(1), newAcc);\n}\n//# sourceMappingURL=deepHash.js.map"]},"metadata":{},"sourceType":"script"}