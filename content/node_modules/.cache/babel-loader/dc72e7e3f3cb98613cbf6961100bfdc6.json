{"ast":null,"code":"import { decomposeRsaPrivateKey, composeRsaPrivateKey } from '../raw/keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EcParameters, EcPrivateKey, CurvePrivateKey } from '../../util/asn1-entities';\nimport { decodeEcPoint, encodeEcPoint, validateEcD } from '../../util/ec';\nimport { hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError } from '../../util/errors';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nimport { KEY_TYPES } from '../../util/key-types';\n\nvar decomposeRsaPrivateKeyInfo = function decomposeRsaPrivateKeyInfo(privateKeyInfo) {\n  var privateKeyAlgorithm = privateKeyInfo.privateKeyAlgorithm,\n      privateKeyAsn1 = privateKeyInfo.privateKey;\n  var keyAlgorithm = {\n    id: OIDS[privateKeyAlgorithm.id]\n  };\n\n  switch (keyAlgorithm.id) {\n    case 'rsa-encryption':\n    case 'md2-with-rsa-encryption':\n    case 'md4-with-rsa-encryption':\n    case 'md5-with-rsa-encryption':\n    case 'sha1-with-rsa-encryption':\n    case 'sha224-with-rsa-encryption':\n    case 'sha256-with-rsa-encryption':\n    case 'sha384-with-rsa-encryption':\n    case 'sha512-with-rsa-encryption':\n    case 'sha512-224-with-rsa-encryption':\n    case 'sha512-256-with-rsa-encryption':\n      break;\n\n    /* istanbul ignore next */\n\n    case 'rsaes-oaep':\n      throw new UnsupportedAlgorithmError('RSA-OAEP keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    case 'rsassa-pss':\n      throw new UnsupportedAlgorithmError('RSA-PSS keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm OID '\".concat(privateKeyAlgorithm.id, \"'\"));\n  }\n\n  var _decomposeRsaPrivateK = decomposeRsaPrivateKey(privateKeyAsn1),\n      keyData = _decomposeRsaPrivateK.keyData;\n\n  return {\n    keyAlgorithm: {\n      id: OIDS[privateKeyAlgorithm.id]\n    },\n    keyData: keyData\n  };\n};\n\nvar composeRsaPrivateKeyInfo = function composeRsaPrivateKeyInfo(keyAlgorithm, keyData) {\n  var rsaPrivateKeyAsn1 = composeRsaPrivateKey(keyAlgorithm, keyData);\n  return {\n    version: 0,\n    privateKeyAlgorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: hexStringToUint8Array('0500')\n    },\n    privateKey: rsaPrivateKeyAsn1\n  };\n};\n\nvar decomposeEcPrivateKeyInfo = function decomposeEcPrivateKeyInfo(privateKeyInfo) {\n  var privateKeyAlgorithm = privateKeyInfo.privateKeyAlgorithm,\n      privateKeyAsn1 = privateKeyInfo.privateKey;\n  var ecParameters = decodeAsn1(privateKeyAlgorithm.parameters, EcParameters);\n  var ecPrivateKey = decodeAsn1(privateKeyAsn1, EcPrivateKey); // Validate parameters & publicKey\n\n  /* istanbul ignore if */\n\n  if (ecParameters.type !== 'namedCurve') {\n    throw new UnsupportedAlgorithmError('Only EC named curves are supported');\n  }\n  /* istanbul ignore if */\n\n\n  if (!ecPrivateKey.publicKey) {\n    throw new UnsupportedAlgorithmError('Missing publicKey from ECPrivateKey');\n  } // Ensure that the named curve is supported\n\n\n  var namedCurve = OIDS[ecParameters.value];\n\n  if (!namedCurve) {\n    throw new UnsupportedAlgorithmError(\"Unsupported named curve OID '\".concat(ecParameters.value, \"'\"));\n  } // Validate & get encoded point\n\n\n  var _decodeEcPoint = decodeEcPoint(namedCurve, ecPrivateKey.publicKey.data),\n      x = _decodeEcPoint.x,\n      y = _decodeEcPoint.y;\n\n  return {\n    keyAlgorithm: {\n      id: 'ec-public-key',\n      namedCurve: namedCurve\n    },\n    keyData: {\n      d: ecPrivateKey.privateKey,\n      x: x,\n      y: y\n    }\n  };\n};\n\nvar composeEcPrivateKeyInfo = function composeEcPrivateKeyInfo(keyAlgorithm, keyData) {\n  // Validate named curve\n  var namedCurveOid = FLIPPED_OIDS[keyAlgorithm.namedCurve];\n\n  if (!namedCurveOid) {\n    throw new UnsupportedAlgorithmError(\"Unsupported named curve '\".concat(keyAlgorithm.namedCurve, \"'\"));\n  } // Validate D value (private key)\n\n\n  var privateKey = validateEcD(keyAlgorithm.namedCurve, keyData.d); // Validate & encode point (public key)\n\n  var publicKey = encodeEcPoint(keyAlgorithm.namedCurve, keyData.x, keyData.y);\n  var ecPrivateKey = {\n    version: 1,\n    privateKey: privateKey,\n    publicKey: {\n      unused: 0,\n      data: publicKey\n    }\n  };\n  var ecPrivateKeyAsn1 = encodeAsn1(ecPrivateKey, EcPrivateKey);\n  var ecParametersAsn1 = encodeAsn1({\n    type: 'namedCurve',\n    value: namedCurveOid\n  }, EcParameters);\n  return {\n    version: 0,\n    privateKeyAlgorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: ecParametersAsn1\n    },\n    privateKey: ecPrivateKeyAsn1\n  };\n};\n\nvar decomposeEd25519PrivateKeyInfo = function decomposeEd25519PrivateKeyInfo(privateKeyInfo) {\n  // See: https://tools.ietf.org/html/rfc8032#section-5.1.5\n  var privateKeyAlgorithm = privateKeyInfo.privateKeyAlgorithm,\n      privateKey = privateKeyInfo.privateKey;\n  var seed = decodeAsn1(privateKey, CurvePrivateKey);\n  return {\n    keyAlgorithm: {\n      id: OIDS[privateKeyAlgorithm.id]\n    },\n    keyData: {\n      seed: seed\n    }\n  };\n};\n\nvar composeEd25519PrivateKeyInfo = function composeEd25519PrivateKeyInfo(keyAlgorithm, keyData) {\n  return {\n    version: 0,\n    privateKeyAlgorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id]\n    },\n    privateKey: encodeAsn1(keyData.seed, CurvePrivateKey)\n  };\n};\n\nexport var decomposePrivateKeyInfo = function decomposePrivateKeyInfo(privateKeyInfo) {\n  var keyType = KEY_TYPES[OIDS[privateKeyInfo.privateKeyAlgorithm.id]];\n\n  switch (keyType) {\n    case 'rsa':\n      return decomposeRsaPrivateKeyInfo(privateKeyInfo);\n\n    case 'ec':\n      return decomposeEcPrivateKeyInfo(privateKeyInfo);\n\n    case 'ed25519':\n      return decomposeEd25519PrivateKeyInfo(privateKeyInfo);\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm OID '\".concat(privateKeyInfo.privateKeyAlgorithm.id, \"'\"));\n  }\n};\nexport var composePrivateKeyInfo = function composePrivateKeyInfo(keyAlgorithm, keyData) {\n  var keyType = KEY_TYPES[keyAlgorithm.id];\n\n  switch (keyType) {\n    case 'rsa':\n      return composeRsaPrivateKeyInfo(keyAlgorithm, keyData);\n\n    case 'ec':\n      return composeEcPrivateKeyInfo(keyAlgorithm, keyData);\n\n    case 'ed25519':\n      return composeEd25519PrivateKeyInfo(keyAlgorithm, keyData);\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key algorithm id '\".concat(keyAlgorithm.id, \"'\"));\n  }\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs8/keys.js"],"names":["decomposeRsaPrivateKey","composeRsaPrivateKey","decodeAsn1","encodeAsn1","EcParameters","EcPrivateKey","CurvePrivateKey","decodeEcPoint","encodeEcPoint","validateEcD","hexStringToUint8Array","UnsupportedAlgorithmError","OIDS","FLIPPED_OIDS","KEY_TYPES","decomposeRsaPrivateKeyInfo","privateKeyInfo","privateKeyAlgorithm","privateKeyAsn1","privateKey","keyAlgorithm","id","keyData","composeRsaPrivateKeyInfo","rsaPrivateKeyAsn1","version","parameters","decomposeEcPrivateKeyInfo","ecParameters","ecPrivateKey","type","publicKey","namedCurve","value","data","x","y","d","composeEcPrivateKeyInfo","namedCurveOid","unused","ecPrivateKeyAsn1","ecParametersAsn1","decomposeEd25519PrivateKeyInfo","seed","composeEd25519PrivateKeyInfo","decomposePrivateKeyInfo","keyType","composePrivateKeyInfo"],"mappings":"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","sourcesContent":["import { decomposeRsaPrivateKey, composeRsaPrivateKey } from '../raw/keys';\nimport { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EcParameters, EcPrivateKey, CurvePrivateKey } from '../../util/asn1-entities';\nimport { decodeEcPoint, encodeEcPoint, validateEcD } from '../../util/ec';\nimport { hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError } from '../../util/errors';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nimport { KEY_TYPES } from '../../util/key-types';\n\nconst decomposeRsaPrivateKeyInfo = privateKeyInfo => {\n  const {\n    privateKeyAlgorithm,\n    privateKey: privateKeyAsn1\n  } = privateKeyInfo;\n  const keyAlgorithm = {\n    id: OIDS[privateKeyAlgorithm.id]\n  };\n\n  switch (keyAlgorithm.id) {\n    case 'rsa-encryption':\n    case 'md2-with-rsa-encryption':\n    case 'md4-with-rsa-encryption':\n    case 'md5-with-rsa-encryption':\n    case 'sha1-with-rsa-encryption':\n    case 'sha224-with-rsa-encryption':\n    case 'sha256-with-rsa-encryption':\n    case 'sha384-with-rsa-encryption':\n    case 'sha512-with-rsa-encryption':\n    case 'sha512-224-with-rsa-encryption':\n    case 'sha512-256-with-rsa-encryption':\n      break;\n\n    /* istanbul ignore next */\n\n    case 'rsaes-oaep':\n      throw new UnsupportedAlgorithmError('RSA-OAEP keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    case 'rsassa-pss':\n      throw new UnsupportedAlgorithmError('RSA-PSS keys are not yet supported');\n\n    /* istanbul ignore next */\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm OID '${privateKeyAlgorithm.id}'`);\n  }\n\n  const {\n    keyData\n  } = decomposeRsaPrivateKey(privateKeyAsn1);\n  return {\n    keyAlgorithm: {\n      id: OIDS[privateKeyAlgorithm.id]\n    },\n    keyData\n  };\n};\n\nconst composeRsaPrivateKeyInfo = (keyAlgorithm, keyData) => {\n  const rsaPrivateKeyAsn1 = composeRsaPrivateKey(keyAlgorithm, keyData);\n  return {\n    version: 0,\n    privateKeyAlgorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: hexStringToUint8Array('0500')\n    },\n    privateKey: rsaPrivateKeyAsn1\n  };\n};\n\nconst decomposeEcPrivateKeyInfo = privateKeyInfo => {\n  const {\n    privateKeyAlgorithm,\n    privateKey: privateKeyAsn1\n  } = privateKeyInfo;\n  const ecParameters = decodeAsn1(privateKeyAlgorithm.parameters, EcParameters);\n  const ecPrivateKey = decodeAsn1(privateKeyAsn1, EcPrivateKey); // Validate parameters & publicKey\n\n  /* istanbul ignore if */\n\n  if (ecParameters.type !== 'namedCurve') {\n    throw new UnsupportedAlgorithmError('Only EC named curves are supported');\n  }\n  /* istanbul ignore if */\n\n\n  if (!ecPrivateKey.publicKey) {\n    throw new UnsupportedAlgorithmError('Missing publicKey from ECPrivateKey');\n  } // Ensure that the named curve is supported\n\n\n  const namedCurve = OIDS[ecParameters.value];\n\n  if (!namedCurve) {\n    throw new UnsupportedAlgorithmError(`Unsupported named curve OID '${ecParameters.value}'`);\n  } // Validate & get encoded point\n\n\n  const {\n    x,\n    y\n  } = decodeEcPoint(namedCurve, ecPrivateKey.publicKey.data);\n  return {\n    keyAlgorithm: {\n      id: 'ec-public-key',\n      namedCurve\n    },\n    keyData: {\n      d: ecPrivateKey.privateKey,\n      x,\n      y\n    }\n  };\n};\n\nconst composeEcPrivateKeyInfo = (keyAlgorithm, keyData) => {\n  // Validate named curve\n  const namedCurveOid = FLIPPED_OIDS[keyAlgorithm.namedCurve];\n\n  if (!namedCurveOid) {\n    throw new UnsupportedAlgorithmError(`Unsupported named curve '${keyAlgorithm.namedCurve}'`);\n  } // Validate D value (private key)\n\n\n  const privateKey = validateEcD(keyAlgorithm.namedCurve, keyData.d); // Validate & encode point (public key)\n\n  const publicKey = encodeEcPoint(keyAlgorithm.namedCurve, keyData.x, keyData.y);\n  const ecPrivateKey = {\n    version: 1,\n    privateKey,\n    publicKey: {\n      unused: 0,\n      data: publicKey\n    }\n  };\n  const ecPrivateKeyAsn1 = encodeAsn1(ecPrivateKey, EcPrivateKey);\n  const ecParametersAsn1 = encodeAsn1({\n    type: 'namedCurve',\n    value: namedCurveOid\n  }, EcParameters);\n  return {\n    version: 0,\n    privateKeyAlgorithm: {\n      id: FLIPPED_OIDS[keyAlgorithm.id],\n      parameters: ecParametersAsn1\n    },\n    privateKey: ecPrivateKeyAsn1\n  };\n};\n\nconst decomposeEd25519PrivateKeyInfo = privateKeyInfo => {\n  // See: https://tools.ietf.org/html/rfc8032#section-5.1.5\n  const {\n    privateKeyAlgorithm,\n    privateKey\n  } = privateKeyInfo;\n  const seed = decodeAsn1(privateKey, CurvePrivateKey);\n  return {\n    keyAlgorithm: {\n      id: OIDS[privateKeyAlgorithm.id]\n    },\n    keyData: {\n      seed\n    }\n  };\n};\n\nconst composeEd25519PrivateKeyInfo = (keyAlgorithm, keyData) => ({\n  version: 0,\n  privateKeyAlgorithm: {\n    id: FLIPPED_OIDS[keyAlgorithm.id]\n  },\n  privateKey: encodeAsn1(keyData.seed, CurvePrivateKey)\n});\n\nexport const decomposePrivateKeyInfo = privateKeyInfo => {\n  const keyType = KEY_TYPES[OIDS[privateKeyInfo.privateKeyAlgorithm.id]];\n\n  switch (keyType) {\n    case 'rsa':\n      return decomposeRsaPrivateKeyInfo(privateKeyInfo);\n\n    case 'ec':\n      return decomposeEcPrivateKeyInfo(privateKeyInfo);\n\n    case 'ed25519':\n      return decomposeEd25519PrivateKeyInfo(privateKeyInfo);\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm OID '${privateKeyInfo.privateKeyAlgorithm.id}'`);\n  }\n};\nexport const composePrivateKeyInfo = (keyAlgorithm, keyData) => {\n  const keyType = KEY_TYPES[keyAlgorithm.id];\n\n  switch (keyType) {\n    case 'rsa':\n      return composeRsaPrivateKeyInfo(keyAlgorithm, keyData);\n\n    case 'ec':\n      return composeEcPrivateKeyInfo(keyAlgorithm, keyData);\n\n    case 'ed25519':\n      return composeEd25519PrivateKeyInfo(keyAlgorithm, keyData);\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key algorithm id '${keyAlgorithm.id}'`);\n  }\n};"]},"metadata":{},"sourceType":"module"}