{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createContractFromTx = exports.createContract = exports.simulateCreateContractFromTx = exports.simulateCreateContractFromSource = void 0;\n/**\n * Simulates the creation of a new contract from a contract, so that the cost for the creation can be checked\n * Returns the transaction describing the creation simulation.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param initState     the contract initial state, as a JSON string.\n * @param contractSrc optional the contract source as string.\n */\n\nfunction simulateCreateContractFromSource(arweave, wallet, initState, contractSrc) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const srcTx = yield arweave.createTransaction({\n      data: contractSrc\n    }, wallet);\n    srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n    srcTx.addTag('App-Version', '0.3.0');\n    srcTx.addTag('Content-Type', 'application/javascript');\n    yield arweave.transactions.sign(srcTx, wallet); // compute the fee needed to deploy the init state\n\n    const deployInitStateTx = yield simulateCreateContractFromTx(arweave, wallet, srcTx.id, initState);\n    const initStateReward = deployInitStateTx.reward; // update the reward of the contract creation by adding the reward needed for the creation of the state\n\n    srcTx.reward = (parseFloat(srcTx.reward) + parseFloat(initStateReward)).toString();\n    return srcTx;\n  });\n}\n\nexports.simulateCreateContractFromSource = simulateCreateContractFromSource;\n/**\n * Simulate the creation of a contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction simulateCreateContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n  return __awaiter(this, void 0, void 0, function* () {\n    let contractTX = yield arweave.createTransaction({\n      data: state\n    }, wallet);\n\n    if (target && winstonQty && target.length && +winstonQty > 0) {\n      contractTX = yield arweave.createTransaction({\n        data: state,\n        target: target.toString(),\n        quantity: winstonQty.toString()\n      }, wallet);\n    }\n\n    if (tags && tags.length) {\n      for (const tag of tags) {\n        contractTX.addTag(tag.name.toString(), tag.value.toString());\n      }\n    }\n\n    contractTX.addTag('App-Name', 'SmartWeaveContract');\n    contractTX.addTag('App-Version', '0.3.0');\n    contractTX.addTag('Contract-Src', srcTxId);\n    contractTX.addTag('Content-Type', 'application/json');\n    yield arweave.transactions.sign(contractTX, wallet);\n    return contractTX;\n  });\n}\n\nexports.simulateCreateContractFromTx = simulateCreateContractFromTx;\n/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\n\nfunction createContract(arweave, wallet, contractSrc, initState) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const srcTx = yield arweave.createTransaction({\n      data: contractSrc\n    }, wallet);\n    srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n    srcTx.addTag('App-Version', '0.3.0');\n    srcTx.addTag('Content-Type', 'application/javascript');\n    yield arweave.transactions.sign(srcTx, wallet);\n    const response = yield arweave.transactions.post(srcTx);\n\n    if (response.status === 200 || response.status === 208) {\n      return yield createContractFromTx(arweave, wallet, srcTx.id, initState);\n    } else {\n      throw new Error('Unable to write Contract Source.');\n    }\n  });\n}\n\nexports.createContract = createContract;\n/**\n * Create a new contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction createContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n  return __awaiter(this, void 0, void 0, function* () {\n    let contractTX = yield arweave.createTransaction({\n      data: state\n    }, wallet);\n\n    if (target && winstonQty && target.length && +winstonQty > 0) {\n      contractTX = yield arweave.createTransaction({\n        data: state,\n        target: target.toString(),\n        quantity: winstonQty.toString()\n      }, wallet);\n    }\n\n    if (tags && tags.length) {\n      for (const tag of tags) {\n        contractTX.addTag(tag.name.toString(), tag.value.toString());\n      }\n    }\n\n    contractTX.addTag('App-Name', 'SmartWeaveContract');\n    contractTX.addTag('App-Version', '0.3.0');\n    contractTX.addTag('Contract-Src', srcTxId);\n    contractTX.addTag('Content-Type', 'application/json');\n    yield arweave.transactions.sign(contractTX, wallet);\n    const response = yield arweave.transactions.post(contractTX);\n\n    if (response.status === 200 || response.status === 208) {\n      return contractTX.id;\n    } else {\n      throw new Error('Unable to write Contract Initial State');\n    }\n  });\n}\n\nexports.createContractFromTx = createContractFromTx;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/smartweave/lib/contract-create.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","createContractFromTx","createContract","simulateCreateContractFromTx","simulateCreateContractFromSource","arweave","wallet","initState","contractSrc","srcTx","createTransaction","data","addTag","transactions","sign","deployInitStateTx","id","initStateReward","reward","parseFloat","toString","srcTxId","state","tags","target","winstonQty","contractTX","length","quantity","tag","name","response","post","status","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createContractFromTx = exports.createContract = exports.simulateCreateContractFromTx = exports.simulateCreateContractFromSource = void 0;\n/**\n * Simulates the creation of a new contract from a contract, so that the cost for the creation can be checked\n * Returns the transaction describing the creation simulation.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param initState     the contract initial state, as a JSON string.\n * @param contractSrc optional the contract source as string.\n */\nfunction simulateCreateContractFromSource(arweave, wallet, initState, contractSrc) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const srcTx = yield arweave.createTransaction({ data: contractSrc }, wallet);\n        srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n        srcTx.addTag('App-Version', '0.3.0');\n        srcTx.addTag('Content-Type', 'application/javascript');\n        yield arweave.transactions.sign(srcTx, wallet);\n        // compute the fee needed to deploy the init state\n        const deployInitStateTx = yield simulateCreateContractFromTx(arweave, wallet, srcTx.id, initState);\n        const initStateReward = deployInitStateTx.reward;\n        // update the reward of the contract creation by adding the reward needed for the creation of the state\n        srcTx.reward = (parseFloat(srcTx.reward) + parseFloat(initStateReward)).toString();\n        return srcTx;\n    });\n}\nexports.simulateCreateContractFromSource = simulateCreateContractFromSource;\n/**\n * Simulate the creation of a contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction simulateCreateContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let contractTX = yield arweave.createTransaction({ data: state }, wallet);\n        if (target && winstonQty && target.length && +winstonQty > 0) {\n            contractTX = yield arweave.createTransaction({\n                data: state,\n                target: target.toString(),\n                quantity: winstonQty.toString(),\n            }, wallet);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                contractTX.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        contractTX.addTag('App-Name', 'SmartWeaveContract');\n        contractTX.addTag('App-Version', '0.3.0');\n        contractTX.addTag('Contract-Src', srcTxId);\n        contractTX.addTag('Content-Type', 'application/json');\n        yield arweave.transactions.sign(contractTX, wallet);\n        return contractTX;\n    });\n}\nexports.simulateCreateContractFromTx = simulateCreateContractFromTx;\n/**\n * Create a new contract from a contract source file and an initial state.\n * Returns the contract id.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractSrc   the contract source as string.\n * @param initState     the contract initial state, as a JSON string.\n */\nfunction createContract(arweave, wallet, contractSrc, initState) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const srcTx = yield arweave.createTransaction({ data: contractSrc }, wallet);\n        srcTx.addTag('App-Name', 'SmartWeaveContractSource');\n        srcTx.addTag('App-Version', '0.3.0');\n        srcTx.addTag('Content-Type', 'application/javascript');\n        yield arweave.transactions.sign(srcTx, wallet);\n        const response = yield arweave.transactions.post(srcTx);\n        if (response.status === 200 || response.status === 208) {\n            return yield createContractFromTx(arweave, wallet, srcTx.id, initState);\n        }\n        else {\n            throw new Error('Unable to write Contract Source.');\n        }\n    });\n}\nexports.createContract = createContract;\n/**\n * Create a new contract from an existing contract source tx, with an initial state.\n * Returns the contract id.\n *\n * @param arweave   an Arweave client instance\n * @param wallet    a wallet private or public key\n * @param srcTxId   the contract source Tx id.\n * @param state     the initial state, as a JSON string.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction createContractFromTx(arweave, wallet, srcTxId, state, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let contractTX = yield arweave.createTransaction({ data: state }, wallet);\n        if (target && winstonQty && target.length && +winstonQty > 0) {\n            contractTX = yield arweave.createTransaction({\n                data: state,\n                target: target.toString(),\n                quantity: winstonQty.toString(),\n            }, wallet);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                contractTX.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        contractTX.addTag('App-Name', 'SmartWeaveContract');\n        contractTX.addTag('App-Version', '0.3.0');\n        contractTX.addTag('Contract-Src', srcTxId);\n        contractTX.addTag('Content-Type', 'application/json');\n        yield arweave.transactions.sign(contractTX, wallet);\n        const response = yield arweave.transactions.post(contractTX);\n        if (response.status === 200 || response.status === 208) {\n            return contractTX.id;\n        }\n        else {\n            throw new Error('Unable to write Contract Initial State');\n        }\n    });\n}\nexports.createContractFromTx = createContractFromTx;\n"]},"metadata":{},"sourceType":"script"}