{"ast":null,"code":"/*\n  GIFEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n  Todd Wolfson (Implemented streams - todd@twolfson.com)\n*/\nvar assert = require('assert');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar ReadableStream = require('readable-stream');\n\nvar util = require('util');\n\nvar NeuQuant = require('./TypedNeuQuant.js');\n\nvar LZWEncoder = require('./LZWEncoder.js'); // DEV: By using a capacitor, we prevent creating a data event for every byte written\n\n\nfunction ByteCapacitor(options) {\n  // Inherit from ReadableStream\n  ReadableStream.call(this, options); // Start with an empty buffer and allow writes\n\n  this.okayToPush = true;\n  this.resetData();\n}\n\nutil.inherits(ByteCapacitor, ReadableStream);\n\nByteCapacitor.prototype._read = function () {\n  // The output is controlled by the input provided by methods.\n  // If we exceed the highwater mark, we will raise an error.\n  this.okayToPush = true;\n};\n\nByteCapacitor.prototype.resetData = function () {\n  this.data = [];\n};\n\nByteCapacitor.prototype.flushData = function () {\n  // If we are not okay to push, emit an error\n  if (!this.okayToPush) {\n    var err = new Error('GIF memory limit exceeded. Please `read` from GIF before writing additional frames/information.');\n    return this.emit('error', err);\n  } // Otherwise, push out the new buffer\n\n\n  var buff = new Buffer(this.data);\n  this.resetData();\n  this.okayToPush = this.push(buff);\n};\n\nByteCapacitor.prototype.writeByte = function (val) {\n  this.data.push(val);\n};\n\nByteCapacitor.prototype.writeUTFBytes = function (string) {\n  for (var l = string.length, i = 0; i < l; i++) {\n    this.writeByte(string.charCodeAt(i));\n  }\n};\n\nByteCapacitor.prototype.writeBytes = function (array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++) {\n    this.writeByte(array[i]);\n  }\n};\n\nfunction GIFEncoder(width, height, options) {\n  // Fallback options\n  options = options || {}; // Inherit from ByteCapacitor immediately\n  // https://github.com/isaacs/readable-stream/blob/v1.1.9/lib/_stream_readable.js#L60-L63\n\n  var hwm = options.highWaterMark;\n  ByteCapacitor.call(this, {\n    // Allow for up to 64kB of GIFfy-goodness\n    highWaterMark: hwm || hwm === 0 ? hwm : 64 * 1024\n  }); // image size\n\n  this.width = ~~width;\n  this.height = ~~height; // transparent color if given\n\n  this.transparent = null; // transparent index in color table\n\n  this.transIndex = 0; // -1 = no repeat, 0 = forever. anything else is repeat count\n\n  this.repeat = -1; // frame delay (hundredths)\n\n  this.delay = 0;\n  this.pixels = null; // BGR byte array from frame\n\n  this.indexedPixels = null; // converted frame indexed to palette\n\n  this.colorDepth = null; // number of bit planes\n\n  this.colorTab = null; // RGB palette\n\n  this.usedEntry = []; // active palette entries\n\n  this.palSize = 7; // color table size (bits-1)\n\n  this.dispose = -1; // disposal code (-1 = use default)\n\n  this.firstFrame = true;\n  this.sample = 10; // default sample interval for quantizer\n  // When we encounter a header, new frame, or stop, emit data\n\n  var that = this;\n\n  function flushData() {\n    that.flushData();\n  }\n\n  this.on('writeHeader#stop', flushData);\n  this.on('frame#stop', flushData);\n  this.on('finish#stop', function finishGif() {\n    // Flush the data\n    flushData(); // Close the gif\n\n    that.push(null);\n  });\n}\n\nutil.inherits(GIFEncoder, ByteCapacitor);\n/*\n  Sets the delay time between each frame, or changes it for subsequent frames\n  (applies to last frame added)\n*/\n\nGIFEncoder.prototype.setDelay = function (milliseconds) {\n  this.delay = Math.round(milliseconds / 10);\n};\n/*\n  Sets frame rate in frames per second.\n*/\n\n\nGIFEncoder.prototype.setFrameRate = function (fps) {\n  this.delay = Math.round(100 / fps);\n};\n/*\n  Sets the GIF frame disposal code for the last added frame and any\n  subsequent frames.\n\n  Default is 0 if no transparent color has been set, otherwise 2.\n*/\n\n\nGIFEncoder.prototype.setDispose = function (disposalCode) {\n  if (disposalCode >= 0) this.dispose = disposalCode;\n};\n/*\n  Sets the number of times the set of GIF frames should be played.\n\n  -1 = play once\n  0 = repeat indefinitely\n\n  Default is -1\n\n  Must be invoked before the first image is added\n*/\n\n\nGIFEncoder.prototype.setRepeat = function (repeat) {\n  this.repeat = repeat;\n};\n/*\n  Sets the transparent color for the last added frame and any subsequent\n  frames. Since all colors are subject to modification in the quantization\n  process, the color in the final palette for each frame closest to the given\n  color becomes the transparent color for that frame. May be set to null to\n  indicate no transparent color.\n*/\n\n\nGIFEncoder.prototype.setTransparent = function (color) {\n  this.transparent = color;\n}; // Custom methods for performance hacks around streaming GIF data pieces without re-analyzing/loading\n\n\nGIFEncoder.prototype.analyzeImage = function (imageData) {\n  // convert to correct format if necessary\n  this.setImagePixels(this.removeAlphaChannel(imageData));\n  this.analyzePixels(); // build color table & map pixels\n};\n\nGIFEncoder.prototype.writeImageInfo = function () {\n  if (this.firstFrame) {\n    this.writeLSD(); // logical screen descriptior\n\n    this.writePalette(); // global color table\n\n    if (this.repeat >= 0) {\n      // use NS app extension to indicate reps\n      this.writeNetscapeExt();\n    }\n  }\n\n  this.writeGraphicCtrlExt(); // write graphic control extension\n\n  this.writeImageDesc(); // image descriptor\n\n  if (!this.firstFrame) this.writePalette(); // local color table\n  // DEV: This was originally after outputImage but it does not affect order it seems\n\n  this.firstFrame = false;\n};\n\nGIFEncoder.prototype.outputImage = function () {\n  this.writePixels(); // encode and write pixel data\n};\n/*\n  Adds next GIF frame. The frame is not written immediately, but is\n  actually deferred until the next frame is received so that timing\n  data can be inserted.  Invoking finish() flushes all frames.\n*/\n\n\nGIFEncoder.prototype.addFrame = function (imageData) {\n  this.emit('frame#start');\n  this.analyzeImage(imageData);\n  this.writeImageInfo();\n  this.outputImage();\n  this.emit('frame#stop');\n};\n/*\n  Adds final trailer to the GIF stream, if you don't call the finish method\n  the GIF stream will not be valid.\n*/\n\n\nGIFEncoder.prototype.finish = function () {\n  this.emit('finish#start');\n  this.writeByte(0x3b); // gif trailer\n\n  this.emit('finish#stop');\n};\n/*\n  Sets quality of color quantization (conversion of images to the maximum 256\n  colors allowed by the GIF specification). Lower values (minimum = 1)\n  produce better colors, but slow processing significantly. 10 is the\n  default, and produces good color mapping at reasonable speeds. Values\n  greater than 20 do not yield significant improvements in speed.\n*/\n\n\nGIFEncoder.prototype.setQuality = function (quality) {\n  if (quality < 1) quality = 1;\n  this.sample = quality;\n};\n/*\n  Writes GIF file header\n*/\n\n\nGIFEncoder.prototype.writeHeader = function () {\n  this.emit('writeHeader#start');\n  this.writeUTFBytes(\"GIF89a\");\n  this.emit('writeHeader#stop');\n};\n/*\n  Analyzes current frame colors and creates color map.\n*/\n\n\nGIFEncoder.prototype.analyzePixels = function () {\n  var len = this.pixels.length;\n  var nPix = len / 3; // TODO: Re-use indexedPixels\n\n  this.indexedPixels = new Uint8Array(nPix);\n  var imgq = new NeuQuant(this.pixels, this.sample);\n  imgq.buildColormap(); // create reduced palette\n\n  this.colorTab = imgq.getColormap(); // map image pixels to new palette\n\n  var k = 0;\n\n  for (var j = 0; j < nPix; j++) {\n    var index = imgq.lookupRGB(this.pixels[k++] & 0xff, this.pixels[k++] & 0xff, this.pixels[k++] & 0xff);\n    this.usedEntry[index] = true;\n    this.indexedPixels[j] = index;\n  }\n\n  this.pixels = null;\n  this.colorDepth = 8;\n  this.palSize = 7; // get closest match to transparent color if specified\n\n  if (this.transparent !== null) {\n    this.transIndex = this.findClosest(this.transparent);\n  }\n};\n/*\n  Returns index of palette color closest to c\n*/\n\n\nGIFEncoder.prototype.findClosest = function (c) {\n  if (this.colorTab === null) return -1;\n  var r = (c & 0xFF0000) >> 16;\n  var g = (c & 0x00FF00) >> 8;\n  var b = c & 0x0000FF;\n  var minpos = 0;\n  var dmin = 256 * 256 * 256;\n  var len = this.colorTab.length;\n\n  for (var i = 0; i < len;) {\n    var dr = r - (this.colorTab[i++] & 0xff);\n    var dg = g - (this.colorTab[i++] & 0xff);\n    var db = b - (this.colorTab[i] & 0xff);\n    var d = dr * dr + dg * dg + db * db;\n    var index = i / 3;\n\n    if (this.usedEntry[index] && d < dmin) {\n      dmin = d;\n      minpos = index;\n    }\n\n    i++;\n  }\n\n  return minpos;\n};\n/*\n  Extracts image pixels into byte array pixels\n  (removes alphachannel from canvas imagedata)\n*/\n\n\nGIFEncoder.prototype.removeAlphaChannel = function (data) {\n  var w = this.width;\n  var h = this.height;\n  var pixels = new Uint8Array(w * h * 3);\n  var count = 0;\n\n  for (var i = 0; i < h; i++) {\n    for (var j = 0; j < w; j++) {\n      var b = i * w * 4 + j * 4;\n      pixels[count++] = data[b];\n      pixels[count++] = data[b + 1];\n      pixels[count++] = data[b + 2];\n    }\n  }\n\n  return pixels;\n};\n\nGIFEncoder.prototype.setImagePixels = function (pixels) {\n  this.pixels = pixels;\n};\n/*\n  Writes Graphic Control Extension\n*/\n\n\nGIFEncoder.prototype.writeGraphicCtrlExt = function () {\n  this.writeByte(0x21); // extension introducer\n\n  this.writeByte(0xf9); // GCE label\n\n  this.writeByte(4); // data block size\n\n  var transp, disp;\n\n  if (this.transparent === null) {\n    transp = 0;\n    disp = 0; // dispose = no action\n  } else {\n    transp = 1;\n    disp = 2; // force clear if using transparent color\n  }\n\n  if (this.dispose >= 0) {\n    disp = dispose & 7; // user override\n  }\n\n  disp <<= 2; // packed fields\n\n  this.writeByte(0 | // 1:3 reserved\n  disp | // 4:6 disposal\n  0 | // 7 user input - 0 = none\n  transp // 8 transparency flag\n  );\n  this.writeShort(this.delay); // delay x 1/100 sec\n\n  this.writeByte(this.transIndex); // transparent color index\n\n  this.writeByte(0); // block terminator\n};\n/*\n  Writes Image Descriptor\n*/\n\n\nGIFEncoder.prototype.writeImageDesc = function () {\n  this.writeByte(0x2c); // image separator\n\n  this.writeShort(0); // image position x,y = 0,0\n\n  this.writeShort(0);\n  this.writeShort(this.width); // image size\n\n  this.writeShort(this.height); // packed fields\n\n  if (this.firstFrame) {\n    // no LCT - GCT is used for first (or only) frame\n    this.writeByte(0);\n  } else {\n    // specify normal LCT\n    this.writeByte(0x80 | // 1 local color table 1=yes\n    0 | // 2 interlace - 0=no\n    0 | // 3 sorted - 0=no\n    0 | // 4-5 reserved\n    this.palSize // 6-8 size of color table\n    );\n  }\n};\n/*\n  Writes Logical Screen Descriptor\n*/\n\n\nGIFEncoder.prototype.writeLSD = function () {\n  // logical screen size\n  this.writeShort(this.width);\n  this.writeShort(this.height); // packed fields\n\n  this.writeByte(0x80 | // 1 : global color table flag = 1 (gct used)\n  0x70 | // 2-4 : color resolution = 7\n  0x00 | // 5 : gct sort flag = 0\n  this.palSize // 6-8 : gct size\n  );\n  this.writeByte(0); // background color index\n\n  this.writeByte(0); // pixel aspect ratio - assume 1:1\n};\n/*\n  Writes Netscape application extension to define repeat count.\n*/\n\n\nGIFEncoder.prototype.writeNetscapeExt = function () {\n  this.writeByte(0x21); // extension introducer\n\n  this.writeByte(0xff); // app extension label\n\n  this.writeByte(11); // block size\n\n  this.writeUTFBytes('NETSCAPE2.0'); // app id + auth code\n\n  this.writeByte(3); // sub-block size\n\n  this.writeByte(1); // loop sub-block id\n\n  this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)\n\n  this.writeByte(0); // block terminator\n};\n/*\n  Writes color table\n*/\n\n\nGIFEncoder.prototype.writePalette = function () {\n  this.writeBytes(this.colorTab);\n  var n = 3 * 256 - this.colorTab.length;\n\n  for (var i = 0; i < n; i++) {\n    this.writeByte(0);\n  }\n};\n\nGIFEncoder.prototype.writeShort = function (pValue) {\n  this.writeByte(pValue & 0xFF);\n  this.writeByte(pValue >> 8 & 0xFF);\n};\n/*\n  Encodes and writes pixel data\n*/\n\n\nGIFEncoder.prototype.writePixels = function () {\n  var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n  enc.encode(this);\n};\n/*\n  Retrieves the GIF stream\n*/\n\n\nGIFEncoder.prototype.stream = function () {\n  return this;\n};\n\nGIFEncoder.ByteCapacitor = ByteCapacitor;\nmodule.exports = GIFEncoder;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/gif-encoder/lib/GIFEncoder.js"],"names":["assert","require","EventEmitter","ReadableStream","util","NeuQuant","LZWEncoder","ByteCapacitor","options","call","okayToPush","resetData","inherits","prototype","_read","data","flushData","err","Error","emit","buff","Buffer","push","writeByte","val","writeUTFBytes","string","l","length","i","charCodeAt","writeBytes","array","offset","GIFEncoder","width","height","hwm","highWaterMark","transparent","transIndex","repeat","delay","pixels","indexedPixels","colorDepth","colorTab","usedEntry","palSize","dispose","firstFrame","sample","that","on","finishGif","setDelay","milliseconds","Math","round","setFrameRate","fps","setDispose","disposalCode","setRepeat","setTransparent","color","analyzeImage","imageData","setImagePixels","removeAlphaChannel","analyzePixels","writeImageInfo","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeImageDesc","outputImage","writePixels","addFrame","finish","setQuality","quality","writeHeader","len","nPix","Uint8Array","imgq","buildColormap","getColormap","k","j","index","lookupRGB","findClosest","c","r","g","b","minpos","dmin","dr","dg","db","d","w","h","count","transp","disp","writeShort","n","pValue","enc","encode","stream","module","exports"],"mappings":"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","sourcesContent":["/*\n  GIFEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n  Todd Wolfson (Implemented streams - todd@twolfson.com)\n*/\n\nvar assert = require('assert');\nvar EventEmitter = require('events').EventEmitter;\nvar ReadableStream = require('readable-stream');\nvar util = require('util');\n\nvar NeuQuant = require('./TypedNeuQuant.js');\nvar LZWEncoder = require('./LZWEncoder.js');\n\n// DEV: By using a capacitor, we prevent creating a data event for every byte written\nfunction ByteCapacitor(options) {\n  // Inherit from ReadableStream\n  ReadableStream.call(this, options);\n\n  // Start with an empty buffer and allow writes\n  this.okayToPush = true;\n  this.resetData();\n}\nutil.inherits(ByteCapacitor, ReadableStream);\n\nByteCapacitor.prototype._read = function () {\n  // The output is controlled by the input provided by methods.\n  // If we exceed the highwater mark, we will raise an error.\n  this.okayToPush = true;\n};\n\nByteCapacitor.prototype.resetData = function () {\n  this.data = [];\n};\n\nByteCapacitor.prototype.flushData = function () {\n  // If we are not okay to push, emit an error\n  if (!this.okayToPush) {\n    var err = new Error('GIF memory limit exceeded. Please `read` from GIF before writing additional frames/information.');\n    return this.emit('error', err);\n  }\n\n  // Otherwise, push out the new buffer\n  var buff = new Buffer(this.data);\n  this.resetData();\n  this.okayToPush = this.push(buff);\n};\n\nByteCapacitor.prototype.writeByte = function (val) {\n  this.data.push(val);\n};\n\nByteCapacitor.prototype.writeUTFBytes = function (string) {\n  for (var l = string.length, i = 0; i < l; i++) {\n    this.writeByte(string.charCodeAt(i));\n  }\n};\n\nByteCapacitor.prototype.writeBytes = function (array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++) {\n    this.writeByte(array[i]);\n  }\n};\n\nfunction GIFEncoder(width, height, options) {\n  // Fallback options\n  options = options || {};\n\n  // Inherit from ByteCapacitor immediately\n  // https://github.com/isaacs/readable-stream/blob/v1.1.9/lib/_stream_readable.js#L60-L63\n  var hwm = options.highWaterMark;\n  ByteCapacitor.call(this, {\n    // Allow for up to 64kB of GIFfy-goodness\n    highWaterMark: (hwm || hwm === 0) ? hwm : 64 * 1024\n  });\n\n  // image size\n  this.width = ~~width;\n  this.height = ~~height;\n\n  // transparent color if given\n  this.transparent = null;\n\n  // transparent index in color table\n  this.transIndex = 0;\n\n  // -1 = no repeat, 0 = forever. anything else is repeat count\n  this.repeat = -1;\n\n  // frame delay (hundredths)\n  this.delay = 0;\n\n  this.pixels = null; // BGR byte array from frame\n  this.indexedPixels = null; // converted frame indexed to palette\n  this.colorDepth = null; // number of bit planes\n  this.colorTab = null; // RGB palette\n  this.usedEntry = []; // active palette entries\n  this.palSize = 7; // color table size (bits-1)\n  this.dispose = -1; // disposal code (-1 = use default)\n  this.firstFrame = true;\n  this.sample = 10; // default sample interval for quantizer\n\n  // When we encounter a header, new frame, or stop, emit data\n  var that = this;\n  function flushData() {\n    that.flushData();\n  }\n  this.on('writeHeader#stop', flushData);\n  this.on('frame#stop', flushData);\n  this.on('finish#stop', function finishGif () {\n    // Flush the data\n    flushData();\n\n    // Close the gif\n    that.push(null);\n  });\n}\nutil.inherits(GIFEncoder, ByteCapacitor);\n\n/*\n  Sets the delay time between each frame, or changes it for subsequent frames\n  (applies to last frame added)\n*/\nGIFEncoder.prototype.setDelay = function(milliseconds) {\n  this.delay = Math.round(milliseconds / 10);\n};\n\n/*\n  Sets frame rate in frames per second.\n*/\nGIFEncoder.prototype.setFrameRate = function(fps) {\n  this.delay = Math.round(100 / fps);\n};\n\n/*\n  Sets the GIF frame disposal code for the last added frame and any\n  subsequent frames.\n\n  Default is 0 if no transparent color has been set, otherwise 2.\n*/\nGIFEncoder.prototype.setDispose = function(disposalCode) {\n  if (disposalCode >= 0) this.dispose = disposalCode;\n};\n\n/*\n  Sets the number of times the set of GIF frames should be played.\n\n  -1 = play once\n  0 = repeat indefinitely\n\n  Default is -1\n\n  Must be invoked before the first image is added\n*/\n\nGIFEncoder.prototype.setRepeat = function(repeat) {\n  this.repeat = repeat;\n};\n\n/*\n  Sets the transparent color for the last added frame and any subsequent\n  frames. Since all colors are subject to modification in the quantization\n  process, the color in the final palette for each frame closest to the given\n  color becomes the transparent color for that frame. May be set to null to\n  indicate no transparent color.\n*/\nGIFEncoder.prototype.setTransparent = function(color) {\n  this.transparent = color;\n};\n\n// Custom methods for performance hacks around streaming GIF data pieces without re-analyzing/loading\nGIFEncoder.prototype.analyzeImage = function (imageData) {\n  // convert to correct format if necessary\n  this.setImagePixels(this.removeAlphaChannel(imageData));\n  this.analyzePixels(); // build color table & map pixels\n};\n\nGIFEncoder.prototype.writeImageInfo = function () {\n  if (this.firstFrame) {\n    this.writeLSD(); // logical screen descriptior\n    this.writePalette(); // global color table\n    if (this.repeat >= 0) {\n      // use NS app extension to indicate reps\n      this.writeNetscapeExt();\n    }\n  }\n\n  this.writeGraphicCtrlExt(); // write graphic control extension\n  this.writeImageDesc(); // image descriptor\n  if (!this.firstFrame) this.writePalette(); // local color table\n\n  // DEV: This was originally after outputImage but it does not affect order it seems\n  this.firstFrame = false;\n};\n\nGIFEncoder.prototype.outputImage = function () {\n  this.writePixels(); // encode and write pixel data\n};\n\n/*\n  Adds next GIF frame. The frame is not written immediately, but is\n  actually deferred until the next frame is received so that timing\n  data can be inserted.  Invoking finish() flushes all frames.\n*/\nGIFEncoder.prototype.addFrame = function(imageData) {\n  this.emit('frame#start');\n\n  this.analyzeImage(imageData);\n  this.writeImageInfo();\n  this.outputImage();\n\n  this.emit('frame#stop');\n};\n\n/*\n  Adds final trailer to the GIF stream, if you don't call the finish method\n  the GIF stream will not be valid.\n*/\nGIFEncoder.prototype.finish = function() {\n  this.emit('finish#start');\n  this.writeByte(0x3b); // gif trailer\n  this.emit('finish#stop');\n};\n\n/*\n  Sets quality of color quantization (conversion of images to the maximum 256\n  colors allowed by the GIF specification). Lower values (minimum = 1)\n  produce better colors, but slow processing significantly. 10 is the\n  default, and produces good color mapping at reasonable speeds. Values\n  greater than 20 do not yield significant improvements in speed.\n*/\nGIFEncoder.prototype.setQuality = function(quality) {\n  if (quality < 1) quality = 1;\n  this.sample = quality;\n};\n\n/*\n  Writes GIF file header\n*/\nGIFEncoder.prototype.writeHeader = function() {\n  this.emit('writeHeader#start');\n  this.writeUTFBytes(\"GIF89a\");\n  this.emit('writeHeader#stop');\n};\n\n/*\n  Analyzes current frame colors and creates color map.\n*/\nGIFEncoder.prototype.analyzePixels = function() {\n  var len = this.pixels.length;\n  var nPix = len / 3;\n\n  // TODO: Re-use indexedPixels\n  this.indexedPixels = new Uint8Array(nPix);\n\n  var imgq = new NeuQuant(this.pixels, this.sample);\n  imgq.buildColormap(); // create reduced palette\n  this.colorTab = imgq.getColormap();\n\n  // map image pixels to new palette\n  var k = 0;\n  for (var j = 0; j < nPix; j++) {\n    var index = imgq.lookupRGB(\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff\n    );\n    this.usedEntry[index] = true;\n    this.indexedPixels[j] = index;\n  }\n\n  this.pixels = null;\n  this.colorDepth = 8;\n  this.palSize = 7;\n\n  // get closest match to transparent color if specified\n  if (this.transparent !== null) {\n    this.transIndex = this.findClosest(this.transparent);\n  }\n};\n\n/*\n  Returns index of palette color closest to c\n*/\nGIFEncoder.prototype.findClosest = function(c) {\n  if (this.colorTab === null) return -1;\n\n  var r = (c & 0xFF0000) >> 16;\n  var g = (c & 0x00FF00) >> 8;\n  var b = (c & 0x0000FF);\n  var minpos = 0;\n  var dmin = 256 * 256 * 256;\n  var len = this.colorTab.length;\n\n  for (var i = 0; i < len;) {\n    var dr = r - (this.colorTab[i++] & 0xff);\n    var dg = g - (this.colorTab[i++] & 0xff);\n    var db = b - (this.colorTab[i] & 0xff);\n    var d = dr * dr + dg * dg + db * db;\n    var index = i / 3;\n    if (this.usedEntry[index] && (d < dmin)) {\n      dmin = d;\n      minpos = index;\n    }\n    i++;\n  }\n\n  return minpos;\n};\n\n/*\n  Extracts image pixels into byte array pixels\n  (removes alphachannel from canvas imagedata)\n*/\nGIFEncoder.prototype.removeAlphaChannel = function (data) {\n  var w = this.width;\n  var h = this.height;\n  var pixels = new Uint8Array(w * h * 3);\n\n  var count = 0;\n\n  for (var i = 0; i < h; i++) {\n    for (var j = 0; j < w; j++) {\n      var b = (i * w * 4) + j * 4;\n      pixels[count++] = data[b];\n      pixels[count++] = data[b+1];\n      pixels[count++] = data[b+2];\n    }\n  }\n\n  return pixels;\n};\n\nGIFEncoder.prototype.setImagePixels = function(pixels) {\n  this.pixels = pixels;\n};\n\n/*\n  Writes Graphic Control Extension\n*/\nGIFEncoder.prototype.writeGraphicCtrlExt = function() {\n  this.writeByte(0x21); // extension introducer\n  this.writeByte(0xf9); // GCE label\n  this.writeByte(4); // data block size\n\n  var transp, disp;\n  if (this.transparent === null) {\n    transp = 0;\n    disp = 0; // dispose = no action\n  } else {\n    transp = 1;\n    disp = 2; // force clear if using transparent color\n  }\n\n  if (this.dispose >= 0) {\n    disp = dispose & 7; // user override\n  }\n  disp <<= 2;\n\n  // packed fields\n  this.writeByte(\n    0 | // 1:3 reserved\n    disp | // 4:6 disposal\n    0 | // 7 user input - 0 = none\n    transp // 8 transparency flag\n  );\n\n  this.writeShort(this.delay); // delay x 1/100 sec\n  this.writeByte(this.transIndex); // transparent color index\n  this.writeByte(0); // block terminator\n};\n\n/*\n  Writes Image Descriptor\n*/\nGIFEncoder.prototype.writeImageDesc = function() {\n  this.writeByte(0x2c); // image separator\n  this.writeShort(0); // image position x,y = 0,0\n  this.writeShort(0);\n  this.writeShort(this.width); // image size\n  this.writeShort(this.height);\n\n  // packed fields\n  if (this.firstFrame) {\n    // no LCT - GCT is used for first (or only) frame\n    this.writeByte(0);\n  } else {\n    // specify normal LCT\n    this.writeByte(\n      0x80 | // 1 local color table 1=yes\n      0 | // 2 interlace - 0=no\n      0 | // 3 sorted - 0=no\n      0 | // 4-5 reserved\n      this.palSize // 6-8 size of color table\n    );\n  }\n};\n\n/*\n  Writes Logical Screen Descriptor\n*/\nGIFEncoder.prototype.writeLSD = function() {\n  // logical screen size\n  this.writeShort(this.width);\n  this.writeShort(this.height);\n\n  // packed fields\n  this.writeByte(\n    0x80 | // 1 : global color table flag = 1 (gct used)\n    0x70 | // 2-4 : color resolution = 7\n    0x00 | // 5 : gct sort flag = 0\n    this.palSize // 6-8 : gct size\n  );\n\n  this.writeByte(0); // background color index\n  this.writeByte(0); // pixel aspect ratio - assume 1:1\n};\n\n/*\n  Writes Netscape application extension to define repeat count.\n*/\nGIFEncoder.prototype.writeNetscapeExt = function() {\n  this.writeByte(0x21); // extension introducer\n  this.writeByte(0xff); // app extension label\n  this.writeByte(11); // block size\n  this.writeUTFBytes('NETSCAPE2.0'); // app id + auth code\n  this.writeByte(3); // sub-block size\n  this.writeByte(1); // loop sub-block id\n  this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)\n  this.writeByte(0); // block terminator\n};\n\n/*\n  Writes color table\n*/\nGIFEncoder.prototype.writePalette = function() {\n  this.writeBytes(this.colorTab);\n  var n = (3 * 256) - this.colorTab.length;\n  for (var i = 0; i < n; i++)\n    this.writeByte(0);\n};\n\nGIFEncoder.prototype.writeShort = function(pValue) {\n  this.writeByte(pValue & 0xFF);\n  this.writeByte((pValue >> 8) & 0xFF);\n};\n\n/*\n  Encodes and writes pixel data\n*/\nGIFEncoder.prototype.writePixels = function() {\n  var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n  enc.encode(this);\n};\n\n/*\n  Retrieves the GIF stream\n*/\nGIFEncoder.prototype.stream = function() {\n  return this;\n};\n\nGIFEncoder.ByteCapacitor = ByteCapacitor;\n\nmodule.exports = GIFEncoder;\n"]},"metadata":{},"sourceType":"script"}