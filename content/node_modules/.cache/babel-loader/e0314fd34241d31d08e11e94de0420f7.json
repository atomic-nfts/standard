{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar zlib = require('zlib');\n\nvar ChunkStream = require('./chunkstream');\n\nvar FilterAsync = require('./filter-parse-async');\n\nvar Parser = require('./parser');\n\nvar bitmapper = require('./bitmapper');\n\nvar formatNormaliser = require('./format-normaliser');\n\nvar ParserAsync = module.exports = function (options) {\n  ChunkStream.call(this);\n  this._parser = new Parser(options, {\n    read: this.read.bind(this),\n    error: this._handleError.bind(this),\n    metadata: this._handleMetaData.bind(this),\n    gamma: this.emit.bind(this, 'gamma'),\n    palette: this._handlePalette.bind(this),\n    transColor: this._handleTransColor.bind(this),\n    finished: this._finished.bind(this),\n    inflateData: this._inflateData.bind(this)\n  });\n  this._options = options;\n  this.writable = true;\n\n  this._parser.start();\n};\n\nutil.inherits(ParserAsync, ChunkStream);\n\nParserAsync.prototype._handleError = function (err) {\n  this.emit('error', err);\n  this.writable = false;\n  this.destroy();\n\n  if (this._inflate && this._inflate.destroy) {\n    this._inflate.destroy();\n  }\n\n  this.errord = true;\n};\n\nParserAsync.prototype._inflateData = function (data) {\n  if (!this._inflate) {\n    this._inflate = zlib.createInflate();\n\n    this._inflate.on('error', this.emit.bind(this, 'error'));\n\n    this._filter.on('complete', this._complete.bind(this));\n\n    this._inflate.pipe(this._filter);\n  }\n\n  this._inflate.write(data);\n};\n\nParserAsync.prototype._handleMetaData = function (metaData) {\n  this.emit('metadata', metaData);\n  this._bitmapInfo = Object.create(metaData);\n  this._filter = new FilterAsync(this._bitmapInfo);\n};\n\nParserAsync.prototype._handleTransColor = function (transColor) {\n  this._bitmapInfo.transColor = transColor;\n};\n\nParserAsync.prototype._handlePalette = function (palette) {\n  this._bitmapInfo.palette = palette;\n};\n\nParserAsync.prototype._finished = function () {\n  if (this.errord) {\n    return;\n  }\n\n  if (!this._inflate) {\n    this.emit('error', 'No Inflate block');\n  } else {\n    // no more data to inflate\n    this._inflate.end();\n  }\n\n  this.destroySoon();\n};\n\nParserAsync.prototype._complete = function (filteredData) {\n  if (this.errord) {\n    return;\n  }\n\n  try {\n    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n    bitmapData = null;\n  } catch (ex) {\n    this._handleError(ex);\n\n    return;\n  }\n\n  this.emit('parsed', normalisedBitmapData);\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/pngjs-nozlib/lib/parser-async.js"],"names":["util","require","zlib","ChunkStream","FilterAsync","Parser","bitmapper","formatNormaliser","ParserAsync","module","exports","options","call","_parser","read","bind","error","_handleError","metadata","_handleMetaData","gamma","emit","palette","_handlePalette","transColor","_handleTransColor","finished","_finished","inflateData","_inflateData","_options","writable","start","inherits","prototype","err","destroy","_inflate","errord","data","createInflate","on","_filter","_complete","pipe","write","metaData","_bitmapInfo","Object","create","end","destroySoon","filteredData","bitmapData","dataToBitMap","normalisedBitmapData","ex"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar zlib = require('zlib');\nvar ChunkStream = require('./chunkstream');\nvar FilterAsync = require('./filter-parse-async');\nvar Parser = require('./parser');\nvar bitmapper = require('./bitmapper');\nvar formatNormaliser = require('./format-normaliser');\n\nvar ParserAsync = module.exports = function(options) {\n  ChunkStream.call(this);\n\n  this._parser = new Parser(options, {\n    read: this.read.bind(this),\n    error: this._handleError.bind(this),\n    metadata: this._handleMetaData.bind(this),\n    gamma: this.emit.bind(this, 'gamma'),\n    palette: this._handlePalette.bind(this),\n    transColor: this._handleTransColor.bind(this),\n    finished: this._finished.bind(this),\n    inflateData: this._inflateData.bind(this)\n  });\n  this._options = options;\n  this.writable = true;\n\n  this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\n\n\nParserAsync.prototype._handleError = function(err) {\n\n  this.emit('error', err);\n\n  this.writable = false;\n\n  this.destroy();\n\n  if (this._inflate && this._inflate.destroy) {\n    this._inflate.destroy();\n  }\n\n  this.errord = true;\n};\n\nParserAsync.prototype._inflateData = function(data) {\n  if (!this._inflate) {\n    this._inflate = zlib.createInflate();\n\n    this._inflate.on('error', this.emit.bind(this, 'error'));\n    this._filter.on('complete', this._complete.bind(this));\n\n    this._inflate.pipe(this._filter);\n  }\n  this._inflate.write(data);\n};\n\nParserAsync.prototype._handleMetaData = function(metaData) {\n\n  this.emit('metadata', metaData);\n\n  this._bitmapInfo = Object.create(metaData);\n\n  this._filter = new FilterAsync(this._bitmapInfo);\n};\n\nParserAsync.prototype._handleTransColor = function(transColor) {\n  this._bitmapInfo.transColor = transColor;\n};\n\nParserAsync.prototype._handlePalette = function(palette) {\n  this._bitmapInfo.palette = palette;\n};\n\n\nParserAsync.prototype._finished = function() {\n  if (this.errord) {\n    return;\n  }\n\n  if (!this._inflate) {\n    this.emit('error', 'No Inflate block');\n  }\n  else {\n    // no more data to inflate\n    this._inflate.end();\n  }\n  this.destroySoon();\n};\n\nParserAsync.prototype._complete = function(filteredData) {\n\n  if (this.errord) {\n    return;\n  }\n\n  try {\n    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n\n    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n    bitmapData = null;\n  }\n  catch (ex) {\n    this._handleError(ex);\n    return;\n  }\n\n  this.emit('parsed', normalisedBitmapData);\n};\n"]},"metadata":{},"sourceType":"script"}