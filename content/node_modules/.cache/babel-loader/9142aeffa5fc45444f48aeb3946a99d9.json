{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = require(\"axios\");\n\nclass Api {\n  constructor(config) {\n    this.METHOD_GET = \"GET\";\n    this.METHOD_POST = \"POST\";\n    this.applyConfig(config);\n  }\n\n  applyConfig(config) {\n    this.config = this.mergeDefaults(config);\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  mergeDefaults(config) {\n    const protocol = config.protocol || \"http\";\n    const port = config.port || (protocol === \"https\" ? 443 : 80);\n    return {\n      host: config.host || \"127.0.0.1\",\n      protocol,\n      port,\n      timeout: config.timeout || 20000,\n      logging: config.logging || false,\n      logger: config.logger || console.log\n    };\n  }\n\n  async get(endpoint, config) {\n    try {\n      return await this.request().get(endpoint, config);\n    } catch (error) {\n      if (error.response && error.response.status) {\n        return error.response;\n      }\n\n      throw error;\n    }\n  }\n\n  async post(endpoint, body, config) {\n    try {\n      return await this.request().post(endpoint, body, config);\n    } catch (error) {\n      if (error.response && error.response.status) {\n        return error.response;\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Get an AxiosInstance with the base configuration setup to fire off\n   * a request to the network.\n   */\n\n\n  request() {\n    let instance = axios_1.default.create({\n      baseURL: `${this.config.protocol}://${this.config.host}:${this.config.port}`,\n      timeout: this.config.timeout,\n      maxContentLength: 1024 * 1024 * 512\n    });\n\n    if (this.config.logging) {\n      instance.interceptors.request.use(request => {\n        this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);\n        return request;\n      });\n      instance.interceptors.response.use(response => {\n        this.config.logger(`Response:   ${response.config.url} - ${response.status}`);\n        return response;\n      });\n    }\n\n    return instance;\n  }\n\n}\n\nexports.default = Api;","map":{"version":3,"sources":["../../../../src/common/lib/api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nclass Api {\n    constructor(config) {\n        this.METHOD_GET = \"GET\";\n        this.METHOD_POST = \"POST\";\n        this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n    }\n    getConfig() {\n        return this.config;\n    }\n    mergeDefaults(config) {\n        const protocol = config.protocol || \"http\";\n        const port = config.port || (protocol === \"https\" ? 443 : 80);\n        return {\n            host: config.host || \"127.0.0.1\",\n            protocol,\n            port,\n            timeout: config.timeout || 20000,\n            logging: config.logging || false,\n            logger: config.logger || console.log,\n        };\n    }\n    async get(endpoint, config) {\n        try {\n            return await this.request().get(endpoint, config);\n        }\n        catch (error) {\n            if (error.response && error.response.status) {\n                return error.response;\n            }\n            throw error;\n        }\n    }\n    async post(endpoint, body, config) {\n        try {\n            return await this.request().post(endpoint, body, config);\n        }\n        catch (error) {\n            if (error.response && error.response.status) {\n                return error.response;\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get an AxiosInstance with the base configuration setup to fire off\n     * a request to the network.\n     */\n    request() {\n        let instance = axios_1.default.create({\n            baseURL: `${this.config.protocol}://${this.config.host}:${this.config.port}`,\n            timeout: this.config.timeout,\n            maxContentLength: 1024 * 1024 * 512,\n        });\n        if (this.config.logging) {\n            instance.interceptors.request.use((request) => {\n                this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);\n                return request;\n            });\n            instance.interceptors.response.use((response) => {\n                this.config.logger(`Response:   ${response.config.url} - ${response.status}`);\n                return response;\n            });\n        }\n        return instance;\n    }\n}\nexports.default = Api;\n//# sourceMappingURL=api.js.map"]},"metadata":{},"sourceType":"script"}