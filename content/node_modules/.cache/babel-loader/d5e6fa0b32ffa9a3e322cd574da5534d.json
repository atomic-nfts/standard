{"ast":null,"code":"import { maybeDecryptPemBody, maybeEncryptPemBody } from '../raw/encryption';\nimport { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs1-der';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { uint8ArrayToBinaryString } from '../../util/binary';\nimport { DecodePemFailedError } from '../../util/errors';\nexport const decomposePrivateKey = (pem, options) => {\n  let decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'RSA PRIVATE KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  const {\n    pemBody: pkcs1Key,\n    encryptionAlgorithm\n  } = maybeDecryptPemBody(decodedPem, options.password);\n  const decomposedKey = decomposeDerPrivateKey(pkcs1Key, options);\n  decomposedKey.encryptionAlgorithm = encryptionAlgorithm;\n  decomposedKey.format = 'pkcs1-pem';\n  return decomposedKey;\n};\nexport const composePrivateKey = ({\n  encryptionAlgorithm,\n  ...decomposedKey\n}, options) => {\n  const pkcs1Key = composeDerPrivateKey(decomposedKey, options);\n  const {\n    pemBody,\n    pemHeaders\n  } = maybeEncryptPemBody(pkcs1Key, encryptionAlgorithm, options.password);\n  return encodePem({\n    type: 'RSA PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pemBody),\n    ...pemHeaders\n  });\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs1/pkcs1-pem.js"],"names":["maybeDecryptPemBody","maybeEncryptPemBody","decomposePrivateKey","decomposeDerPrivateKey","composePrivateKey","composeDerPrivateKey","decodePem","encodePem","uint8ArrayToBinaryString","DecodePemFailedError","pem","options","decodedPem","err","invalidInputKey","pemBody","pkcs1Key","encryptionAlgorithm","password","decomposedKey","format","pemHeaders","type","body"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,mBAA9B,QAAyD,mBAAzD;AACA,SAASC,mBAAmB,IAAIC,sBAAhC,EAAwDC,iBAAiB,IAAIC,oBAA7E,QAAyG,aAAzG;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,wBAArC;AACA,SAASC,wBAAT,QAAyC,mBAAzC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAO,MAAMP,mBAAmB,GAAG,CAACQ,GAAD,EAAMC,OAAN,KAAkB;AACnD,MAAIC,UAAJ;;AAEA,MAAI;AACFA,IAAAA,UAAU,GAAGN,SAAS,CAACI,GAAD,EAAM,iBAAN,CAAtB;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYJ,oBAArC;AACA,UAAMI,GAAN;AACD;;AAED,QAAM;AACJE,IAAAA,OAAO,EAAEC,QADL;AAEJC,IAAAA;AAFI,MAGFjB,mBAAmB,CAACY,UAAD,EAAaD,OAAO,CAACO,QAArB,CAHvB;AAIA,QAAMC,aAAa,GAAGhB,sBAAsB,CAACa,QAAD,EAAWL,OAAX,CAA5C;AACAQ,EAAAA,aAAa,CAACF,mBAAd,GAAoCA,mBAApC;AACAE,EAAAA,aAAa,CAACC,MAAd,GAAuB,WAAvB;AACA,SAAOD,aAAP;AACD,CAlBM;AAmBP,OAAO,MAAMf,iBAAiB,GAAG,CAAC;AAChCa,EAAAA,mBADgC;AAEhC,KAAGE;AAF6B,CAAD,EAG9BR,OAH8B,KAGlB;AACb,QAAMK,QAAQ,GAAGX,oBAAoB,CAACc,aAAD,EAAgBR,OAAhB,CAArC;AACA,QAAM;AACJI,IAAAA,OADI;AAEJM,IAAAA;AAFI,MAGFpB,mBAAmB,CAACe,QAAD,EAAWC,mBAAX,EAAgCN,OAAO,CAACO,QAAxC,CAHvB;AAIA,SAAOX,SAAS,CAAC;AACfe,IAAAA,IAAI,EAAE,iBADS;AAEfC,IAAAA,IAAI,EAAEf,wBAAwB,CAACO,OAAD,CAFf;AAGf,OAAGM;AAHY,GAAD,CAAhB;AAKD,CAdM","sourcesContent":["import { maybeDecryptPemBody, maybeEncryptPemBody } from '../raw/encryption';\nimport { decomposePrivateKey as decomposeDerPrivateKey, composePrivateKey as composeDerPrivateKey } from './pkcs1-der';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { uint8ArrayToBinaryString } from '../../util/binary';\nimport { DecodePemFailedError } from '../../util/errors';\nexport const decomposePrivateKey = (pem, options) => {\n  let decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'RSA PRIVATE KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  const {\n    pemBody: pkcs1Key,\n    encryptionAlgorithm\n  } = maybeDecryptPemBody(decodedPem, options.password);\n  const decomposedKey = decomposeDerPrivateKey(pkcs1Key, options);\n  decomposedKey.encryptionAlgorithm = encryptionAlgorithm;\n  decomposedKey.format = 'pkcs1-pem';\n  return decomposedKey;\n};\nexport const composePrivateKey = ({\n  encryptionAlgorithm,\n  ...decomposedKey\n}, options) => {\n  const pkcs1Key = composeDerPrivateKey(decomposedKey, options);\n  const {\n    pemBody,\n    pemHeaders\n  } = maybeEncryptPemBody(pkcs1Key, encryptionAlgorithm, options.password);\n  return encodePem({\n    type: 'RSA PRIVATE KEY',\n    body: uint8ArrayToBinaryString(pemBody),\n    ...pemHeaders\n  });\n};"]},"metadata":{},"sourceType":"module"}