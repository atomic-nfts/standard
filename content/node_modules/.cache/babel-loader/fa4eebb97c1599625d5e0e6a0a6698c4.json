{"ast":null,"code":"var _jsxFileName = \"/home/al/Desktop/koi/narcissus/content/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from \"react\";\nimport * as kweb from \"@_koi/sdk/web\"; // import gifFrames from \"gif-frames\";\n\nimport axios from 'axios';\nimport media from \"./narcissus.json\"; // import SmartWeave from \"smartweave\";\n\nimport \"./App.css\"; // console.log('narcissus', media, media.length)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ktools = new kweb.Web();\nconsole.log(\"ktools\", ktools);\nlet state;\nlet id; // let koii;\n\nlet totalFrames = 225;\n\nfunction App() {\n  _s();\n\n  const [narcissus, setNarcissus] = useState( /*#__PURE__*/_jsxDEV(\"canvas\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 46\n  }, this));\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0); // const [canvas, setCanvas] = useState(<canvas></canvas>);\n\n  const mainRef = useRef(null);\n  const flower = media;\n\n  const updateScore = () => {\n    console.log(\"useEffect score\", mainRef, 'score is', score);\n\n    if (!mainRef.current) {\n      console.log('not updating score because', mainRef.current); // setTimeout(updateScore, 1000)\n\n      return;\n    } else {\n      let scoreSpan = document.createElement('span');\n      scoreSpan.innerText = score;\n      scoreSpan.className = \"scoreSpan\";\n      mainRef.current.appendChild(scoreSpan);\n    }\n  };\n\n  function updateImage() {\n    console.log(\"update narcissus\", mainRef);\n\n    if (!mainRef.current) {\n      // let filler = document.createElement('div');\n      //     filler.className = \"filler\";\n      // mainRef.current.appendChild(filler)\n      console.log('not updating narcissus because', mainRef.current); // setTimeout(updateImage, 1000)\n\n      return;\n    } else {\n      console.log('about to append because main is', mainRef.current, narcissus); // let scoreSpan = document.createElement('span')\n      //     scoreSpan.innerText = score;\n      //     scoreSpan.className = \"scoreSpan\";\n\n      let blob = new Blob([narcissus], {\n        type: 'image/svg+xml'\n      });\n      let url = URL.createObjectURL(blob);\n      let image = document.createElement('svg');\n      image.src = url;\n      image.className = \"narcissus\";\n      image.addEventListener('load', () => URL.revokeObjectURL(url), {\n        once: true\n      });\n      mainRef.current.appendChild(image); // mainRef.current.appendChild(scoreSpan);\n      // mainRef.current.innerHTML = narcissus;\n    }\n  }\n\n  useLayoutEffect(() => {\n    console.log('triggered score update');\n    updateScore(); // Clean up\n\n    return () => {\n      var spans = document.getElementsByClassName('scoreSpan');\n\n      for (let span of spans) {\n        span.remove();\n      }\n    };\n  }, [score]);\n  useLayoutEffect(() => {\n    console.log('triggered image update');\n    updateImage(); // Clean up\n\n    return () => {\n      console.log(\"clean up\"); // mainRef.current.innerHTML = null\n      // let narci = document.getElementsByClassName('narcissus')\n      // for ( let n of narci ) {\n      //   n.remove()\n      // }\n    };\n  }, [narcissus]); // function setImage () {\n  //   let svgImage = document.createElement('div')\n  //       svgImage.innerText = narcissus;\n  //       svgImage.className = \"narcissus\";\n  //   document.getElementById('root').appendChild(svgImage);\n  // }\n\n  /* -- Functions -- */\n\n  const init = async () => {\n    // should add the following flower to the view, replacing the loading icon\n    let correctFreezeFrame = await getCorrectFreezeFrame();\n    console.log('setting frame', correctFreezeFrame); // await setGif(correctFreezeFrame);\n\n    await setSVG(correctFreezeFrame);\n    return {\n      state,\n      id\n    };\n  };\n\n  async function getData(url) {\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getCorrectFreezeFrame() {\n    try {\n      var oid = window.location.pathname.split('/')[1] || '1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo'; // console.log('got oid', oid)\n      // var nft_state = await ktools.readNftState(oid);\n\n      var nft_state = await getData('https://arweave.net/1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo'); // var koii_state = await ktools.getContractState();\n\n      var koii_state = await getData('https://arweave.net/cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc'); // contract state\n\n      let current = nft_state.decay.lockState || 0;\n      let lockBlock = nft_state.decay.lastLock;\n      let list = koii_state.stateUpdate.trafficLogs.rewardReport;\n      let newScore; // this will contain the output\n      // looping variables\n\n      let change = 0;\n      let max = nft_state.decay.lastMax || 1;\n      let scalar = 1;\n      let last = 0;\n      let lastMax = 0;\n      let i = 0;\n\n      for (var item of list) {\n        // console.log('checking', i, 'change is ', change)\n        if (item.dailyTrafficBlock > lockBlock) {\n          if (typeof item.logsSummary && Object.keys(item.logsSummary).includes(oid)) {\n            let aScore = item.logsSummary[oid];\n\n            if (aScore < max) {\n              if (last === i - 1) {\n                // if we are on a streak, incremement the scalar\n                scalar = scalar + scalar;\n              }\n\n              if (i - 10 < lastMax) {\n                // we are in a recovery slump, so the scalar is negative now\n                scalar = -1 * scalar;\n              } // increment the adjustment \n\n\n              change = change + aScore * (1 + scalar / 100);\n            } else {\n              // if we have a new max we get a major boost\n              max = aScore;\n              lastMax = i;\n              change = change + 10000;\n            }\n\n            last = i;\n          }\n        }\n\n        i = i + 1;\n      }\n\n      if (change < 1) {\n        // return current;\n        console.log('returning current', current);\n        newScore = current; // return 200;\n      } else {\n        // return current + change;\n        let remainder = totalFrames - current; // the maximum score adjustment we can give (total frames less current score)\n\n        newScore = remainder * (10001 - change);\n\n        if (newScore > totalFrames) {\n          newScore = totalFrames;\n        } else if (newScore < 0) {\n          newScore = 0;\n        }\n      } // newScore = 200; // enable to check gif scrolling locally\n\n\n      console.log('newScore is', newScore);\n      setScore(newScore);\n      return newScore;\n    } catch (err) {\n      console.log('error loading nft data', err);\n      setScore(1);\n      return 1;\n    }\n  } // async function setGif(frameToSet) {\n  //   return new Promise(function (resolve, reject) {\n  //     try {\n  //       gifFrames({ url: \"./img/narcissus.gif\", frames: \"0-1000\", outputType: \"canvas\" })\n  //         .then(function (frameData) {\n  //           // console.log('setting frame', frameToSet, frameData[frameToSet])\n  //           let obj = frameData[frameToSet].getImage();\n  //           setNarcissus(obj);\n  //           setLoading(false);\n  //           resolve(frameData);\n  //         })\n  //         .catch(console.error.bind(console));\n  //     } catch (err) {\n  //       console.log(\"err\", err);\n  //       reject(err);\n  //     }\n  //   });\n  // }\n\n\n  async function setSVG(frameToSet) {\n    console.log('setSVG');\n    return new Promise(function (resolve, reject) {\n      try {\n        // console.log('narcissus', flower.length)\n        let obj = \"\";\n        let index = 0;\n        obj = obj + getSVGContents(flower[index]); // do {\n        //   obj = obj + getSVGContents(flower[index])\n        //   index = index + 1;\n        //   // console.log(index)\n        // } while (index < frameToSet)\n        // console.log('about to set narcissus', obj)\n\n        console.log('about to set narcissus', typeof obj);\n        setNarcissus(obj); // setLoading(false);\n        // setImage(obj)\n\n        resolve(obj);\n      } catch (err) {\n        console.log(\"err\", err);\n        reject(err);\n      }\n    });\n  }\n\n  function getSVGContents(inputString) {\n    let domParser = new DOMParser();\n    let svgDOM = domParser.parseFromString(inputString, 'text/xml').getElementsByTagName('svg')[0];\n    return svgDOM.innerHTML;\n  } // const renderImage = () => {\n  //   // console.log(canvas, typeof(canvas), JSON.stringify(canvas))\n  //   // for ( let child of mainRef.current.children ) {\n  //   //   child.delete()\n  //   // }\n  //   console.log('CANVAAS', canvas, typeof(canvas))\n  //   let copy = canvas.cloneNode(true)\n  //   mainRef.current.insertAdjacentElement('afterbegin', copy)\n  // }\n\n\n  useEffect(() => {\n    init();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        ref: mainRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7LtgE5mxydNtYJDNgMEuqsu6THM=\");\n\n_c = App;\nexport default App; // need to fetch the attention logs from koi state\n// then, iterate over the logs and sum the total attention\n// then, check the last time the nft was updated\n// then, check the nft's decay from it's state.decay\n// then, increment counters based on the difference of current block height and the block height at last adjustment\n// then, adjust the 'durability' score\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/src/App.js"],"names":["React","useState","useEffect","useLayoutEffect","useRef","kweb","axios","media","ktools","Web","console","log","state","id","totalFrames","App","narcissus","setNarcissus","loading","setLoading","score","setScore","mainRef","flower","updateScore","current","scoreSpan","document","createElement","innerText","className","appendChild","updateImage","blob","Blob","type","url","URL","createObjectURL","image","src","addEventListener","revokeObjectURL","once","spans","getElementsByClassName","span","remove","init","correctFreezeFrame","getCorrectFreezeFrame","setSVG","getData","response","get","data","error","oid","window","location","pathname","split","nft_state","koii_state","decay","lockState","lockBlock","lastLock","list","stateUpdate","trafficLogs","rewardReport","newScore","change","max","lastMax","scalar","last","i","item","dailyTrafficBlock","logsSummary","Object","keys","includes","aScore","remainder","err","frameToSet","Promise","resolve","reject","obj","index","getSVGContents","inputString","domParser","DOMParser","svgDOM","parseFromString","getElementsByTagName","innerHTML"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect, useRef } from \"react\";\n\nimport * as kweb from \"@_koi/sdk/web\";\n// import gifFrames from \"gif-frames\";\nimport axios from 'axios';\nimport media from \"./narcissus.json\";\n\n// import SmartWeave from \"smartweave\";\n\nimport \"./App.css\";\n\n// console.log('narcissus', media, media.length)\nconst ktools = new kweb.Web();\n\nconsole.log(\"ktools\", ktools);\n\nlet state;\nlet id;\n// let koii;\nlet totalFrames = 225;\n\nfunction App() {\n  const [narcissus, setNarcissus] = useState(<canvas></canvas>);\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  // const [canvas, setCanvas] = useState(<canvas></canvas>);\n  const mainRef = useRef(null)\n  const flower = media;\n\n  const updateScore = () => {\n    console.log(\"useEffect score\", mainRef, 'score is', score);\n    if (!mainRef.current) {\n      console.log('not updating score because', mainRef.current)\n      // setTimeout(updateScore, 1000)\n      return;\n    } else {\n      let scoreSpan = document.createElement('span')\n          scoreSpan.innerText = score;\n          scoreSpan.className = \"scoreSpan\"\n        \n      mainRef.current.appendChild(scoreSpan);\n    }\n  }\n\n  function updateImage () {\n    console.log(\"update narcissus\", mainRef);\n    if (!mainRef.current) {\n      // let filler = document.createElement('div');\n      //     filler.className = \"filler\";\n      // mainRef.current.appendChild(filler)\n      console.log('not updating narcissus because', mainRef.current)\n      // setTimeout(updateImage, 1000)\n      return;\n    } else {\n      console.log('about to append because main is', mainRef.current, narcissus)\n      // let scoreSpan = document.createElement('span')\n      //     scoreSpan.innerText = score;\n      //     scoreSpan.className = \"scoreSpan\";\n      let blob = new Blob([narcissus], {type: 'image/svg+xml'});\n      let url = URL.createObjectURL(blob);\n      let image = document.createElement('svg');\n          image.src = url;\n          image.className = \"narcissus\"\n      image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true});\n\n\n      mainRef.current.appendChild(image);\n      // mainRef.current.appendChild(scoreSpan);\n      // mainRef.current.innerHTML = narcissus;\n    }\n  }\n\n  useLayoutEffect(() => {\n    console.log('triggered score update')\n    updateScore();\n\n    // Clean up\n    return () => {\n      var spans = document.getElementsByClassName('scoreSpan')\n      for ( let span of spans ) {\n        span.remove()\n      }\n    };\n  }, [score]);\n\n  \n  useLayoutEffect(() => {\n    console.log('triggered image update')\n    updateImage();\n\n    // Clean up\n    return () => {\n      console.log(\"clean up\");\n      // mainRef.current.innerHTML = null\n      // let narci = document.getElementsByClassName('narcissus')\n      // for ( let n of narci ) {\n      //   n.remove()\n      // }\n\n    };\n  }, [narcissus]);\n\n  // function setImage () {\n  //   let svgImage = document.createElement('div')\n  //       svgImage.innerText = narcissus;\n  //       svgImage.className = \"narcissus\";\n      \n  //   document.getElementById('root').appendChild(svgImage);\n  // }\n\n  /* -- Functions -- */\n\n  const init = async () => {\n    // should add the following flower to the view, replacing the loading icon\n    let correctFreezeFrame = await getCorrectFreezeFrame()\n    console.log('setting frame', correctFreezeFrame)\n    // await setGif(correctFreezeFrame);\n    await setSVG(correctFreezeFrame)\n    return { state, id };\n  };\n\n  async function getData (url) {\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getCorrectFreezeFrame() {\n    try {\n      var oid = (window.location.pathname).split('/')[1] || '1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo';\n      // console.log('got oid', oid)\n      // var nft_state = await ktools.readNftState(oid);\n      var nft_state = await getData('https://arweave.net/1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo')\n      \n      // var koii_state = await ktools.getContractState();\n      var koii_state = await getData('https://arweave.net/cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc');\n\n      // contract state\n      let current = nft_state.decay.lockState || 0;\n      let lockBlock = nft_state.decay.lastLock;\n      let list = koii_state.stateUpdate.trafficLogs.rewardReport;\n      let newScore; // this will contain the output\n\n      // looping variables\n      let change = 0;\n      let max = nft_state.decay.lastMax || 1;\n      let scalar = 1;\n      let last = 0;\n      let lastMax = 0;\n      let i = 0;\n\n      for ( var item of list ) {\n        // console.log('checking', i, 'change is ', change)\n        if ( item.dailyTrafficBlock > lockBlock ) { \n            if ( typeof(item.logsSummary) && Object.keys(item.logsSummary).includes(oid) ) {\n              let aScore = item.logsSummary[oid];\n              if ( aScore < max ) {\n                \n                if ( last === i - 1 ) {\n                  // if we are on a streak, incremement the scalar\n                  scalar = scalar + scalar;\n                }\n                \n                if ( ( i - 10 ) < lastMax ) {\n                  // we are in a recovery slump, so the scalar is negative now\n                  scalar = ( -1 ) * scalar;\n                }\n                \n                // increment the adjustment \n                change = change + aScore * ( 1 + scalar / 100 )\n\n              } else {\n                // if we have a new max we get a major boost\n                max = aScore;\n                lastMax = i;\n                change = change + 10000;\n              }\n              last = i;\n            }\n        }\n        i = i + 1;\n      }\n      \n      if (change < 1) {\n        // return current;\n        console.log('returning current', current)\n        newScore = current;\n        // return 200;\n      } else {\n        // return current + change;\n        let remainder = totalFrames - current; // the maximum score adjustment we can give (total frames less current score)\n        newScore = remainder * ( 10001 - change );\n        if ( newScore > totalFrames ) {\n          newScore = totalFrames;\n        } else if ( newScore < 0 ) {\n          newScore = 0;\n        }\n      }\n      // newScore = 200; // enable to check gif scrolling locally\n      console.log('newScore is', newScore)\n      setScore(newScore);\n      return newScore;\n    } catch (err) {\n      console.log('error loading nft data', err)\n      setScore(1)\n      return 1;\n    }\n  }\n\n  // async function setGif(frameToSet) {\n  //   return new Promise(function (resolve, reject) {\n  //     try {\n  //       gifFrames({ url: \"./img/narcissus.gif\", frames: \"0-1000\", outputType: \"canvas\" })\n  //         .then(function (frameData) {\n  //           // console.log('setting frame', frameToSet, frameData[frameToSet])\n  //           let obj = frameData[frameToSet].getImage();\n  //           setNarcissus(obj);\n  //           setLoading(false);\n  //           resolve(frameData);\n  //         })\n  //         .catch(console.error.bind(console));\n  //     } catch (err) {\n  //       console.log(\"err\", err);\n  //       reject(err);\n  //     }\n  //   });\n  // }\n\n  async function setSVG(frameToSet) {\n    console.log('setSVG')\n    return new Promise(function (resolve, reject) {\n      try {\n        // console.log('narcissus', flower.length)\n        let obj = \"\";\n        let index = 0;\n        obj = obj + getSVGContents(flower[index])\n        // do {\n\n        //   obj = obj + getSVGContents(flower[index])\n\n        //   index = index + 1;\n        //   // console.log(index)\n        // } while (index < frameToSet)\n        // console.log('about to set narcissus', obj)\n        console.log('about to set narcissus', typeof(obj))\n        setNarcissus(obj);\n        // setLoading(false);\n        // setImage(obj)\n        resolve(obj);\n      } catch (err) {\n        console.log(\"err\", err);\n        reject(err);\n      }\n    });\n  }\n\n  function getSVGContents(inputString){\n      let domParser = new DOMParser();\n      let svgDOM = domParser.parseFromString(inputString, 'text/xml')\n          .getElementsByTagName('svg')[0];\n      return svgDOM.innerHTML\n  }\n  // const renderImage = () => {\n\n  //   // console.log(canvas, typeof(canvas), JSON.stringify(canvas))\n\n  //   // for ( let child of mainRef.current.children ) {\n  //   //   child.delete()\n  //   // }\n\n  //   console.log('CANVAAS', canvas, typeof(canvas))\n\n  //   let copy = canvas.cloneNode(true)\n\n  //   mainRef.current.insertAdjacentElement('afterbegin', copy)\n  // }\n\n  useEffect(() => {\n    init();\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      {/* {loading && (\n        // <img alt=\"this is the loading icon\" src={window.location.origin + \"/img/narcissus.gif\"} />\n      )} */}\n      {/* {!loading && ( */}\n        <React.Fragment>\n          <header></header>\n          <main ref={mainRef}>\n          </main>\n        </React.Fragment>\n      {/* )} */}\n    </div>\n  );\n\n}\n\nexport default App;\n\n// need to fetch the attention logs from koi state\n// then, iterate over the logs and sum the total attention\n// then, check the last time the nft was updated\n// then, check the nft's decay from it's state.decay\n// then, increment counters based on the difference of current block height and the block height at last adjustment\n// then, adjust the 'durability' score\n"]},"metadata":{},"sourceType":"module"}