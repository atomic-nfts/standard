{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactRead = exports.interactWriteDryRunCustom = exports.interactWriteDryRun = exports.simulateInteractWrite = exports.interactWrite = void 0;\n\nvar contract_load_1 = require(\"./contract-load\");\n\nvar contract_read_1 = require(\"./contract-read\");\n\nvar contract_step_1 = require(\"./contract-step\");\n\nvar utils_1 = require(\"./utils\");\n\nvar errors_1 = __importDefault(require(\"./errors\"));\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\n\nfunction interactWrite(arweave, wallet, contractId, input) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var interactionTx, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n\n          case 2:\n            interactionTx = _context.sent;\n            _context.next = 5;\n            return arweave.transactions.post(interactionTx);\n\n          case 5:\n            response = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 8:\n            return _context.abrupt(\"return\", interactionTx.id);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.interactWrite = interactWrite;\n/**\n * Simulates an interaction on the blockchain and returns the simulated transaction.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction simulateInteractWrite(arweave, wallet, contractId, input) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var interactionTx;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n\n          case 2:\n            interactionTx = _context2.sent;\n            return _context2.abrupt(\"return\", interactionTx);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.simulateInteractWrite = simulateInteractWrite;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\n\nfunction interactWriteDryRun(arweave, wallet, contractId, input) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  var myState = arguments.length > 7 ? arguments[7] : undefined;\n  var fromParam = arguments.length > 8 ? arguments[8] : undefined;\n  var contractInfoParam = arguments.length > 9 ? arguments[9] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _ref, handler, swGlobal, contractSrc, latestState, from, settings, evolve, canEvolve, contractInfo, error, interaction, tx, ts, currentBlock;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = contractInfoParam;\n\n            if (_context3.t0) {\n              _context3.next = 5;\n              break;\n            }\n\n            _context3.next = 4;\n            return contract_load_1.loadContract(arweave, contractId);\n\n          case 4:\n            _context3.t0 = _context3.sent;\n\n          case 5:\n            _ref = _context3.t0;\n            handler = _ref.handler;\n            swGlobal = _ref.swGlobal;\n            contractSrc = _ref.contractSrc;\n            _context3.t1 = myState;\n\n            if (_context3.t1) {\n              _context3.next = 14;\n              break;\n            }\n\n            _context3.next = 13;\n            return contract_read_1.readContract(arweave, contractId);\n\n          case 13:\n            _context3.t1 = _context3.sent;\n\n          case 14:\n            latestState = _context3.t1;\n            _context3.t2 = fromParam;\n\n            if (_context3.t2) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 19;\n            return arweave.wallets.getAddress(wallet);\n\n          case 19:\n            _context3.t2 = _context3.sent;\n\n          case 20:\n            from = _context3.t2;\n            settings = latestState.settings ? new Map(latestState.settings) : new Map();\n            evolve = latestState.evolve || settings.get('evolve');\n            canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n            if (canEvolve === undefined || canEvolve === null) {\n              canEvolve = true;\n            }\n\n            if (!(evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve)) {\n              _context3.next = 38;\n              break;\n            }\n\n            if (!(contractSrc !== latestState.evolve)) {\n              _context3.next = 38;\n              break;\n            }\n\n            _context3.prev = 27;\n            _context3.next = 30;\n            return contract_load_1.loadContract(arweave, contractId, evolve);\n\n          case 30:\n            contractInfo = _context3.sent;\n            handler = contractInfo.handler;\n            _context3.next = 38;\n            break;\n\n          case 34:\n            _context3.prev = 34;\n            _context3.t3 = _context3[\"catch\"](27);\n            error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n            /* CONTRACT_NOT_FOUND */\n            , {\n              message: \"Contract having txId: \".concat(contractId, \" not found\"),\n              requestedTxId: contractId\n            });\n            throw error;\n\n          case 38:\n            interaction = {\n              input: input,\n              caller: from\n            };\n            _context3.next = 41;\n            return createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n\n          case 41:\n            tx = _context3.sent;\n            ts = utils_1.unpackTags(tx);\n            _context3.next = 45;\n            return arweave.blocks.getCurrent();\n\n          case 45:\n            currentBlock = _context3.sent;\n            swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n            _context3.next = 49;\n            return contract_step_1.execute(handler, interaction, latestState);\n\n          case 49:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 50:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[27, 34]]);\n  }));\n}\n\nexports.interactWriteDryRun = interactWriteDryRun;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param tx            a signed transaction\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\n\nfunction interactWriteDryRunCustom(arweave, tx, contractId, input, myState) {\n  var fromParam = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var contractInfoParam = arguments.length > 6 ? arguments[6] : undefined;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _ref2, handler, swGlobal, contractSrc, latestState, from, settings, evolve, canEvolve, contractInfo, error, interaction, ts, currentBlock;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.t0 = contractInfoParam;\n\n            if (_context4.t0) {\n              _context4.next = 5;\n              break;\n            }\n\n            _context4.next = 4;\n            return contract_load_1.loadContract(arweave, contractId);\n\n          case 4:\n            _context4.t0 = _context4.sent;\n\n          case 5:\n            _ref2 = _context4.t0;\n            handler = _ref2.handler;\n            swGlobal = _ref2.swGlobal;\n            contractSrc = _ref2.contractSrc;\n            _context4.t1 = myState;\n\n            if (_context4.t1) {\n              _context4.next = 14;\n              break;\n            }\n\n            _context4.next = 13;\n            return contract_read_1.readContract(arweave, contractId);\n\n          case 13:\n            _context4.t1 = _context4.sent;\n\n          case 14:\n            latestState = _context4.t1;\n            from = fromParam;\n            settings = latestState.settings ? new Map(latestState.settings) : new Map();\n            evolve = latestState.evolve || settings.get('evolve');\n            canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n            if (canEvolve === undefined || canEvolve === null) {\n              canEvolve = true;\n            }\n\n            if (!(evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve)) {\n              _context4.next = 33;\n              break;\n            }\n\n            if (!(contractSrc !== latestState.evolve)) {\n              _context4.next = 33;\n              break;\n            }\n\n            _context4.prev = 22;\n            _context4.next = 25;\n            return contract_load_1.loadContract(arweave, contractId, evolve);\n\n          case 25:\n            contractInfo = _context4.sent;\n            handler = contractInfo.handler;\n            _context4.next = 33;\n            break;\n\n          case 29:\n            _context4.prev = 29;\n            _context4.t2 = _context4[\"catch\"](22);\n            error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n            /* CONTRACT_NOT_FOUND */\n            , {\n              message: \"Contract having txId: \".concat(contractId, \" not found\"),\n              requestedTxId: contractId\n            });\n            throw error;\n\n          case 33:\n            interaction = {\n              input: input,\n              caller: from\n            };\n            ts = utils_1.unpackTags(tx);\n            _context4.next = 37;\n            return arweave.blocks.getCurrent();\n\n          case 37:\n            currentBlock = _context4.sent;\n            swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n            _context4.next = 41;\n            return contract_step_1.execute(handler, interaction, latestState);\n\n          case 41:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 42:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[22, 29]]);\n  }));\n}\n\nexports.interactWriteDryRunCustom = interactWriteDryRunCustom;\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\n\nfunction interactRead(arweave, wallet, contractId, input) {\n  var tags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var _yield$contract_load_, handler, swGlobal, contractSrc, latestState, from, settings, evolve, canEvolve, contractInfo, error, interaction, tx, ts, currentBlock, result;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return contract_load_1.loadContract(arweave, contractId);\n\n          case 2:\n            _yield$contract_load_ = _context5.sent;\n            handler = _yield$contract_load_.handler;\n            swGlobal = _yield$contract_load_.swGlobal;\n            contractSrc = _yield$contract_load_.contractSrc;\n            _context5.next = 8;\n            return contract_read_1.readContract(arweave, contractId);\n\n          case 8:\n            latestState = _context5.sent;\n\n            if (!wallet) {\n              _context5.next = 15;\n              break;\n            }\n\n            _context5.next = 12;\n            return arweave.wallets.getAddress(wallet);\n\n          case 12:\n            _context5.t0 = _context5.sent;\n            _context5.next = 16;\n            break;\n\n          case 15:\n            _context5.t0 = '';\n\n          case 16:\n            from = _context5.t0;\n            settings = latestState.settings ? new Map(latestState.settings) : new Map();\n            evolve = latestState.evolve || settings.get('evolve');\n            canEvolve = latestState.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n            if (canEvolve === undefined || canEvolve === null) {\n              canEvolve = true;\n            }\n\n            if (!(evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve)) {\n              _context5.next = 34;\n              break;\n            }\n\n            if (!(contractSrc !== latestState.evolve)) {\n              _context5.next = 34;\n              break;\n            }\n\n            _context5.prev = 23;\n            _context5.next = 26;\n            return contract_load_1.loadContract(arweave, contractId, evolve);\n\n          case 26:\n            contractInfo = _context5.sent;\n            handler = contractInfo.handler;\n            _context5.next = 34;\n            break;\n\n          case 30:\n            _context5.prev = 30;\n            _context5.t1 = _context5[\"catch\"](23);\n            error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n            /* CONTRACT_NOT_FOUND */\n            , {\n              message: \"Contract having txId: \".concat(contractId, \" not found\"),\n              requestedTxId: contractId\n            });\n            throw error;\n\n          case 34:\n            interaction = {\n              input: input,\n              caller: from\n            };\n            _context5.next = 37;\n            return createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n\n          case 37:\n            tx = _context5.sent;\n            ts = utils_1.unpackTags(tx);\n            _context5.next = 41;\n            return arweave.blocks.getCurrent();\n\n          case 41:\n            currentBlock = _context5.sent;\n            swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n            _context5.next = 45;\n            return contract_step_1.execute(handler, interaction, latestState);\n\n          case 45:\n            result = _context5.sent;\n            return _context5.abrupt(\"return\", result.result);\n\n          case 47:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[23, 30]]);\n  }));\n}\n\nexports.interactRead = interactRead;\n\nfunction createTx(arweave, wallet, contractId, input, tags) {\n  var target = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var winstonQty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '0';\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var options, interactionTx, _iterator, _step, tag;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            options = {\n              data: Math.random().toString().slice(-4)\n            };\n\n            if (target && target.length) {\n              options.target = target.toString();\n\n              if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n              }\n            }\n\n            _context6.next = 4;\n            return arweave.createTransaction(options, wallet);\n\n          case 4:\n            interactionTx = _context6.sent;\n\n            if (input) {\n              _context6.next = 7;\n              break;\n            }\n\n            throw new Error(\"Input should be a truthy value: \".concat(JSON.stringify(input)));\n\n          case 7:\n            if (tags && tags.length) {\n              _iterator = _createForOfIteratorHelper(tags);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  tag = _step.value;\n                  interactionTx.addTag(tag.name.toString(), tag.value.toString());\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            interactionTx.addTag('App-Name', 'SmartWeaveAction');\n            interactionTx.addTag('App-Version', '0.3.0');\n            interactionTx.addTag('Contract', contractId);\n            interactionTx.addTag('Input', JSON.stringify(input));\n            _context6.next = 14;\n            return arweave.transactions.sign(interactionTx, wallet);\n\n          case 14:\n            return _context6.abrupt(\"return\", interactionTx);\n\n          case 15:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n}\n\nfunction createDummyTx(tx, from, tags, block) {\n  return {\n    id: tx.id,\n    owner: {\n      address: from\n    },\n    recipient: tx.target,\n    tags: tags,\n    fee: {\n      winston: tx.reward\n    },\n    quantity: {\n      winston: tx.quantity\n    },\n    block: {\n      id: block.indep_hash,\n      height: block.height,\n      timestamp: block.timestamp\n    }\n  };\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/smartweave/lib/contract-interact.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","interactRead","interactWriteDryRunCustom","interactWriteDryRun","simulateInteractWrite","interactWrite","contract_load_1","require","contract_read_1","contract_step_1","utils_1","errors_1","arweave","wallet","contractId","input","tags","target","winstonQty","createTx","interactionTx","transactions","post","response","status","id","myState","fromParam","contractInfoParam","loadContract","handler","swGlobal","contractSrc","readContract","latestState","wallets","getAddress","from","settings","Map","evolve","get","canEvolve","undefined","test","contractInfo","error","default","message","requestedTxId","interaction","caller","tx","ts","unpackTags","blocks","getCurrent","currentBlock","_activeTx","createDummyTx","execute","options","data","Math","random","toString","slice","length","quantity","createTransaction","Error","JSON","stringify","tag","addTag","name","sign","block","owner","address","recipient","fee","winston","reward","indep_hash","height","timestamp"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.interactRead = exports.interactWriteDryRunCustom = exports.interactWriteDryRun = exports.simulateInteractWrite = exports.interactWrite = void 0;\nconst contract_load_1 = require(\"./contract-load\");\nconst contract_read_1 = require(\"./contract-read\");\nconst contract_step_1 = require(\"./contract-step\");\nconst utils_1 = require(\"./utils\");\nconst errors_1 = __importDefault(require(\"./errors\"));\n/**\n * Writes an interaction on the blockchain.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction interactWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const response = yield arweave.transactions.post(interactionTx);\n        if (response.status !== 200)\n            return null;\n        return interactionTx.id;\n    });\n}\nexports.interactWrite = interactWrite;\n/**\n * Simulates an interaction on the blockchain and returns the simulated transaction.\n *\n * This simply creates an interaction tx and posts it.\n * It does not need to know the current state of the contract.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input, will be serialized as Json.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction simulateInteractWrite(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const interactionTx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        return interactionTx;\n    });\n}\nexports.simulateInteractWrite = simulateInteractWrite;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\nfunction interactWriteDryRun(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '', myState, fromParam, contractInfoParam) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n        const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n        const from = fromParam || (yield arweave.wallets.getAddress(wallet));\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        return yield contract_step_1.execute(handler, interaction, latestState);\n    });\n}\nexports.interactWriteDryRun = interactWriteDryRun;\n/**\n * This will load a contract to its latest state, and do a dry run of an interaction,\n * without writing anything to the chain.\n *\n * @param arweave       an Arweave client instance\n * @param tx            a signed transaction\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param myState       a locally-generated state variable\n * @param fromParam     The from address of the transaction\n * @param contractInfoParam The loaded contract\n */\nfunction interactWriteDryRunCustom(arweave, tx, contractId, input, myState, fromParam = {}, contractInfoParam) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = contractInfoParam || (yield contract_load_1.loadContract(arweave, contractId));\n        const latestState = myState || (yield contract_read_1.readContract(arweave, contractId));\n        const from = fromParam;\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        return yield contract_step_1.execute(handler, interaction, latestState);\n    });\n}\nexports.interactWriteDryRunCustom = interactWriteDryRunCustom;\n/**\n * This will load a contract to its latest state, and execute a read interaction that\n * does not change any state.\n *\n * @param arweave       an Arweave client instance\n * @param wallet        a wallet private or public key\n * @param contractId    the Transaction Id of the contract\n * @param input         the interaction input.\n * @param tags          an array of tags with name/value as objects.\n * @param target        if needed to send AR to an address, this is the target.\n * @param winstonQty    amount of winston to send to the target, if needed.\n */\nfunction interactRead(arweave, wallet, contractId, input, tags = [], target = '', winstonQty = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal, contractSrc } = yield contract_load_1.loadContract(arweave, contractId);\n        const latestState = yield contract_read_1.readContract(arweave, contractId);\n        const from = wallet ? yield arweave.wallets.getAddress(wallet) : '';\n        const settings = latestState.settings ? new Map(latestState.settings) : new Map();\n        const evolve = latestState.evolve || settings.get('evolve');\n        let canEvolve = latestState.canEvolve || settings.get('canEvolve');\n        // By default, contracts can evolve if there's not an explicit `false`.\n        if (canEvolve === undefined || canEvolve === null) {\n            canEvolve = true;\n        }\n        if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n            if (contractSrc !== latestState.evolve) {\n                try {\n                    const contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                    handler = contractInfo.handler;\n                }\n                catch (e) {\n                    const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                        message: `Contract having txId: ${contractId} not found`,\n                        requestedTxId: contractId,\n                    });\n                    throw error;\n                }\n            }\n        }\n        const interaction = {\n            input,\n            caller: from,\n        };\n        const tx = yield createTx(arweave, wallet, contractId, input, tags, target, winstonQty);\n        const ts = utils_1.unpackTags(tx);\n        const currentBlock = yield arweave.blocks.getCurrent();\n        swGlobal._activeTx = createDummyTx(tx, from, ts, currentBlock);\n        const result = yield contract_step_1.execute(handler, interaction, latestState);\n        return result.result;\n    });\n}\nexports.interactRead = interactRead;\nfunction createTx(arweave, wallet, contractId, input, tags, target = '', winstonQty = '0') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const options = {\n            data: Math.random().toString().slice(-4),\n        };\n        if (target && target.length) {\n            options.target = target.toString();\n            if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n            }\n        }\n        const interactionTx = yield arweave.createTransaction(options, wallet);\n        if (!input) {\n            throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                interactionTx.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        interactionTx.addTag('App-Name', 'SmartWeaveAction');\n        interactionTx.addTag('App-Version', '0.3.0');\n        interactionTx.addTag('Contract', contractId);\n        interactionTx.addTag('Input', JSON.stringify(input));\n        yield arweave.transactions.sign(interactionTx, wallet);\n        return interactionTx;\n    });\n}\nfunction createDummyTx(tx, from, tags, block) {\n    return {\n        id: tx.id,\n        owner: {\n            address: from,\n        },\n        recipient: tx.target,\n        tags,\n        fee: {\n            winston: tx.reward,\n        },\n        quantity: {\n            winston: tx.quantity,\n        },\n        block: {\n            id: block.indep_hash,\n            height: block.height,\n            timestamp: block.timestamp,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}