{"ast":null,"code":"import rsa from 'node-forge/lib/rsa';\nimport pify from 'pify';\nimport createPrng from '../utils/prng';\nimport disableWorker from '../utils/disable-worker';\nconst forgeGenerateKeyPair = pify(rsa.generateKeyPair);\nconst defaultParams = {\n  modulusLength: 2048,\n  publicExponent: 65537,\n  method: 'PRIMEINC'\n};\n\nconst parseForgePrivateKey = privateKey => {\n  const {\n    n,\n    e,\n    d,\n    p,\n    q,\n    dP,\n    dQ,\n    qInv\n  } = privateKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue(),\n    privateExponent: new Uint8Array(d.toByteArray()),\n    prime1: new Uint8Array(p.toByteArray()),\n    prime2: new Uint8Array(q.toByteArray()),\n    exponent1: new Uint8Array(dP.toByteArray()),\n    exponent2: new Uint8Array(dQ.toByteArray()),\n    coefficient: new Uint8Array(qInv.toByteArray())\n  };\n};\n\nconst parseForgePublicKey = publicKey => {\n  const {\n    n,\n    e\n  } = publicKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue()\n  };\n};\n\nconst generateKeyPair = async (params, seed) => {\n  const {\n    modulusLength,\n    publicExponent,\n    method\n  } = params;\n  const restoreWorker = disableWorker();\n  const {\n    privateKey,\n    publicKey\n  } = await forgeGenerateKeyPair(modulusLength, publicExponent, {\n    prng: createPrng(seed),\n    algorithm: method\n  });\n  restoreWorker();\n  return {\n    privateKey: parseForgePrivateKey(privateKey),\n    publicKey: parseForgePublicKey(publicKey)\n  };\n};\n\nexport { generateKeyPair, defaultParams };","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/human-crypto-keys/es/keys/rsa.js"],"names":["rsa","pify","createPrng","disableWorker","forgeGenerateKeyPair","generateKeyPair","defaultParams","modulusLength","publicExponent","method","parseForgePrivateKey","privateKey","n","e","d","p","q","dP","dQ","qInv","modulus","Uint8Array","toByteArray","intValue","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","parseForgePublicKey","publicKey","params","seed","restoreWorker","prng","algorithm"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,oBAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,MAAMC,oBAAoB,GAAGH,IAAI,CAACD,GAAG,CAACK,eAAL,CAAjC;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,aAAa,EAAE,IADK;AAEpBC,EAAAA,cAAc,EAAE,KAFI;AAGpBC,EAAAA,MAAM,EAAE;AAHY,CAAtB;;AAMA,MAAMC,oBAAoB,GAAGC,UAAU,IAAI;AACzC,QAAM;AACJC,IAAAA,CADI;AAEJC,IAAAA,CAFI;AAGJC,IAAAA,CAHI;AAIJC,IAAAA,CAJI;AAKJC,IAAAA,CALI;AAMJC,IAAAA,EANI;AAOJC,IAAAA,EAPI;AAQJC,IAAAA;AARI,MASFR,UATJ;AAUA,SAAO;AACLS,IAAAA,OAAO,EAAE,IAAIC,UAAJ,CAAeT,CAAC,CAACU,WAAF,EAAf,CADJ;AAELd,IAAAA,cAAc,EAAEK,CAAC,CAACU,QAAF,EAFX;AAGLC,IAAAA,eAAe,EAAE,IAAIH,UAAJ,CAAeP,CAAC,CAACQ,WAAF,EAAf,CAHZ;AAILG,IAAAA,MAAM,EAAE,IAAIJ,UAAJ,CAAeN,CAAC,CAACO,WAAF,EAAf,CAJH;AAKLI,IAAAA,MAAM,EAAE,IAAIL,UAAJ,CAAeL,CAAC,CAACM,WAAF,EAAf,CALH;AAMLK,IAAAA,SAAS,EAAE,IAAIN,UAAJ,CAAeJ,EAAE,CAACK,WAAH,EAAf,CANN;AAOLM,IAAAA,SAAS,EAAE,IAAIP,UAAJ,CAAeH,EAAE,CAACI,WAAH,EAAf,CAPN;AAQLO,IAAAA,WAAW,EAAE,IAAIR,UAAJ,CAAeF,IAAI,CAACG,WAAL,EAAf;AARR,GAAP;AAUD,CArBD;;AAuBA,MAAMQ,mBAAmB,GAAGC,SAAS,IAAI;AACvC,QAAM;AACJnB,IAAAA,CADI;AAEJC,IAAAA;AAFI,MAGFkB,SAHJ;AAIA,SAAO;AACLX,IAAAA,OAAO,EAAE,IAAIC,UAAJ,CAAeT,CAAC,CAACU,WAAF,EAAf,CADJ;AAELd,IAAAA,cAAc,EAAEK,CAAC,CAACU,QAAF;AAFX,GAAP;AAID,CATD;;AAWA,MAAMlB,eAAe,GAAG,OAAO2B,MAAP,EAAeC,IAAf,KAAwB;AAC9C,QAAM;AACJ1B,IAAAA,aADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA;AAHI,MAIFuB,MAJJ;AAKA,QAAME,aAAa,GAAG/B,aAAa,EAAnC;AACA,QAAM;AACJQ,IAAAA,UADI;AAEJoB,IAAAA;AAFI,MAGF,MAAM3B,oBAAoB,CAACG,aAAD,EAAgBC,cAAhB,EAAgC;AAC5D2B,IAAAA,IAAI,EAAEjC,UAAU,CAAC+B,IAAD,CAD4C;AAE5DG,IAAAA,SAAS,EAAE3B;AAFiD,GAAhC,CAH9B;AAOAyB,EAAAA,aAAa;AACb,SAAO;AACLvB,IAAAA,UAAU,EAAED,oBAAoB,CAACC,UAAD,CAD3B;AAELoB,IAAAA,SAAS,EAAED,mBAAmB,CAACC,SAAD;AAFzB,GAAP;AAID,CAnBD;;AAqBA,SAAS1B,eAAT,EAA0BC,aAA1B","sourcesContent":["import rsa from 'node-forge/lib/rsa';\nimport pify from 'pify';\nimport createPrng from '../utils/prng';\nimport disableWorker from '../utils/disable-worker';\nconst forgeGenerateKeyPair = pify(rsa.generateKeyPair);\nconst defaultParams = {\n  modulusLength: 2048,\n  publicExponent: 65537,\n  method: 'PRIMEINC'\n};\n\nconst parseForgePrivateKey = privateKey => {\n  const {\n    n,\n    e,\n    d,\n    p,\n    q,\n    dP,\n    dQ,\n    qInv\n  } = privateKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue(),\n    privateExponent: new Uint8Array(d.toByteArray()),\n    prime1: new Uint8Array(p.toByteArray()),\n    prime2: new Uint8Array(q.toByteArray()),\n    exponent1: new Uint8Array(dP.toByteArray()),\n    exponent2: new Uint8Array(dQ.toByteArray()),\n    coefficient: new Uint8Array(qInv.toByteArray())\n  };\n};\n\nconst parseForgePublicKey = publicKey => {\n  const {\n    n,\n    e\n  } = publicKey;\n  return {\n    modulus: new Uint8Array(n.toByteArray()),\n    publicExponent: e.intValue()\n  };\n};\n\nconst generateKeyPair = async (params, seed) => {\n  const {\n    modulusLength,\n    publicExponent,\n    method\n  } = params;\n  const restoreWorker = disableWorker();\n  const {\n    privateKey,\n    publicKey\n  } = await forgeGenerateKeyPair(modulusLength, publicExponent, {\n    prng: createPrng(seed),\n    algorithm: method\n  });\n  restoreWorker();\n  return {\n    privateKey: parseForgePrivateKey(privateKey),\n    publicKey: parseForgePublicKey(publicKey)\n  };\n};\n\nexport { generateKeyPair, defaultParams };"]},"metadata":{},"sourceType":"module"}