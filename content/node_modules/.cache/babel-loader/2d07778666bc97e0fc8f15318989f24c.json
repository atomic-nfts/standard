{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar ndarray = require('ndarray');\n\nvar GifReader = require('omggif').GifReader;\n\nvar pack = require('ndarray-pack');\n\nvar through = require('through');\n\nvar parseDataURI = require('data-uri-to-buffer');\n\nfunction defaultImage(url, cb) {\n  var img = new Image();\n  img.crossOrigin = \"Anonymous\";\n\n  img.onload = function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    var context = canvas.getContext('2d');\n    context.drawImage(img, 0, 0);\n    var pixels = context.getImageData(0, 0, img.width, img.height);\n    cb(null, ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4 * img.width, 1], 0));\n  };\n\n  img.onerror = function (err) {\n    cb(err);\n  };\n\n  img.src = url;\n} //Animated gif loading\n\n\nfunction handleGif(data, cb) {\n  var reader;\n\n  try {\n    reader = new GifReader(data);\n  } catch (err) {\n    cb(err);\n    return;\n  }\n\n  if (reader.numFrames() > 0) {\n    var framesInfo = [];\n    var nshape = [reader.numFrames(), reader.height, reader.width, 4];\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2] * nshape[3]);\n    var result = ndarray(ndata, nshape);\n\n    try {\n      for (var i = 0; i < reader.numFrames(); ++i) {\n        reader.decodeAndBlitFrameRGBA(i, ndata.subarray(result.index(i, 0, 0, 0), result.index(i + 1, 0, 0, 0)));\n        framesInfo.push(reader.frameInfo(i));\n      }\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, result.transpose(0, 2, 1), framesInfo);\n  } else {\n    var nshape = [reader.height, reader.width, 4];\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2]);\n    var result = ndarray(ndata, nshape);\n\n    try {\n      reader.decodeAndBlitFrameRGBA(0, ndata);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, result.transpose(1, 0));\n  }\n}\n\nfunction httpGif(url, cb) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url, true);\n  xhr.responseType = 'arraybuffer';\n\n  if (xhr.overrideMimeType) {\n    xhr.overrideMimeType('application/binary');\n  }\n\n  xhr.onerror = function (err) {\n    cb(err);\n  };\n\n  xhr.onload = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var data = new Uint8Array(xhr.response);\n    handleGif(data, cb);\n    return;\n  };\n\n  xhr.send();\n}\n\nfunction copyBuffer(buffer) {\n  if (buffer[0] === undefined) {\n    var n = buffer.length;\n    var result = new Uint8Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      result[i] = buffer.get(i);\n    }\n\n    return result;\n  } else {\n    return new Uint8Array(buffer);\n  }\n}\n\nfunction dataGif(url, cb) {\n  process.nextTick(function () {\n    try {\n      var buffer = parseDataURI(url);\n\n      if (buffer) {\n        handleGif(copyBuffer(buffer), cb);\n      } else {\n        cb(new Error('Error parsing data URI'));\n      }\n    } catch (err) {\n      cb(err);\n    }\n  });\n}\n\nmodule.exports = function getPixels(url, type, cb) {\n  if (!cb) {\n    cb = type;\n    type = '';\n  }\n\n  var ext = path.extname(url);\n\n  switch (type || ext.toUpperCase()) {\n    case '.GIF':\n      httpGif(url, cb);\n      break;\n\n    default:\n      if (Buffer.isBuffer(url)) {\n        url = 'data:' + type + ';base64,' + url.toString('base64');\n      }\n\n      if (url.indexOf('data:image/gif;') === 0) {\n        dataGif(url, cb);\n      } else {\n        defaultImage(url, cb);\n      }\n\n  }\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/get-pixels-frame-info-update/dom-pixels.js"],"names":["path","require","ndarray","GifReader","pack","through","parseDataURI","defaultImage","url","cb","img","Image","crossOrigin","onload","canvas","document","createElement","width","height","context","getContext","drawImage","pixels","getImageData","Uint8Array","data","onerror","err","src","handleGif","reader","numFrames","framesInfo","nshape","ndata","result","i","decodeAndBlitFrameRGBA","subarray","index","push","frameInfo","transpose","httpGif","xhr","XMLHttpRequest","open","responseType","overrideMimeType","readyState","response","send","copyBuffer","buffer","undefined","n","length","get","dataGif","process","nextTick","Error","module","exports","getPixels","type","ext","extname","toUpperCase","Buffer","isBuffer","toString","indexOf"],"mappings":"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","sourcesContent":["'use strict'\n\nvar path          = require('path')\nvar ndarray       = require('ndarray')\nvar GifReader     = require('omggif').GifReader\nvar pack          = require('ndarray-pack')\nvar through       = require('through')\nvar parseDataURI  = require('data-uri-to-buffer')\n\nfunction defaultImage(url, cb) {\n  var img = new Image()\n  img.crossOrigin = \"Anonymous\"\n  img.onload = function() {\n    var canvas = document.createElement('canvas')\n    canvas.width = img.width\n    canvas.height = img.height\n    var context = canvas.getContext('2d')\n    context.drawImage(img, 0, 0)\n    var pixels = context.getImageData(0, 0, img.width, img.height)\n    cb(null, ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0))\n  }\n  img.onerror = function(err) {\n    cb(err)\n  }\n  img.src = url\n}\n\n//Animated gif loading\nfunction handleGif(data, cb) {\n  var reader\n  try {\n    reader = new GifReader(data)\n  } catch(err) {\n    cb(err)\n    return\n  }\n  if(reader.numFrames() > 0) {\n    var framesInfo = []\n    var nshape = [reader.numFrames(), reader.height, reader.width, 4]\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2] * nshape[3])\n    var result = ndarray(ndata, nshape)\n    try {\n      for(var i=0; i<reader.numFrames(); ++i) {\n        reader.decodeAndBlitFrameRGBA(i, ndata.subarray(\n          result.index(i, 0, 0, 0),\n          result.index(i+1, 0, 0, 0)));\n        framesInfo.push(reader.frameInfo(i));\n      }\n    } catch(err) {\n      cb(err)\n      return\n    }\n    cb(null, result.transpose(0,2,1), framesInfo)\n  } else {\n    var nshape = [reader.height, reader.width, 4]\n    var ndata = new Uint8Array(nshape[0] * nshape[1] * nshape[2])\n    var result = ndarray(ndata, nshape)\n    try {\n      reader.decodeAndBlitFrameRGBA(0, ndata)\n    } catch(err) {\n      cb(err)\n      return\n    }\n    cb(null, result.transpose(1,0))\n  }\n}\n\nfunction httpGif(url, cb) {\n  var xhr          = new XMLHttpRequest()\n  xhr.open('GET', url, true)\n  xhr.responseType = 'arraybuffer'\n  if(xhr.overrideMimeType){\n    xhr.overrideMimeType('application/binary')\n  }\n  xhr.onerror = function(err) {\n    cb(err)\n  }\n  xhr.onload = function() {\n    if(xhr.readyState !== 4) {\n      return\n    }\n    var data = new Uint8Array(xhr.response)\n    handleGif(data, cb)\n    return\n  }\n  xhr.send()\n}\n\nfunction copyBuffer(buffer) {\n  if(buffer[0] === undefined) {\n    var n = buffer.length\n    var result = new Uint8Array(n)\n    for(var i=0; i<n; ++i) {\n      result[i] = buffer.get(i)\n    }\n    return result\n  } else {\n    return new Uint8Array(buffer)\n  }\n}\n\nfunction dataGif(url, cb) {\n  process.nextTick(function() {\n    try {\n      var buffer = parseDataURI(url)\n      if(buffer) {\n        handleGif(copyBuffer(buffer), cb)\n      } else {\n        cb(new Error('Error parsing data URI'))\n      }\n    } catch(err) {\n      cb(err)\n    }\n  })\n}\n\nmodule.exports = function getPixels(url, type, cb) {\n  if(!cb) {\n    cb = type\n    type = ''\n  }\n  var ext = path.extname(url)\n  switch(type || ext.toUpperCase()) {\n    case '.GIF':\n      httpGif(url, cb)\n    break\n    default:\n      if(Buffer.isBuffer(url)) {\n        url = 'data:' + type + ';base64,' + url.toString('base64')\n      }\n      if(url.indexOf('data:image/gif;') === 0) {\n        dataGif(url, cb)\n      } else {\n        defaultImage(url, cb)\n      }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}