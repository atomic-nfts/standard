{"ast":null,"code":"import matcher from 'matcher';\nimport { encode, decode } from 'node-forge/lib/pem';\nimport { DecodePemFailedError, EncodePemFailedError } from './errors';\nimport { uint8ArrayToBinaryString } from './binary';\nexport var decodePem = function decodePem(pem, patterns) {\n  if (pem instanceof Uint8Array) {\n    pem = uint8ArrayToBinaryString(pem);\n  }\n\n  var decodedPem;\n\n  try {\n    decodedPem = decode(pem);\n  } catch (err) {\n    throw new DecodePemFailedError('Failed to decode PEM', {\n      originalError: err\n    });\n  }\n\n  if (!patterns) {\n    return decodedPem[0];\n  } // Match pem message against the patterns\n\n\n  patterns = Array.isArray(patterns) ? patterns : [patterns];\n  var pemMessage = decodedPem.find(function (msg) {\n    return matcher([msg.type], patterns, {\n      caseSensitive: true\n    }).length > 0;\n  });\n\n  if (!pemMessage) {\n    throw new DecodePemFailedError(\"Could not find pem message matching patterns: '\".concat(patterns.join('\\', \\''), \"'\"));\n  }\n\n  return pemMessage;\n};\nexport var encodePem = function encodePem(decodedPem) {\n  var pem;\n\n  try {\n    pem = encode(decodedPem);\n  } catch (err) {\n    /* istanbul ignore next */\n    throw new EncodePemFailedError('Failed to encode PEM', {\n      originalError: err\n    });\n  }\n\n  pem = pem.replace(/\\r/g, '');\n  return pem;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/util/pem-encoder.js"],"names":["matcher","encode","decode","DecodePemFailedError","EncodePemFailedError","uint8ArrayToBinaryString","decodePem","pem","patterns","Uint8Array","decodedPem","err","originalError","Array","isArray","pemMessage","find","msg","type","caseSensitive","length","join","encodePem","replace"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,oBAA/B;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,UAA3D;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,QAAN,EAAmB;AAC1C,MAAID,GAAG,YAAYE,UAAnB,EAA+B;AAC7BF,IAAAA,GAAG,GAAGF,wBAAwB,CAACE,GAAD,CAA9B;AACD;;AAED,MAAIG,UAAJ;;AAEA,MAAI;AACFA,IAAAA,UAAU,GAAGR,MAAM,CAACK,GAAD,CAAnB;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,UAAM,IAAIR,oBAAJ,CAAyB,sBAAzB,EAAiD;AACrDS,MAAAA,aAAa,EAAED;AADsC,KAAjD,CAAN;AAGD;;AAED,MAAI,CAACH,QAAL,EAAe;AACb,WAAOE,UAAU,CAAC,CAAD,CAAjB;AACD,GAjByC,CAiBxC;;;AAGFF,EAAAA,QAAQ,GAAGK,KAAK,CAACC,OAAN,CAAcN,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAhD;AACA,MAAMO,UAAU,GAAGL,UAAU,CAACM,IAAX,CAAgB,UAAAC,GAAG;AAAA,WAAIjB,OAAO,CAAC,CAACiB,GAAG,CAACC,IAAL,CAAD,EAAaV,QAAb,EAAuB;AACtEW,MAAAA,aAAa,EAAE;AADuD,KAAvB,CAAP,CAEvCC,MAFuC,GAE9B,CAF0B;AAAA,GAAnB,CAAnB;;AAIA,MAAI,CAACL,UAAL,EAAiB;AACf,UAAM,IAAIZ,oBAAJ,0DAA2EK,QAAQ,CAACa,IAAT,CAAc,QAAd,CAA3E,OAAN;AACD;;AAED,SAAON,UAAP;AACD,CA9BM;AA+BP,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAAAZ,UAAU,EAAI;AACrC,MAAIH,GAAJ;;AAEA,MAAI;AACFA,IAAAA,GAAG,GAAGN,MAAM,CAACS,UAAD,CAAZ;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,UAAM,IAAIP,oBAAJ,CAAyB,sBAAzB,EAAiD;AACrDQ,MAAAA,aAAa,EAAED;AADsC,KAAjD,CAAN;AAGD;;AAEDJ,EAAAA,GAAG,GAAGA,GAAG,CAACgB,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN;AACA,SAAOhB,GAAP;AACD,CAdM","sourcesContent":["import matcher from 'matcher';\nimport { encode, decode } from 'node-forge/lib/pem';\nimport { DecodePemFailedError, EncodePemFailedError } from './errors';\nimport { uint8ArrayToBinaryString } from './binary';\nexport const decodePem = (pem, patterns) => {\n  if (pem instanceof Uint8Array) {\n    pem = uint8ArrayToBinaryString(pem);\n  }\n\n  let decodedPem;\n\n  try {\n    decodedPem = decode(pem);\n  } catch (err) {\n    throw new DecodePemFailedError('Failed to decode PEM', {\n      originalError: err\n    });\n  }\n\n  if (!patterns) {\n    return decodedPem[0];\n  } // Match pem message against the patterns\n\n\n  patterns = Array.isArray(patterns) ? patterns : [patterns];\n  const pemMessage = decodedPem.find(msg => matcher([msg.type], patterns, {\n    caseSensitive: true\n  }).length > 0);\n\n  if (!pemMessage) {\n    throw new DecodePemFailedError(`Could not find pem message matching patterns: '${patterns.join('\\', \\'')}'`);\n  }\n\n  return pemMessage;\n};\nexport const encodePem = decodedPem => {\n  let pem;\n\n  try {\n    pem = encode(decodedPem);\n  } catch (err) {\n    /* istanbul ignore next */\n    throw new EncodePemFailedError('Failed to encode PEM', {\n      originalError: err\n    });\n  }\n\n  pem = pem.replace(/\\r/g, '');\n  return pem;\n};"]},"metadata":{},"sourceType":"module"}