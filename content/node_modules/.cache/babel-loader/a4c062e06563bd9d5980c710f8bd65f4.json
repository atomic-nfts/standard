{"ast":null,"code":"import { decryptWithPassword, encryptWithPassword } from '../../util/pbe';\nimport { binaryStringToUint8Array, hexStringToUint8Array, uint8ArrayToHexString } from '../../util/binary';\nimport { validateEncryptionAlgorithm } from '../../util/validator';\nimport { UnsupportedAlgorithmError, MissingPasswordError } from '../../util/errors';\n\nvar decryptPemBody = function decryptPemBody(pem, password) {\n  var keyDerivationFunc = {\n    id: 'openssl-derive-bytes'\n  };\n  var encryptionScheme = {\n    iv: hexStringToUint8Array(pem.dekInfo.parameters)\n  };\n  var dekInfoAlgorithm = pem.dekInfo.algorithm;\n\n  switch (dekInfoAlgorithm) {\n    case 'AES-128-CBC':\n    case 'AES-192-CBC':\n    case 'AES-256-CBC':\n      encryptionScheme.id = dekInfoAlgorithm.replace('-', '').toLowerCase();\n      break;\n\n    case 'RC2-40-CBC':\n    case 'RC2-64-CBC':\n    case 'RC2-128-CBC':\n    case 'RC2-CBC':\n      encryptionScheme.id = 'rc2-cbc';\n      encryptionScheme.bits = Number((dekInfoAlgorithm.match(/-(\\d+)-/) || [])[1]) || 128;\n      break;\n\n    case 'DES-CBC':\n    case 'DES-EDE3-CBC':\n      encryptionScheme.id = dekInfoAlgorithm.toLowerCase();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported DEK-INFO algorithm '\".concat(dekInfoAlgorithm, \"'\"));\n  }\n\n  var encryptionAlgorithm = {\n    keyDerivationFunc: keyDerivationFunc,\n    encryptionScheme: encryptionScheme\n  };\n  var decryptedPemBody = decryptWithPassword(binaryStringToUint8Array(pem.body), encryptionAlgorithm, password);\n  return {\n    encryptionAlgorithm: encryptionAlgorithm,\n    pemBody: decryptedPemBody\n  };\n};\n\nvar encryptPemBody = function encryptPemBody(pemBody, encryptionAlgorithm, password) {\n  encryptionAlgorithm = validateEncryptionAlgorithm(encryptionAlgorithm, 'openssl-derive-bytes', 'aes256-cbc');\n  var _encryptionAlgorithm = encryptionAlgorithm,\n      keyDerivationFunc = _encryptionAlgorithm.keyDerivationFunc,\n      encryptionScheme = _encryptionAlgorithm.encryptionScheme;\n\n  if (keyDerivationFunc.id !== 'openssl-derive-bytes') {\n    throw new UnsupportedAlgorithmError('PKCS1 PEM keys only support \\'openssl-derive-bytes\\' as the key derivation func');\n  }\n\n  var dekInfoAlgorithm;\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      dekInfoAlgorithm = encryptionScheme.id.replace('aes', 'aes-').toUpperCase();\n      break;\n\n    case 'rc2-cbc':\n      encryptionScheme.bits = encryptionScheme.bits || 128;\n\n      switch (encryptionScheme.bits) {\n        case 40:\n          dekInfoAlgorithm = 'RC2-40-CBC';\n          break;\n\n        case 64:\n          dekInfoAlgorithm = 'RC2-64-CBC';\n          break;\n\n        case 128:\n          dekInfoAlgorithm = 'RC2-CBC';\n          break;\n\n        default:\n          throw new UnsupportedAlgorithmError(\"Unsupported RC2 bits parameter with value '\".concat(encryptionScheme.bits, \"'\"));\n      }\n\n      break;\n\n    case 'des-cbc':\n    case 'des-ede3-cbc':\n      dekInfoAlgorithm = encryptionScheme.id.toUpperCase();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported encryption scheme id '\".concat(encryptionScheme.id, \"'\"));\n  }\n\n  var _encryptWithPassword = encryptWithPassword(pemBody, encryptionAlgorithm, password),\n      encryptedData = _encryptWithPassword.encryptedData,\n      effectiveEncryptionAlgorithm = _encryptWithPassword.effectiveEncryptionAlgorithm;\n\n  return {\n    pemHeaders: {\n      procType: {\n        version: '4',\n        type: 'ENCRYPTED'\n      },\n      dekInfo: {\n        algorithm: dekInfoAlgorithm,\n        parameters: uint8ArrayToHexString(effectiveEncryptionAlgorithm.encryptionScheme.iv).toUpperCase()\n      }\n    },\n    pemBody: encryptedData\n  };\n};\n\nexport var maybeDecryptPemBody = function maybeDecryptPemBody(pem, password) {\n  var encrypted = pem.procType && pem.procType.type === 'ENCRYPTED' && pem.dekInfo && pem.dekInfo.algorithm;\n\n  if (!encrypted) {\n    return {\n      pemBody: binaryStringToUint8Array(pem.body),\n      encryptionAlgorithm: null\n    };\n  }\n\n  if (!password) {\n    throw new MissingPasswordError('Please specify the password to decrypt the key');\n  }\n\n  return decryptPemBody(pem, password);\n};\nexport var maybeEncryptPemBody = function maybeEncryptPemBody(pemBody, encryptionAlgorithm, password) {\n  if (!password && !encryptionAlgorithm) {\n    return {\n      pemHeaders: null,\n      pemBody: pemBody\n    };\n  }\n\n  if (!password && encryptionAlgorithm) {\n    throw new MissingPasswordError('An encryption algorithm was specified but no password was set');\n  }\n\n  return encryptPemBody(pemBody, encryptionAlgorithm, password);\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/raw/encryption.js"],"names":["decryptWithPassword","encryptWithPassword","binaryStringToUint8Array","hexStringToUint8Array","uint8ArrayToHexString","validateEncryptionAlgorithm","UnsupportedAlgorithmError","MissingPasswordError","decryptPemBody","pem","password","keyDerivationFunc","id","encryptionScheme","iv","dekInfo","parameters","dekInfoAlgorithm","algorithm","replace","toLowerCase","bits","Number","match","encryptionAlgorithm","decryptedPemBody","body","pemBody","encryptPemBody","toUpperCase","encryptedData","effectiveEncryptionAlgorithm","pemHeaders","procType","version","type","maybeDecryptPemBody","encrypted","maybeEncryptPemBody"],"mappings":"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","sourcesContent":["import { decryptWithPassword, encryptWithPassword } from '../../util/pbe';\nimport { binaryStringToUint8Array, hexStringToUint8Array, uint8ArrayToHexString } from '../../util/binary';\nimport { validateEncryptionAlgorithm } from '../../util/validator';\nimport { UnsupportedAlgorithmError, MissingPasswordError } from '../../util/errors';\n\nconst decryptPemBody = (pem, password) => {\n  const keyDerivationFunc = {\n    id: 'openssl-derive-bytes'\n  };\n  const encryptionScheme = {\n    iv: hexStringToUint8Array(pem.dekInfo.parameters)\n  };\n  const dekInfoAlgorithm = pem.dekInfo.algorithm;\n\n  switch (dekInfoAlgorithm) {\n    case 'AES-128-CBC':\n    case 'AES-192-CBC':\n    case 'AES-256-CBC':\n      encryptionScheme.id = dekInfoAlgorithm.replace('-', '').toLowerCase();\n      break;\n\n    case 'RC2-40-CBC':\n    case 'RC2-64-CBC':\n    case 'RC2-128-CBC':\n    case 'RC2-CBC':\n      encryptionScheme.id = 'rc2-cbc';\n      encryptionScheme.bits = Number((dekInfoAlgorithm.match(/-(\\d+)-/) || [])[1]) || 128;\n      break;\n\n    case 'DES-CBC':\n    case 'DES-EDE3-CBC':\n      encryptionScheme.id = dekInfoAlgorithm.toLowerCase();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported DEK-INFO algorithm '${dekInfoAlgorithm}'`);\n  }\n\n  const encryptionAlgorithm = {\n    keyDerivationFunc,\n    encryptionScheme\n  };\n  const decryptedPemBody = decryptWithPassword(binaryStringToUint8Array(pem.body), encryptionAlgorithm, password);\n  return {\n    encryptionAlgorithm,\n    pemBody: decryptedPemBody\n  };\n};\n\nconst encryptPemBody = (pemBody, encryptionAlgorithm, password) => {\n  encryptionAlgorithm = validateEncryptionAlgorithm(encryptionAlgorithm, 'openssl-derive-bytes', 'aes256-cbc');\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = encryptionAlgorithm;\n\n  if (keyDerivationFunc.id !== 'openssl-derive-bytes') {\n    throw new UnsupportedAlgorithmError('PKCS1 PEM keys only support \\'openssl-derive-bytes\\' as the key derivation func');\n  }\n\n  let dekInfoAlgorithm;\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      dekInfoAlgorithm = encryptionScheme.id.replace('aes', 'aes-').toUpperCase();\n      break;\n\n    case 'rc2-cbc':\n      encryptionScheme.bits = encryptionScheme.bits || 128;\n\n      switch (encryptionScheme.bits) {\n        case 40:\n          dekInfoAlgorithm = 'RC2-40-CBC';\n          break;\n\n        case 64:\n          dekInfoAlgorithm = 'RC2-64-CBC';\n          break;\n\n        case 128:\n          dekInfoAlgorithm = 'RC2-CBC';\n          break;\n\n        default:\n          throw new UnsupportedAlgorithmError(`Unsupported RC2 bits parameter with value '${encryptionScheme.bits}'`);\n      }\n\n      break;\n\n    case 'des-cbc':\n    case 'des-ede3-cbc':\n      dekInfoAlgorithm = encryptionScheme.id.toUpperCase();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme id '${encryptionScheme.id}'`);\n  }\n\n  const {\n    encryptedData,\n    effectiveEncryptionAlgorithm\n  } = encryptWithPassword(pemBody, encryptionAlgorithm, password);\n  return {\n    pemHeaders: {\n      procType: {\n        version: '4',\n        type: 'ENCRYPTED'\n      },\n      dekInfo: {\n        algorithm: dekInfoAlgorithm,\n        parameters: uint8ArrayToHexString(effectiveEncryptionAlgorithm.encryptionScheme.iv).toUpperCase()\n      }\n    },\n    pemBody: encryptedData\n  };\n};\n\nexport const maybeDecryptPemBody = (pem, password) => {\n  const encrypted = pem.procType && pem.procType.type === 'ENCRYPTED' && pem.dekInfo && pem.dekInfo.algorithm;\n\n  if (!encrypted) {\n    return {\n      pemBody: binaryStringToUint8Array(pem.body),\n      encryptionAlgorithm: null\n    };\n  }\n\n  if (!password) {\n    throw new MissingPasswordError('Please specify the password to decrypt the key');\n  }\n\n  return decryptPemBody(pem, password);\n};\nexport const maybeEncryptPemBody = (pemBody, encryptionAlgorithm, password) => {\n  if (!password && !encryptionAlgorithm) {\n    return {\n      pemHeaders: null,\n      pemBody\n    };\n  }\n\n  if (!password && encryptionAlgorithm) {\n    throw new MissingPasswordError('An encryption algorithm was specified but no password was set');\n  }\n\n  return encryptPemBody(pemBody, encryptionAlgorithm, password);\n};"]},"metadata":{},"sourceType":"module"}