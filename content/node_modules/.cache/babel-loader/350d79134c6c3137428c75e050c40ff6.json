{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAAqB,iBAArB;AAEA,SAAM,QAAU,IAAA,eAAhB,QAAwD,oBAAxD;AACE,OAAA,SAAY,gBAAZ,CAAY,KAAZ,EAAY,SAAZ,EAAY;MACV,CAAA,K,EAAM;AACP,UAAA,IAAA,KAAA,CAAA,yBAAA,CAAA;AACD;;AACE,SAAA,IAAS,UAAT,CAAgB,UAAc,UAAd,EAAe;AAC/B,QAAI,GAAA,GAAA,IAAsB,YAAtB,EAAJ;AACA,QAAI,QAAJ;QAEE,G,CAAI,YAAY;UACd,QAAQ,IAAC,OAAS,QAAA,CAAA,MAAT,KAAS,U,EAAA;AACnB,QAAA,QAAA,CAAA,MAAA;AACA;AACH,K;QACE,G,CAAA,SAAW,CAAA,QAAX,CAAiB,YAAkB;AACnC,MAAA,QAAQ,GAAA,KAAA,CAAS,eAAT,CAAA,EAAR;UACE,G,CAAI,SAAA,CAAU,QAAV,CAAmB,YAAA;YACrB,UAAO,CAAA,M,EAAA;AACR;AACD;;AACA,YAAI,KAAJ;AACA,YAAI,IAAJ;;YACE;AACA,cAAA,MAAQ,GAAA,QAAa,CAAA,IAAb,EAAR;AACA,UAAA,KAAI,GAAG,MAAO,CAAA,KAAd;AACD,UAAA,IAAA,GAAA,MAAA,CAAA,IAAA;AAAC,S,CACA,OAAA,GAAA,EAAA;AACA,UAAA,UAAO,CAAA,KAAP,CAAO,GAAP;AACD;AACD;;YACE,I,EAAA;AACD,UAAA,UAAA,CAAA,QAAA;AAAM,S,MACL;AACA,UAAA,UAAK,CAAA,IAAL,CAAgB,KAAhB;AACD,eAAA,QAAA;AACC;AACF,OApBI,C;AAqBR,KAvBE,C;AAwBD,WAAA,GAAA;AACJ,GAlCG,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        var sub = new Subscription();\n        var iterator;\n        sub.add(function () {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(function () {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                var value;\n                var done;\n                try {\n                    var result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map\n"]},"metadata":{},"sourceType":"module"}