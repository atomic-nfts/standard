{"ast":null,"code":"\"use strict\";\n\nvar createThunk = require(\"./lib/thunk.js\");\n\nfunction Procedure() {\n  this.argTypes = [];\n  this.shimArgs = [];\n  this.arrayArgs = [];\n  this.arrayBlockIndices = [];\n  this.scalarArgs = [];\n  this.offsetArgs = [];\n  this.offsetArgIndex = [];\n  this.indexArgs = [];\n  this.shapeArgs = [];\n  this.funcName = \"\";\n  this.pre = null;\n  this.body = null;\n  this.post = null;\n  this.debug = false;\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure(); //Parse blocks\n\n  proc.pre = user_args.pre;\n  proc.body = user_args.body;\n  proc.post = user_args.post; //Parse arguments\n\n  var proc_args = user_args.args.slice(0);\n  proc.argTypes = proc_args;\n\n  for (var i = 0; i < proc_args.length; ++i) {\n    var arg_type = proc_args[i];\n\n    if (arg_type === \"array\" || typeof arg_type === \"object\" && arg_type.blockIndices) {\n      proc.argTypes[i] = \"array\";\n      proc.arrayArgs.push(i);\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0);\n      proc.shimArgs.push(\"array\" + i);\n\n      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array args\");\n      }\n\n      if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array args\");\n      }\n    } else if (arg_type === \"scalar\") {\n      proc.scalarArgs.push(i);\n      proc.shimArgs.push(\"scalar\" + i);\n    } else if (arg_type === \"index\") {\n      proc.indexArgs.push(i);\n\n      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\");\n      }\n\n      if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\");\n      }\n\n      if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\");\n      }\n    } else if (arg_type === \"shape\") {\n      proc.shapeArgs.push(i);\n\n      if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\");\n      }\n\n      if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\");\n      }\n\n      if (i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\");\n      }\n    } else if (typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\";\n      proc.offsetArgs.push({\n        array: arg_type.array,\n        offset: arg_type.offset\n      });\n      proc.offsetArgIndex.push(i);\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i]);\n    }\n  } //Make sure at least one array argument was specified\n\n\n  if (proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\");\n  } //Make sure arguments are correct\n\n\n  if (proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\");\n  }\n\n  if (proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\");\n  }\n\n  if (proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\");\n  } //Check debug flag\n\n\n  proc.debug = !!user_args.printCode || !!user_args.debug; //Retrieve name\n\n  proc.funcName = user_args.funcName || \"cwise\"; //Read in block size\n\n  proc.blockSize = user_args.blockSize || 64;\n  return createThunk(proc);\n}\n\nmodule.exports = compileCwise;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/cwise-compiler/compiler.js"],"names":["createThunk","require","Procedure","argTypes","shimArgs","arrayArgs","arrayBlockIndices","scalarArgs","offsetArgs","offsetArgIndex","indexArgs","shapeArgs","funcName","pre","body","post","debug","compileCwise","user_args","proc","proc_args","args","slice","i","length","arg_type","blockIndices","push","count","Error","lvalue","offset","array","printCode","blockSize","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar createThunk = require(\"./lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n"]},"metadata":{},"sourceType":"script"}