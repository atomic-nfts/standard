{"ast":null,"code":"import { decomposeRsaPrivateKey, composeRsaPrivateKey } from '../raw/keys';\nimport { UnsupportedAlgorithmError, DecodeAsn1FailedError } from '../../util/errors';\nimport { KEY_TYPES } from '../../util/key-types';\nexport var decomposePrivateKey = function decomposePrivateKey(rsaPrivateKeyAsn1) {\n  var decomposedRsaKey;\n\n  try {\n    decomposedRsaKey = decomposeRsaPrivateKey(rsaPrivateKeyAsn1);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodeAsn1FailedError;\n    throw err;\n  }\n\n  var _decomposedRsaKey = decomposedRsaKey,\n      keyAlgorithm = _decomposedRsaKey.keyAlgorithm,\n      keyData = _decomposedRsaKey.keyData;\n  return {\n    format: 'pkcs1-der',\n    encryptionAlgorithm: null,\n    keyAlgorithm: keyAlgorithm,\n    keyData: keyData\n  };\n};\nexport var composePrivateKey = function composePrivateKey(_ref) {\n  var keyAlgorithm = _ref.keyAlgorithm,\n      keyData = _ref.keyData,\n      encryptionAlgorithm = _ref.encryptionAlgorithm;\n  var keyType = KEY_TYPES[keyAlgorithm.id];\n\n  if (keyType !== 'rsa') {\n    throw new UnsupportedAlgorithmError('The key algorithm id for PKCS1 must be one of RSA\\'s');\n  }\n\n  if (encryptionAlgorithm) {\n    throw new UnsupportedAlgorithmError('The PKCS1 DER format does not support encryption');\n  }\n\n  return composeRsaPrivateKey(keyAlgorithm, keyData);\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs1/pkcs1-der.js"],"names":["decomposeRsaPrivateKey","composeRsaPrivateKey","UnsupportedAlgorithmError","DecodeAsn1FailedError","KEY_TYPES","decomposePrivateKey","rsaPrivateKeyAsn1","decomposedRsaKey","err","invalidInputKey","keyAlgorithm","keyData","format","encryptionAlgorithm","composePrivateKey","keyType","id"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,oBAAjC,QAA6D,aAA7D;AACA,SAASC,yBAAT,EAAoCC,qBAApC,QAAiE,mBAAjE;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,iBAAiB,EAAI;AACtD,MAAIC,gBAAJ;;AAEA,MAAI;AACFA,IAAAA,gBAAgB,GAAGP,sBAAsB,CAACM,iBAAD,CAAzC;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYL,qBAArC;AACA,UAAMK,GAAN;AACD;;AAED,0BAGID,gBAHJ;AAAA,MACEG,YADF,qBACEA,YADF;AAAA,MAEEC,OAFF,qBAEEA,OAFF;AAIA,SAAO;AACLC,IAAAA,MAAM,EAAE,WADH;AAELC,IAAAA,mBAAmB,EAAE,IAFhB;AAGLH,IAAAA,YAAY,EAAZA,YAHK;AAILC,IAAAA,OAAO,EAAPA;AAJK,GAAP;AAMD,CApBM;AAqBP,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,OAI3B;AAAA,MAHJJ,YAGI,QAHJA,YAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADJE,mBACI,QADJA,mBACI;AACJ,MAAME,OAAO,GAAGX,SAAS,CAACM,YAAY,CAACM,EAAd,CAAzB;;AAEA,MAAID,OAAO,KAAK,KAAhB,EAAuB;AACrB,UAAM,IAAIb,yBAAJ,CAA8B,sDAA9B,CAAN;AACD;;AAED,MAAIW,mBAAJ,EAAyB;AACvB,UAAM,IAAIX,yBAAJ,CAA8B,kDAA9B,CAAN;AACD;;AAED,SAAOD,oBAAoB,CAACS,YAAD,EAAeC,OAAf,CAA3B;AACD,CAhBM","sourcesContent":["import { decomposeRsaPrivateKey, composeRsaPrivateKey } from '../raw/keys';\nimport { UnsupportedAlgorithmError, DecodeAsn1FailedError } from '../../util/errors';\nimport { KEY_TYPES } from '../../util/key-types';\nexport const decomposePrivateKey = rsaPrivateKeyAsn1 => {\n  let decomposedRsaKey;\n\n  try {\n    decomposedRsaKey = decomposeRsaPrivateKey(rsaPrivateKeyAsn1);\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodeAsn1FailedError;\n    throw err;\n  }\n\n  const {\n    keyAlgorithm,\n    keyData\n  } = decomposedRsaKey;\n  return {\n    format: 'pkcs1-der',\n    encryptionAlgorithm: null,\n    keyAlgorithm,\n    keyData\n  };\n};\nexport const composePrivateKey = ({\n  keyAlgorithm,\n  keyData,\n  encryptionAlgorithm\n}) => {\n  const keyType = KEY_TYPES[keyAlgorithm.id];\n\n  if (keyType !== 'rsa') {\n    throw new UnsupportedAlgorithmError('The key algorithm id for PKCS1 must be one of RSA\\'s');\n  }\n\n  if (encryptionAlgorithm) {\n    throw new UnsupportedAlgorithmError('The PKCS1 DER format does not support encryption');\n  }\n\n  return composeRsaPrivateKey(keyAlgorithm, keyData);\n};"]},"metadata":{},"sourceType":"module"}