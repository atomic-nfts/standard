{"ast":null,"code":"/**\n * Module exports.\n */\nmodule.exports = dataUriToBuffer;\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @return {Buffer} Buffer instance from Data URI\n * @api public\n */\n\nfunction dataUriToBuffer(uri) {\n  if (!/^data\\:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  } // strip newlines\n\n\n  uri = uri.replace(/\\r?\\n/g, ''); // split the URI up into the \"metadata\" and the \"data\" portions\n\n  var firstComma = uri.indexOf(',');\n  if (-1 === firstComma || firstComma <= 4) throw new TypeError('malformed data: URI'); // remove the \"data:\" scheme and parse the metadata\n\n  var meta = uri.substring(5, firstComma).split(';');\n  var base64 = false;\n  var charset = 'US-ASCII';\n\n  for (var i = 0; i < meta.length; i++) {\n    if ('base64' == meta[i]) {\n      base64 = true;\n    } else if (0 == meta[i].indexOf('charset=')) {\n      charset = meta[i].substring(8);\n    }\n  } // get the encoded data portion and decode URI-encoded chars\n\n\n  var data = unescape(uri.substring(firstComma + 1));\n  var encoding = base64 ? 'base64' : 'ascii';\n  var buffer = new Buffer(data, encoding); // set `.type` property to MIME type\n\n  buffer.type = meta[0] || 'text/plain'; // set the `.charset` property\n\n  buffer.charset = charset;\n  return buffer;\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/data-uri-to-buffer/index.js"],"names":["module","exports","dataUriToBuffer","uri","test","TypeError","replace","firstComma","indexOf","meta","substring","split","base64","charset","i","length","data","unescape","encoding","buffer","Buffer","type"],"mappings":"AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,eAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,eAAT,CAA0BC,GAA1B,EAA+B;AAC7B,MAAI,CAAC,WAAWC,IAAX,CAAgBD,GAAhB,CAAL,EAA2B;AACzB,UAAM,IAAIE,SAAJ,CAAc,kEAAd,CAAN;AACD,GAH4B,CAK7B;;;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAN,CAN6B,CAQ7B;;AACA,MAAIC,UAAU,GAAGJ,GAAG,CAACK,OAAJ,CAAY,GAAZ,CAAjB;AACA,MAAI,CAAC,CAAD,KAAOD,UAAP,IAAqBA,UAAU,IAAI,CAAvC,EAA0C,MAAM,IAAIF,SAAJ,CAAc,qBAAd,CAAN,CAVb,CAY7B;;AACA,MAAII,IAAI,GAAGN,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiBH,UAAjB,EAA6BI,KAA7B,CAAmC,GAAnC,CAAX;AAEA,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,OAAO,GAAG,UAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAI,YAAYL,IAAI,CAACK,CAAD,CAApB,EAAyB;AACvBF,MAAAA,MAAM,GAAG,IAAT;AACD,KAFD,MAEO,IAAI,KAAKH,IAAI,CAACK,CAAD,CAAJ,CAAQN,OAAR,CAAgB,UAAhB,CAAT,EAAsC;AAC3CK,MAAAA,OAAO,GAAGJ,IAAI,CAACK,CAAD,CAAJ,CAAQJ,SAAR,CAAkB,CAAlB,CAAV;AACD;AACF,GAvB4B,CAyB7B;;;AACA,MAAIM,IAAI,GAAGC,QAAQ,CAACd,GAAG,CAACO,SAAJ,CAAcH,UAAU,GAAG,CAA3B,CAAD,CAAnB;AAEA,MAAIW,QAAQ,GAAGN,MAAM,GAAG,QAAH,GAAc,OAAnC;AACA,MAAIO,MAAM,GAAG,IAAIC,MAAJ,CAAWJ,IAAX,EAAiBE,QAAjB,CAAb,CA7B6B,CA+B7B;;AACAC,EAAAA,MAAM,CAACE,IAAP,GAAcZ,IAAI,CAAC,CAAD,CAAJ,IAAW,YAAzB,CAhC6B,CAkC7B;;AACAU,EAAAA,MAAM,CAACN,OAAP,GAAiBA,OAAjB;AAEA,SAAOM,MAAP;AACD","sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = dataUriToBuffer;\n\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @return {Buffer} Buffer instance from Data URI\n * @api public\n */\n\nfunction dataUriToBuffer (uri) {\n  if (!/^data\\:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  }\n\n  // strip newlines\n  uri = uri.replace(/\\r?\\n/g, '');\n\n  // split the URI up into the \"metadata\" and the \"data\" portions\n  var firstComma = uri.indexOf(',');\n  if (-1 === firstComma || firstComma <= 4) throw new TypeError('malformed data: URI');\n\n  // remove the \"data:\" scheme and parse the metadata\n  var meta = uri.substring(5, firstComma).split(';');\n\n  var base64 = false;\n  var charset = 'US-ASCII';\n  for (var i = 0; i < meta.length; i++) {\n    if ('base64' == meta[i]) {\n      base64 = true;\n    } else if (0 == meta[i].indexOf('charset=')) {\n      charset = meta[i].substring(8);\n    }\n  }\n\n  // get the encoded data portion and decode URI-encoded chars\n  var data = unescape(uri.substring(firstComma + 1));\n\n  var encoding = base64 ? 'base64' : 'ascii';\n  var buffer = new Buffer(data, encoding);\n\n  // set `.type` property to MIME type\n  buffer.type = meta[0] || 'text/plain';\n\n  // set the `.charset` property\n  buffer.charset = charset;\n\n  return buffer;\n}\n"]},"metadata":{},"sourceType":"script"}