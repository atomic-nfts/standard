{"ast":null,"code":"import _objectSpread from \"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createBuffer } from 'node-forge/lib/util';\nimport sha1 from 'node-forge/lib/sha1';\nimport sha256 from 'node-forge/lib/sha256';\nimport sha512 from 'node-forge/lib/sha512';\nimport md5 from 'node-forge/lib/md5';\nimport pbkdf2 from 'node-forge/lib/pbkdf2';\nimport aes from 'node-forge/lib/aes';\nimport des from 'node-forge/lib/des';\nimport rc2 from 'node-forge/lib/rc2';\nimport randomBytes from './random';\nimport { uint8ArrayToBinaryString, binaryStringToUint8Array } from './binary';\nimport { UnsupportedAlgorithmError, DecryptionFailedError } from './errors';\n\nvar deriveKeyWithPbkdf2 = function deriveKeyWithPbkdf2(password, params) {\n  var salt = params.salt,\n      iterationCount = params.iterationCount,\n      keyLength = params.keyLength,\n      prf = params.prf;\n  var saltStr = uint8ArrayToBinaryString(salt);\n  var prfMd;\n\n  switch (prf) {\n    case 'hmac-with-sha1':\n      prfMd = sha1.create();\n      break;\n    // TODO: node-forge doesn't have sha224 support, see: https://github.com/digitalbazaar/forge/issues/669\n    // case 'hmacWithSHA224':\n    //     prfMd = sha256.sha224.create();\n    //     break;\n\n    case 'hmac-with-sha256':\n      prfMd = sha256.create();\n      break;\n\n    case 'hmac-with-sha384':\n      prfMd = sha512.sha384.create();\n      break;\n\n    case 'hmac-with-sha512':\n      prfMd = sha512.create();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported PBKDF2 prf id '\".concat(prf, \"'\"));\n  }\n\n  var keyStr = pbkdf2(password, saltStr, iterationCount, keyLength, prfMd);\n  return binaryStringToUint8Array(keyStr);\n};\n\nvar deriveKeyWithOpensslDeriveBytes = function deriveKeyWithOpensslDeriveBytes(password, params) {\n  var salt = params.salt,\n      keyLength = params.keyLength;\n  var saltStr = uint8ArrayToBinaryString(salt);\n  var md = md5.create();\n\n  var hash = function hash(bytes) {\n    return md.start().update(bytes).digest().getBytes();\n  };\n\n  var digests = [hash(password + saltStr)];\n\n  for (var length = 16, i = 1; length < keyLength; i += 1, length += 16) {\n    digests.push(hash(digests[i - 1] + password + saltStr));\n  }\n\n  var digestStr = digests.join('').substr(0, keyLength);\n  return binaryStringToUint8Array(digestStr);\n};\n\nvar decryptWithAes = function decryptWithAes(key, encryptedData, params) {\n  var iv = params.iv,\n      mode = params.mode;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = aes.createDecryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar encryptWithAes = function encryptWithAes(key, data, params) {\n  var iv = params.iv,\n      mode = params.mode;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = aes.createEncryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar decryptWithDes = function decryptWithDes(key, encryptedData, params) {\n  var iv = params.iv,\n      mode = params.mode;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = des.createDecryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar encryptWithDes = function encryptWithDes(key, data, params) {\n  var iv = params.iv,\n      mode = params.mode;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = des.createEncryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar decryptWithRc2 = function decryptWithRc2(key, encryptedData, params) {\n  var iv = params.iv,\n      bits = params.bits;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = rc2.createDecryptionCipher(keyStr, bits);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar encryptWithRc2 = function encryptWithRc2(key, data, params) {\n  var iv = params.iv,\n      bits = params.bits;\n  var ivStr = uint8ArrayToBinaryString(iv);\n  var keyStr = uint8ArrayToBinaryString(key);\n  var cipher = rc2.createEncryptionCipher(keyStr, bits);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nvar getRc2KeyLength = function getRc2KeyLength(bits) {\n  // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n  // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n  switch (bits) {\n    case 40:\n      return 5;\n\n    case 64:\n      return 8;\n\n    case 128:\n      return 16;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported RC2 bits parameter with value '\".concat(bits, \"'\"));\n  }\n};\n\nexport var decryptWithPassword = function decryptWithPassword(encryptedData, encryptionAlgorithm, password) {\n  var keyDerivationFunc = encryptionAlgorithm.keyDerivationFunc,\n      encryptionScheme = encryptionAlgorithm.encryptionScheme;\n  var deriveKeyFn;\n  var derivedKeyLength;\n  var decryptFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      decryptFn = function decryptFn(key) {\n        return decryptWithAes(key, encryptedData, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = Number(encryptionScheme.id.match(/^aes(\\d+)-/)[1]) / 8;\n      break;\n\n    case 'rc2-cbc':\n      decryptFn = function decryptFn(key) {\n        return decryptWithRc2(key, encryptedData, encryptionScheme);\n      };\n\n      derivedKeyLength = getRc2KeyLength(encryptionScheme.bits);\n      break;\n\n    case 'des-ede3-cbc':\n      decryptFn = function decryptFn(key) {\n        return decryptWithDes(key, encryptedData, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = 24;\n      break;\n\n    case 'des-cbc':\n      decryptFn = function decryptFn(key) {\n        return decryptWithDes(key, encryptedData, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = 8;\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported encryption scheme id '\".concat(encryptionScheme.id, \"'\"));\n  } // Process key derivation func\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      deriveKeyFn = function deriveKeyFn() {\n        return deriveKeyWithPbkdf2(password, _objectSpread(_objectSpread({}, keyDerivationFunc), {}, {\n          keyLength: keyDerivationFunc.keyLength || derivedKeyLength\n        }));\n      };\n\n      break;\n\n    case 'openssl-derive-bytes':\n      deriveKeyFn = function deriveKeyFn() {\n        return deriveKeyWithOpensslDeriveBytes(password, {\n          keyLength: derivedKeyLength,\n          salt: encryptionScheme.iv.slice(0, 8)\n        });\n      };\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key derivation function id '\".concat(keyDerivationFunc.id, \"'\"));\n  }\n\n  var derivedKey = deriveKeyFn();\n  var decryptedData = decryptFn(derivedKey);\n  return decryptedData;\n};\nexport var encryptWithPassword = function encryptWithPassword(data, encryptionAlgorithm, password) {\n  var keyDerivationFunc = _objectSpread({}, encryptionAlgorithm.keyDerivationFunc);\n\n  var encryptionScheme = _objectSpread({}, encryptionAlgorithm.encryptionScheme);\n\n  var deriveKeyFn;\n  var derivedKeyLength;\n  var encryptFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(16);\n\n      encryptFn = function encryptFn(key) {\n        return encryptWithAes(key, data, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = Number(encryptionScheme.id.match(/^aes(\\d+)-/)[1]) / 8;\n      break;\n\n    case 'rc2-cbc':\n      encryptionScheme.bits = encryptionScheme.bits || 128;\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(16);\n\n      encryptFn = function encryptFn(key) {\n        return encryptWithRc2(key, data, encryptionScheme);\n      };\n\n      derivedKeyLength = getRc2KeyLength(encryptionScheme.bits);\n      break;\n\n    case 'des-ede3-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(8);\n\n      encryptFn = function encryptFn(key) {\n        return encryptWithDes(key, data, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = 24;\n      break;\n\n    case 'des-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(8);\n\n      encryptFn = function encryptFn(key) {\n        return encryptWithDes(key, data, _objectSpread(_objectSpread({}, encryptionScheme), {}, {\n          mode: 'CBC'\n        }));\n      };\n\n      derivedKeyLength = 8;\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported encryption scheme id '\".concat(encryptionScheme.id, \"'\"));\n  } // Process key derivation name\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      if (keyDerivationFunc.keyLength != null && derivedKeyLength !== keyDerivationFunc.keyLength) {\n        throw new UnsupportedAlgorithmError(\"The specified key length must be equal to \".concat(derivedKeyLength, \" (or omitted)\"));\n      }\n\n      keyDerivationFunc.salt = keyDerivationFunc.salt || randomBytes(16);\n      keyDerivationFunc.iterationCount = keyDerivationFunc.iterationCount || 10000;\n      keyDerivationFunc.keyLength = keyDerivationFunc.keyLength || derivedKeyLength;\n      keyDerivationFunc.prf = keyDerivationFunc.prf || 'hmac-with-sha512';\n\n      deriveKeyFn = function deriveKeyFn() {\n        return deriveKeyWithPbkdf2(password, keyDerivationFunc);\n      };\n\n      break;\n\n    case 'openssl-derive-bytes':\n      keyDerivationFunc.keyLength = derivedKeyLength;\n      keyDerivationFunc.salt = encryptionScheme.iv.slice(0, 8);\n\n      deriveKeyFn = function deriveKeyFn() {\n        return deriveKeyWithOpensslDeriveBytes(password, keyDerivationFunc);\n      };\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(\"Unsupported key derivation function id '\".concat(keyDerivationFunc.id, \"'\"));\n  }\n\n  var derivedKey = deriveKeyFn();\n  var encryptedData = encryptFn(derivedKey);\n  return {\n    effectiveEncryptionAlgorithm: {\n      keyDerivationFunc: keyDerivationFunc,\n      encryptionScheme: encryptionScheme\n    },\n    encryptedData: encryptedData\n  };\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/util/pbe.js"],"names":["createBuffer","sha1","sha256","sha512","md5","pbkdf2","aes","des","rc2","randomBytes","uint8ArrayToBinaryString","binaryStringToUint8Array","UnsupportedAlgorithmError","DecryptionFailedError","deriveKeyWithPbkdf2","password","params","salt","iterationCount","keyLength","prf","saltStr","prfMd","create","sha384","keyStr","deriveKeyWithOpensslDeriveBytes","md","hash","bytes","start","update","digest","getBytes","digests","length","i","push","digestStr","join","substr","decryptWithAes","key","encryptedData","iv","mode","ivStr","cipher","createDecryptionCipher","finish","output","encryptWithAes","data","createEncryptionCipher","decryptWithDes","encryptWithDes","decryptWithRc2","bits","encryptWithRc2","getRc2KeyLength","decryptWithPassword","encryptionAlgorithm","keyDerivationFunc","encryptionScheme","deriveKeyFn","derivedKeyLength","decryptFn","id","Number","match","slice","derivedKey","decryptedData","encryptWithPassword","encryptFn","effectiveEncryptionAlgorithm"],"mappings":"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","sourcesContent":["import { createBuffer } from 'node-forge/lib/util';\nimport sha1 from 'node-forge/lib/sha1';\nimport sha256 from 'node-forge/lib/sha256';\nimport sha512 from 'node-forge/lib/sha512';\nimport md5 from 'node-forge/lib/md5';\nimport pbkdf2 from 'node-forge/lib/pbkdf2';\nimport aes from 'node-forge/lib/aes';\nimport des from 'node-forge/lib/des';\nimport rc2 from 'node-forge/lib/rc2';\nimport randomBytes from './random';\nimport { uint8ArrayToBinaryString, binaryStringToUint8Array } from './binary';\nimport { UnsupportedAlgorithmError, DecryptionFailedError } from './errors';\n\nconst deriveKeyWithPbkdf2 = (password, params) => {\n  const {\n    salt,\n    iterationCount,\n    keyLength,\n    prf\n  } = params;\n  const saltStr = uint8ArrayToBinaryString(salt);\n  let prfMd;\n\n  switch (prf) {\n    case 'hmac-with-sha1':\n      prfMd = sha1.create();\n      break;\n    // TODO: node-forge doesn't have sha224 support, see: https://github.com/digitalbazaar/forge/issues/669\n    // case 'hmacWithSHA224':\n    //     prfMd = sha256.sha224.create();\n    //     break;\n\n    case 'hmac-with-sha256':\n      prfMd = sha256.create();\n      break;\n\n    case 'hmac-with-sha384':\n      prfMd = sha512.sha384.create();\n      break;\n\n    case 'hmac-with-sha512':\n      prfMd = sha512.create();\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported PBKDF2 prf id '${prf}'`);\n  }\n\n  const keyStr = pbkdf2(password, saltStr, iterationCount, keyLength, prfMd);\n  return binaryStringToUint8Array(keyStr);\n};\n\nconst deriveKeyWithOpensslDeriveBytes = (password, params) => {\n  const {\n    salt,\n    keyLength\n  } = params;\n  const saltStr = uint8ArrayToBinaryString(salt);\n  const md = md5.create();\n\n  const hash = bytes => md.start().update(bytes).digest().getBytes();\n\n  const digests = [hash(password + saltStr)];\n\n  for (let length = 16, i = 1; length < keyLength; i += 1, length += 16) {\n    digests.push(hash(digests[i - 1] + password + saltStr));\n  }\n\n  const digestStr = digests.join('').substr(0, keyLength);\n  return binaryStringToUint8Array(digestStr);\n};\n\nconst decryptWithAes = (key, encryptedData, params) => {\n  const {\n    iv,\n    mode\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = aes.createDecryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst encryptWithAes = (key, data, params) => {\n  const {\n    iv,\n    mode\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = aes.createEncryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst decryptWithDes = (key, encryptedData, params) => {\n  const {\n    iv,\n    mode\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = des.createDecryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst encryptWithDes = (key, data, params) => {\n  const {\n    iv,\n    mode\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = des.createEncryptionCipher(keyStr, mode);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst decryptWithRc2 = (key, encryptedData, params) => {\n  const {\n    iv,\n    bits\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = rc2.createDecryptionCipher(keyStr, bits);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(encryptedData)));\n\n  if (!cipher.finish()) {\n    throw new DecryptionFailedError('Decryption failed, mostly likely the password is wrong');\n  }\n\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst encryptWithRc2 = (key, data, params) => {\n  const {\n    iv,\n    bits\n  } = params;\n  const ivStr = uint8ArrayToBinaryString(iv);\n  const keyStr = uint8ArrayToBinaryString(key);\n  const cipher = rc2.createEncryptionCipher(keyStr, bits);\n  cipher.start(ivStr);\n  cipher.update(createBuffer(uint8ArrayToBinaryString(data)));\n  cipher.finish();\n  return binaryStringToUint8Array(cipher.output.getBytes());\n};\n\nconst getRc2KeyLength = bits => {\n  // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n  // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n  switch (bits) {\n    case 40:\n      return 5;\n\n    case 64:\n      return 8;\n\n    case 128:\n      return 16;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported RC2 bits parameter with value '${bits}'`);\n  }\n};\n\nexport const decryptWithPassword = (encryptedData, encryptionAlgorithm, password) => {\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = encryptionAlgorithm;\n  let deriveKeyFn;\n  let derivedKeyLength;\n  let decryptFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      decryptFn = key => decryptWithAes(key, encryptedData, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = Number(encryptionScheme.id.match(/^aes(\\d+)-/)[1]) / 8;\n      break;\n\n    case 'rc2-cbc':\n      decryptFn = key => decryptWithRc2(key, encryptedData, encryptionScheme);\n\n      derivedKeyLength = getRc2KeyLength(encryptionScheme.bits);\n      break;\n\n    case 'des-ede3-cbc':\n      decryptFn = key => decryptWithDes(key, encryptedData, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = 24;\n      break;\n\n    case 'des-cbc':\n      decryptFn = key => decryptWithDes(key, encryptedData, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = 8;\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme id '${encryptionScheme.id}'`);\n  } // Process key derivation func\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      deriveKeyFn = () => deriveKeyWithPbkdf2(password, { ...keyDerivationFunc,\n        keyLength: keyDerivationFunc.keyLength || derivedKeyLength\n      });\n\n      break;\n\n    case 'openssl-derive-bytes':\n      deriveKeyFn = () => deriveKeyWithOpensslDeriveBytes(password, {\n        keyLength: derivedKeyLength,\n        salt: encryptionScheme.iv.slice(0, 8)\n      });\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function id '${keyDerivationFunc.id}'`);\n  }\n\n  const derivedKey = deriveKeyFn();\n  const decryptedData = decryptFn(derivedKey);\n  return decryptedData;\n};\nexport const encryptWithPassword = (data, encryptionAlgorithm, password) => {\n  const keyDerivationFunc = { ...encryptionAlgorithm.keyDerivationFunc\n  };\n  const encryptionScheme = { ...encryptionAlgorithm.encryptionScheme\n  };\n  let deriveKeyFn;\n  let derivedKeyLength;\n  let encryptFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(16);\n\n      encryptFn = key => encryptWithAes(key, data, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = Number(encryptionScheme.id.match(/^aes(\\d+)-/)[1]) / 8;\n      break;\n\n    case 'rc2-cbc':\n      encryptionScheme.bits = encryptionScheme.bits || 128;\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(16);\n\n      encryptFn = key => encryptWithRc2(key, data, encryptionScheme);\n\n      derivedKeyLength = getRc2KeyLength(encryptionScheme.bits);\n      break;\n\n    case 'des-ede3-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(8);\n\n      encryptFn = key => encryptWithDes(key, data, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = 24;\n      break;\n\n    case 'des-cbc':\n      encryptionScheme.iv = encryptionScheme.iv || randomBytes(8);\n\n      encryptFn = key => encryptWithDes(key, data, { ...encryptionScheme,\n        mode: 'CBC'\n      });\n\n      derivedKeyLength = 8;\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme id '${encryptionScheme.id}'`);\n  } // Process key derivation name\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      if (keyDerivationFunc.keyLength != null && derivedKeyLength !== keyDerivationFunc.keyLength) {\n        throw new UnsupportedAlgorithmError(`The specified key length must be equal to ${derivedKeyLength} (or omitted)`);\n      }\n\n      keyDerivationFunc.salt = keyDerivationFunc.salt || randomBytes(16);\n      keyDerivationFunc.iterationCount = keyDerivationFunc.iterationCount || 10000;\n      keyDerivationFunc.keyLength = keyDerivationFunc.keyLength || derivedKeyLength;\n      keyDerivationFunc.prf = keyDerivationFunc.prf || 'hmac-with-sha512';\n\n      deriveKeyFn = () => deriveKeyWithPbkdf2(password, keyDerivationFunc);\n\n      break;\n\n    case 'openssl-derive-bytes':\n      keyDerivationFunc.keyLength = derivedKeyLength;\n      keyDerivationFunc.salt = encryptionScheme.iv.slice(0, 8);\n\n      deriveKeyFn = () => deriveKeyWithOpensslDeriveBytes(password, keyDerivationFunc);\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function id '${keyDerivationFunc.id}'`);\n  }\n\n  const derivedKey = deriveKeyFn();\n  const encryptedData = encryptFn(derivedKey);\n  return {\n    effectiveEncryptionAlgorithm: {\n      keyDerivationFunc,\n      encryptionScheme\n    },\n    encryptedData\n  };\n};"]},"metadata":{},"sourceType":"module"}