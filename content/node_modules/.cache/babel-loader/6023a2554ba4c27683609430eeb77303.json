{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ar_1 = require(\"./ar\");\n\nconst api_1 = require(\"./lib/api\");\n\nconst network_1 = require(\"./network\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst wallets_1 = require(\"./wallets\");\n\nconst transaction_1 = require(\"./lib/transaction\");\n\nconst ArweaveUtils = require(\"./lib/utils\");\n\nconst silo_1 = require(\"./silo\");\n\nconst chunks_1 = require(\"./chunks\");\n\nconst blocks_1 = require(\"./blocks\");\n\nclass Arweave {\n  constructor(apiConfig) {\n    this.api = new api_1.default(apiConfig);\n    this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n    this.chunks = new chunks_1.default(this.api);\n    this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n    this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n    this.network = new network_1.default(this.api);\n    this.blocks = new blocks_1.default(this.api, this.network);\n    this.ar = new ar_1.default();\n  }\n  /** @deprecated */\n\n\n  get crypto() {\n    return Arweave.crypto;\n  }\n  /** @deprecated */\n\n\n  get utils() {\n    return Arweave.utils;\n  }\n\n  getConfig() {\n    return {\n      api: this.api.getConfig(),\n      crypto: null\n    };\n  }\n\n  async createTransaction(attributes, jwk) {\n    const transaction = {};\n    Object.assign(transaction, attributes);\n\n    if (!attributes.data && !(attributes.target && attributes.quantity)) {\n      throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n    }\n\n    if (attributes.owner == undefined) {\n      if (jwk && jwk !== \"use_wallet\") {\n        transaction.owner = jwk.n;\n      }\n    }\n\n    if (attributes.last_tx == undefined) {\n      transaction.last_tx = await this.transactions.getTransactionAnchor();\n    }\n\n    if (typeof attributes.data === \"string\") {\n      attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n    }\n\n    if (attributes.data instanceof ArrayBuffer) {\n      attributes.data = new Uint8Array(attributes.data);\n    }\n\n    if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n      throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n    }\n\n    if (attributes.reward == undefined) {\n      const length = attributes.data ? attributes.data.byteLength : 0;\n      transaction.reward = await this.transactions.getPrice(length, transaction.target);\n    } // here we should call prepare chunk\n\n\n    transaction.data_root = \"\";\n    transaction.data_size = attributes.data ? attributes.data.byteLength.toString() : \"0\";\n    transaction.data = attributes.data || new Uint8Array(0);\n    const createdTransaction = new transaction_1.default(transaction);\n    await createdTransaction.getSignatureData();\n    return createdTransaction;\n  }\n\n  async createSiloTransaction(attributes, jwk, siloUri) {\n    const transaction = {};\n    Object.assign(transaction, attributes);\n\n    if (!attributes.data) {\n      throw new Error(`Silo transactions must have a 'data' value`);\n    }\n\n    if (!siloUri) {\n      throw new Error(`No Silo URI specified.`);\n    }\n\n    if (attributes.target || attributes.quantity) {\n      throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);\n    }\n\n    if (attributes.owner == undefined) {\n      if (!jwk || !jwk.n) {\n        throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);\n      }\n\n      transaction.owner = jwk.n;\n    }\n\n    if (attributes.last_tx == undefined) {\n      transaction.last_tx = await this.transactions.getTransactionAnchor();\n    }\n\n    const siloResource = await this.silo.parseUri(siloUri);\n\n    if (typeof attributes.data == \"string\") {\n      const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n      transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n      transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n    }\n\n    if (attributes.data instanceof Uint8Array) {\n      const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n      transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n      transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n    }\n\n    const siloTransaction = new transaction_1.default(transaction);\n    siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n    siloTransaction.addTag(\"Silo-Version\", `0.1.0`);\n    return siloTransaction;\n  }\n\n  arql(query) {\n    return this.api.post(\"/arql\", query).then(response => response.data || []);\n  }\n\n}\n\nexports.default = Arweave;\nArweave.utils = ArweaveUtils;","map":{"version":3,"sources":["../../../src/common/common.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ar_1 = require(\"./ar\");\nconst api_1 = require(\"./lib/api\");\nconst network_1 = require(\"./network\");\nconst transactions_1 = require(\"./transactions\");\nconst wallets_1 = require(\"./wallets\");\nconst transaction_1 = require(\"./lib/transaction\");\nconst ArweaveUtils = require(\"./lib/utils\");\nconst silo_1 = require(\"./silo\");\nconst chunks_1 = require(\"./chunks\");\nconst blocks_1 = require(\"./blocks\");\nclass Arweave {\n    constructor(apiConfig) {\n        this.api = new api_1.default(apiConfig);\n        this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n        this.chunks = new chunks_1.default(this.api);\n        this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n        this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n        this.network = new network_1.default(this.api);\n        this.blocks = new blocks_1.default(this.api, this.network);\n        this.ar = new ar_1.default();\n    }\n    /** @deprecated */\n    get crypto() {\n        return Arweave.crypto;\n    }\n    /** @deprecated */\n    get utils() {\n        return Arweave.utils;\n    }\n    getConfig() {\n        return {\n            api: this.api.getConfig(),\n            crypto: null,\n        };\n    }\n    async createTransaction(attributes, jwk) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data && !(attributes.target && attributes.quantity)) {\n            throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n        }\n        if (attributes.owner == undefined) {\n            if (jwk && jwk !== \"use_wallet\") {\n                transaction.owner = jwk.n;\n            }\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        if (typeof attributes.data === \"string\") {\n            attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n        }\n        if (attributes.data instanceof ArrayBuffer) {\n            attributes.data = new Uint8Array(attributes.data);\n        }\n        if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n            throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n        }\n        if (attributes.reward == undefined) {\n            const length = attributes.data ? attributes.data.byteLength : 0;\n            transaction.reward = await this.transactions.getPrice(length, transaction.target);\n        }\n        // here we should call prepare chunk\n        transaction.data_root = \"\";\n        transaction.data_size = attributes.data\n            ? attributes.data.byteLength.toString()\n            : \"0\";\n        transaction.data = attributes.data || new Uint8Array(0);\n        const createdTransaction = new transaction_1.default(transaction);\n        await createdTransaction.getSignatureData();\n        return createdTransaction;\n    }\n    async createSiloTransaction(attributes, jwk, siloUri) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data) {\n            throw new Error(`Silo transactions must have a 'data' value`);\n        }\n        if (!siloUri) {\n            throw new Error(`No Silo URI specified.`);\n        }\n        if (attributes.target || attributes.quantity) {\n            throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);\n        }\n        if (attributes.owner == undefined) {\n            if (!jwk || !jwk.n) {\n                throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);\n            }\n            transaction.owner = jwk.n;\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        const siloResource = await this.silo.parseUri(siloUri);\n        if (typeof attributes.data == \"string\") {\n            const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        if (attributes.data instanceof Uint8Array) {\n            const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        const siloTransaction = new transaction_1.default(transaction);\n        siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n        siloTransaction.addTag(\"Silo-Version\", `0.1.0`);\n        return siloTransaction;\n    }\n    arql(query) {\n        return this.api\n            .post(\"/arql\", query)\n            .then((response) => response.data || []);\n    }\n}\nexports.default = Arweave;\nArweave.utils = ArweaveUtils;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}