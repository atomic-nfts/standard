{"ast":null,"code":"'use strict';\n\nvar hasSyncZlib = true;\n\nvar zlib = require('zlib');\n\nif (!zlib.deflateSync) {\n  hasSyncZlib = false;\n}\n\nvar SyncReader = require('./sync-reader');\n\nvar FilterSync = require('./filter-parse-sync');\n\nvar Parser = require('./parser');\n\nvar bitmapper = require('./bitmapper');\n\nvar formatNormaliser = require('./format-normaliser');\n\nmodule.exports = function (buffer, options) {\n  if (!hasSyncZlib) {\n    throw new Error('To use the sync capability of this library in old node versions, please also add a dependency on node-zlb-backport');\n  }\n\n  var err;\n\n  function handleError(_err_) {\n    err = _err_;\n  }\n\n  var metaData;\n\n  function handleMetaData(_metaData_) {\n    metaData = _metaData_;\n  }\n\n  function handleTransColor(transColor) {\n    metaData.transColor = transColor;\n  }\n\n  function handlePalette(palette) {\n    metaData.palette = palette;\n  }\n\n  var gamma;\n\n  function handleGamma(_gamma_) {\n    gamma = _gamma_;\n  }\n\n  var inflateDataList = [];\n\n  function handleInflateData(inflatedData) {\n    inflateDataList.push(inflatedData);\n  }\n\n  var reader = new SyncReader(buffer);\n  var parser = new Parser(options, {\n    read: reader.read.bind(reader),\n    error: handleError,\n    metadata: handleMetaData,\n    gamma: handleGamma,\n    palette: handlePalette,\n    transColor: handleTransColor,\n    inflateData: handleInflateData\n  });\n  parser.start();\n  reader.process();\n\n  if (err) {\n    throw err;\n  } //join together the inflate datas\n\n\n  var inflateData = Buffer.concat(inflateDataList);\n  inflateDataList.length = 0;\n  var inflatedData = zlib.inflateSync(inflateData);\n  inflateData = null;\n\n  if (!inflatedData || !inflatedData.length) {\n    throw new Error('bad png - invalid inflate data response');\n  }\n\n  var unfilteredData = FilterSync.process(inflatedData, metaData);\n  inflateData = null;\n  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n  unfilteredData = null;\n  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n  metaData.data = normalisedBitmapData;\n  metaData.gamma = gamma || 0;\n  return metaData;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/pngjs-nozlib/lib/parser-sync.js"],"names":["hasSyncZlib","zlib","require","deflateSync","SyncReader","FilterSync","Parser","bitmapper","formatNormaliser","module","exports","buffer","options","Error","err","handleError","_err_","metaData","handleMetaData","_metaData_","handleTransColor","transColor","handlePalette","palette","gamma","handleGamma","_gamma_","inflateDataList","handleInflateData","inflatedData","push","reader","parser","read","bind","error","metadata","inflateData","start","process","Buffer","concat","length","inflateSync","unfilteredData","bitmapData","dataToBitMap","normalisedBitmapData","data"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hasSyncZlib = true;\nvar zlib = require('zlib');\nif (!zlib.deflateSync) {\n  hasSyncZlib = false;\n}\nvar SyncReader = require('./sync-reader');\nvar FilterSync = require('./filter-parse-sync');\nvar Parser = require('./parser');\nvar bitmapper = require('./bitmapper');\nvar formatNormaliser = require('./format-normaliser');\n\n\nmodule.exports = function(buffer, options) {\n\n  if (!hasSyncZlib) {\n    throw new Error('To use the sync capability of this library in old node versions, please also add a dependency on node-zlb-backport');\n  }\n\n  var err;\n  function handleError(_err_) {\n    err = _err_;\n  }\n\n  var metaData;\n  function handleMetaData(_metaData_) {\n    metaData = _metaData_;\n  }\n\n  function handleTransColor(transColor) {\n    metaData.transColor = transColor;\n  }\n\n  function handlePalette(palette) {\n    metaData.palette = palette;\n  }\n\n  var gamma;\n  function handleGamma(_gamma_) {\n    gamma = _gamma_;\n  }\n\n  var inflateDataList = [];\n  function handleInflateData(inflatedData) {\n    inflateDataList.push(inflatedData);\n  }\n\n  var reader = new SyncReader(buffer);\n\n  var parser = new Parser(options, {\n    read: reader.read.bind(reader),\n    error: handleError,\n    metadata: handleMetaData,\n    gamma: handleGamma,\n    palette: handlePalette,\n    transColor: handleTransColor,\n    inflateData: handleInflateData\n  });\n\n  parser.start();\n  reader.process();\n\n  if (err) {\n    throw err;\n  }\n\n  //join together the inflate datas\n  var inflateData = Buffer.concat(inflateDataList);\n  inflateDataList.length = 0;\n\n  var inflatedData = zlib.inflateSync(inflateData);\n  inflateData = null;\n\n  if (!inflatedData || !inflatedData.length) {\n    throw new Error('bad png - invalid inflate data response');\n  }\n\n  var unfilteredData = FilterSync.process(inflatedData, metaData);\n  inflateData = null;\n\n  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n  unfilteredData = null;\n\n  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n\n  metaData.data = normalisedBitmapData;\n  metaData.gamma = gamma || 0;\n\n  return metaData;\n};\n"]},"metadata":{},"sourceType":"script"}