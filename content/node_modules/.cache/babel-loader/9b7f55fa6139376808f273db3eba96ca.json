{"ast":null,"code":"import { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EncryptedPrivateKeyInfo, Pbes2Algorithms, Pbkdf2Params, Pbes2EsParams, Rc2CbcParameter } from '../../util/asn1-entities';\nimport { encryptWithPassword, decryptWithPassword } from '../../util/pbe';\nimport { uint8ArrayToInteger, hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError, DecodeAsn1FailedError, MissingPasswordError } from '../../util/errors';\nimport { validateEncryptionAlgorithm } from '../../util/validator';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nexport const decryptWithPBES2 = (encryptedData, encryptionAlgorithmParamsAsn1, password) => {\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = decodeAsn1(encryptionAlgorithmParamsAsn1, Pbes2Algorithms);\n  const keyDerivationFuncId = OIDS[keyDerivationFunc.id];\n  const encryptionSchemeId = OIDS[encryptionScheme.id];\n  const effectiveKeyDerivationFunc = {\n    id: keyDerivationFuncId\n  };\n  const effectiveEncryptionScheme = {\n    id: encryptionSchemeId\n  }; // Process encryption scheme\n\n  switch (encryptionSchemeId) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n    case 'des-ede3-cbc':\n    case 'des-cbc':\n      effectiveEncryptionScheme.iv = decodeAsn1(encryptionScheme.parameters, Pbes2EsParams[encryptionSchemeId]);\n      break;\n\n    case 'rc2-cbc':\n      {\n        const rc2CBCParameter = decodeAsn1(encryptionScheme.parameters, Rc2CbcParameter);\n        const rc2ParameterVersion = uint8ArrayToInteger(rc2CBCParameter.rc2ParameterVersion);\n        effectiveEncryptionScheme.iv = rc2CBCParameter.iv; // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n        // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n\n        switch (rc2ParameterVersion) {\n          case 160:\n            effectiveEncryptionScheme.bits = 40;\n            break;\n\n          case 120:\n            effectiveEncryptionScheme.bits = 64;\n            break;\n\n          case 58:\n            effectiveEncryptionScheme.bits = 128;\n            break;\n\n          default:\n            throw new UnsupportedAlgorithmError(`Unsupported RC2 version parameter with value '${rc2ParameterVersion}'`);\n        }\n\n        break;\n      }\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme algorithm OID '${encryptionScheme.id}'`);\n  } // Process key derivation func\n\n\n  switch (keyDerivationFuncId) {\n    case 'pbkdf2':\n      {\n        const pbkdf2Params = decodeAsn1(keyDerivationFunc.parameters, Pbkdf2Params);\n        const prfId = OIDS[pbkdf2Params.prf.id];\n        /* istanbul ignore if */\n\n        if (pbkdf2Params.salt.type !== 'specified') {\n          throw new UnsupportedAlgorithmError('Only \\'specified\\' salts are supported in PBKDF2');\n        }\n\n        if (!prfId) {\n          throw new UnsupportedAlgorithmError(`Unsupported prf algorithm OID '${pbkdf2Params.prf.id}'`);\n        }\n\n        effectiveKeyDerivationFunc.salt = pbkdf2Params.salt.value;\n        effectiveKeyDerivationFunc.iterationCount = uint8ArrayToInteger(pbkdf2Params.iterationCount);\n        effectiveKeyDerivationFunc.prf = prfId;\n\n        if (pbkdf2Params.keyLength) {\n          effectiveKeyDerivationFunc.keyLength = uint8ArrayToInteger(pbkdf2Params.keyLength);\n        }\n\n        break;\n      }\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function algorithm OID '${keyDerivationFunc.id}'`);\n  }\n\n  const encryptionAlgorithm = {\n    keyDerivationFunc: effectiveKeyDerivationFunc,\n    encryptionScheme: effectiveEncryptionScheme\n  };\n  const decryptedData = decryptWithPassword(encryptedData, encryptionAlgorithm, password);\n  return {\n    encryptionAlgorithm,\n    decryptedData\n  };\n};\nexport const encryptWithPBES2 = (data, encryptionAlgorithm, password) => {\n  encryptionAlgorithm = validateEncryptionAlgorithm(encryptionAlgorithm, 'pbkdf2', 'aes256-cbc');\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = encryptionAlgorithm;\n  let encodeEncryptionSchemeAsn1ParamsFn;\n  let encodeKeyDerivationFuncAsn1ParamsFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n    case 'des-ede3-cbc':\n    case 'des-cbc':\n      encodeEncryptionSchemeAsn1ParamsFn = ({\n        iv\n      }) => encodeAsn1(iv, Pbes2EsParams[encryptionScheme.id]);\n\n      break;\n\n    case 'rc2-cbc':\n      encodeEncryptionSchemeAsn1ParamsFn = ({\n        iv,\n        bits\n      }) => {\n        let rc2ParameterVersion; // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n        // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n\n        switch (bits) {\n          case 40:\n            rc2ParameterVersion = 160;\n            break;\n\n          case 64:\n            rc2ParameterVersion = 120;\n            break;\n\n          case 128:\n            rc2ParameterVersion = 58;\n            break;\n\n          default:\n            throw new UnsupportedAlgorithmError(`Unsupported RC2 bits parameter with value '${rc2ParameterVersion}'`);\n        }\n\n        return encodeAsn1({\n          iv,\n          rc2ParameterVersion\n        }, Rc2CbcParameter);\n      };\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme id '${encryptionScheme.id}'`);\n  } // Process key derivation name\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      encodeKeyDerivationFuncAsn1ParamsFn = ({\n        salt,\n        iterationCount,\n        prf\n      }) => encodeAsn1({\n        salt: {\n          type: 'specified',\n          value: salt\n        },\n        iterationCount,\n        keyLength: keyDerivationFunc.keyLength,\n        prf: {\n          id: FLIPPED_OIDS[prf],\n          parameters: hexStringToUint8Array('0500')\n        }\n      }, Pbkdf2Params);\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function id '${keyDerivationFunc.id}'`);\n  }\n\n  const {\n    encryptedData,\n    effectiveEncryptionAlgorithm\n  } = encryptWithPassword(data, encryptionAlgorithm, password);\n  const encryptionAlgorithmParamsAsn1 = encodeAsn1({\n    keyDerivationFunc: {\n      id: FLIPPED_OIDS[keyDerivationFunc.id],\n      parameters: encodeKeyDerivationFuncAsn1ParamsFn(effectiveEncryptionAlgorithm.keyDerivationFunc)\n    },\n    encryptionScheme: {\n      id: FLIPPED_OIDS[encryptionScheme.id],\n      parameters: encodeEncryptionSchemeAsn1ParamsFn(effectiveEncryptionAlgorithm.encryptionScheme)\n    }\n  }, Pbes2Algorithms);\n  return {\n    encryptionAlgorithmParamsAsn1,\n    encryptedData\n  };\n};\nexport const maybeDecryptPrivateKeyInfo = (encryptedPrivateKeyInfoAsn1, password) => {\n  let encryptedPrivateKeyInfo;\n\n  try {\n    encryptedPrivateKeyInfo = decodeAsn1(encryptedPrivateKeyInfoAsn1, EncryptedPrivateKeyInfo);\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof DecodeAsn1FailedError) {\n      return {\n        encryptionAlgorithm: null,\n        privateKeyInfoAsn1: encryptedPrivateKeyInfoAsn1\n      };\n    }\n    /* istanbul ignore next */\n\n\n    throw err;\n  }\n\n  if (!password) {\n    throw new MissingPasswordError('Please specify the password to decrypt the key');\n  }\n\n  const {\n    encryptionAlgorithm,\n    encryptedData\n  } = encryptedPrivateKeyInfo;\n  const encryptionAlgorithmId = OIDS[encryptionAlgorithm.id];\n  const encryptionAlgorithmParamsAsn1 = encryptionAlgorithm.parameters;\n  let decryptionResult;\n\n  switch (encryptionAlgorithmId) {\n    case 'pbes2':\n      decryptionResult = decryptWithPBES2(encryptedData, encryptionAlgorithmParamsAsn1, password);\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption algorithm OID '${encryptionAlgorithm.id}'`);\n  }\n\n  return {\n    encryptionAlgorithm: decryptionResult.encryptionAlgorithm,\n    privateKeyInfoAsn1: decryptionResult.decryptedData\n  };\n};\nexport const maybeEncryptPrivateKeyInfo = (privateKeyInfoAsn1, encryptionAlgorithm, password) => {\n  if (!password && !encryptionAlgorithm) {\n    return privateKeyInfoAsn1;\n  }\n\n  if (!password && encryptionAlgorithm) {\n    throw new MissingPasswordError('An encryption algorithm was specified but no password was set');\n  }\n\n  const {\n    encryptedData,\n    encryptionAlgorithmParamsAsn1\n  } = encryptWithPBES2(privateKeyInfoAsn1, encryptionAlgorithm, password);\n  const encryptedPrivateKeyInfoAsn1 = encodeAsn1({\n    encryptionAlgorithm: {\n      id: FLIPPED_OIDS.pbes2,\n      parameters: encryptionAlgorithmParamsAsn1\n    },\n    encryptedData\n  }, EncryptedPrivateKeyInfo);\n  return encryptedPrivateKeyInfoAsn1;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/pkcs8/encryption.js"],"names":["decodeAsn1","encodeAsn1","EncryptedPrivateKeyInfo","Pbes2Algorithms","Pbkdf2Params","Pbes2EsParams","Rc2CbcParameter","encryptWithPassword","decryptWithPassword","uint8ArrayToInteger","hexStringToUint8Array","UnsupportedAlgorithmError","DecodeAsn1FailedError","MissingPasswordError","validateEncryptionAlgorithm","OIDS","FLIPPED_OIDS","decryptWithPBES2","encryptedData","encryptionAlgorithmParamsAsn1","password","keyDerivationFunc","encryptionScheme","keyDerivationFuncId","id","encryptionSchemeId","effectiveKeyDerivationFunc","effectiveEncryptionScheme","iv","parameters","rc2CBCParameter","rc2ParameterVersion","bits","pbkdf2Params","prfId","prf","salt","type","value","iterationCount","keyLength","encryptionAlgorithm","decryptedData","encryptWithPBES2","data","encodeEncryptionSchemeAsn1ParamsFn","encodeKeyDerivationFuncAsn1ParamsFn","effectiveEncryptionAlgorithm","maybeDecryptPrivateKeyInfo","encryptedPrivateKeyInfoAsn1","encryptedPrivateKeyInfo","err","privateKeyInfoAsn1","encryptionAlgorithmId","decryptionResult","maybeEncryptPrivateKeyInfo","pbes2"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,yBAAvC;AACA,SAASC,uBAAT,EAAkCC,eAAlC,EAAmDC,YAAnD,EAAiEC,aAAjE,EAAgFC,eAAhF,QAAuG,0BAAvG;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,gBAAzD;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,mBAA3D;AACA,SAASC,yBAAT,EAAoCC,qBAApC,EAA2DC,oBAA3D,QAAuF,mBAAvF;AACA,SAASC,2BAAT,QAA4C,sBAA5C;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,iBAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,6BAAhB,EAA+CC,QAA/C,KAA4D;AAC1F,QAAM;AACJC,IAAAA,iBADI;AAEJC,IAAAA;AAFI,MAGFtB,UAAU,CAACmB,6BAAD,EAAgChB,eAAhC,CAHd;AAIA,QAAMoB,mBAAmB,GAAGR,IAAI,CAACM,iBAAiB,CAACG,EAAnB,CAAhC;AACA,QAAMC,kBAAkB,GAAGV,IAAI,CAACO,gBAAgB,CAACE,EAAlB,CAA/B;AACA,QAAME,0BAA0B,GAAG;AACjCF,IAAAA,EAAE,EAAED;AAD6B,GAAnC;AAGA,QAAMI,yBAAyB,GAAG;AAChCH,IAAAA,EAAE,EAAEC;AAD4B,GAAlC,CAV0F,CAYvF;;AAEH,UAAQA,kBAAR;AACE,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,cAAL;AACA,SAAK,SAAL;AACEE,MAAAA,yBAAyB,CAACC,EAA1B,GAA+B5B,UAAU,CAACsB,gBAAgB,CAACO,UAAlB,EAA8BxB,aAAa,CAACoB,kBAAD,CAA3C,CAAzC;AACA;;AAEF,SAAK,SAAL;AACE;AACE,cAAMK,eAAe,GAAG9B,UAAU,CAACsB,gBAAgB,CAACO,UAAlB,EAA8BvB,eAA9B,CAAlC;AACA,cAAMyB,mBAAmB,GAAGtB,mBAAmB,CAACqB,eAAe,CAACC,mBAAjB,CAA/C;AACAJ,QAAAA,yBAAyB,CAACC,EAA1B,GAA+BE,eAAe,CAACF,EAA/C,CAHF,CAGqD;AACnD;;AAEA,gBAAQG,mBAAR;AACE,eAAK,GAAL;AACEJ,YAAAA,yBAAyB,CAACK,IAA1B,GAAiC,EAAjC;AACA;;AAEF,eAAK,GAAL;AACEL,YAAAA,yBAAyB,CAACK,IAA1B,GAAiC,EAAjC;AACA;;AAEF,eAAK,EAAL;AACEL,YAAAA,yBAAyB,CAACK,IAA1B,GAAiC,GAAjC;AACA;;AAEF;AACE,kBAAM,IAAIrB,yBAAJ,CAA+B,iDAAgDoB,mBAAoB,GAAnG,CAAN;AAdJ;;AAiBA;AACD;;AAEH;AACE,YAAM,IAAIpB,yBAAJ,CAA+B,gDAA+CW,gBAAgB,CAACE,EAAG,GAAlG,CAAN;AArCJ,GAd0F,CAoDxF;;;AAGF,UAAQD,mBAAR;AACE,SAAK,QAAL;AACE;AACE,cAAMU,YAAY,GAAGjC,UAAU,CAACqB,iBAAiB,CAACQ,UAAnB,EAA+BzB,YAA/B,CAA/B;AACA,cAAM8B,KAAK,GAAGnB,IAAI,CAACkB,YAAY,CAACE,GAAb,CAAiBX,EAAlB,CAAlB;AACA;;AAEA,YAAIS,YAAY,CAACG,IAAb,CAAkBC,IAAlB,KAA2B,WAA/B,EAA4C;AAC1C,gBAAM,IAAI1B,yBAAJ,CAA8B,kDAA9B,CAAN;AACD;;AAED,YAAI,CAACuB,KAAL,EAAY;AACV,gBAAM,IAAIvB,yBAAJ,CAA+B,kCAAiCsB,YAAY,CAACE,GAAb,CAAiBX,EAAG,GAApF,CAAN;AACD;;AAEDE,QAAAA,0BAA0B,CAACU,IAA3B,GAAkCH,YAAY,CAACG,IAAb,CAAkBE,KAApD;AACAZ,QAAAA,0BAA0B,CAACa,cAA3B,GAA4C9B,mBAAmB,CAACwB,YAAY,CAACM,cAAd,CAA/D;AACAb,QAAAA,0BAA0B,CAACS,GAA3B,GAAiCD,KAAjC;;AAEA,YAAID,YAAY,CAACO,SAAjB,EAA4B;AAC1Bd,UAAAA,0BAA0B,CAACc,SAA3B,GAAuC/B,mBAAmB,CAACwB,YAAY,CAACO,SAAd,CAA1D;AACD;;AAED;AACD;;AAEH;AACE,YAAM,IAAI7B,yBAAJ,CAA+B,sDAAqDU,iBAAiB,CAACG,EAAG,GAAzG,CAAN;AA3BJ;;AA8BA,QAAMiB,mBAAmB,GAAG;AAC1BpB,IAAAA,iBAAiB,EAAEK,0BADO;AAE1BJ,IAAAA,gBAAgB,EAAEK;AAFQ,GAA5B;AAIA,QAAMe,aAAa,GAAGlC,mBAAmB,CAACU,aAAD,EAAgBuB,mBAAhB,EAAqCrB,QAArC,CAAzC;AACA,SAAO;AACLqB,IAAAA,mBADK;AAELC,IAAAA;AAFK,GAAP;AAID,CA9FM;AA+FP,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOH,mBAAP,EAA4BrB,QAA5B,KAAyC;AACvEqB,EAAAA,mBAAmB,GAAG3B,2BAA2B,CAAC2B,mBAAD,EAAsB,QAAtB,EAAgC,YAAhC,CAAjD;AACA,QAAM;AACJpB,IAAAA,iBADI;AAEJC,IAAAA;AAFI,MAGFmB,mBAHJ;AAIA,MAAII,kCAAJ;AACA,MAAIC,mCAAJ,CAPuE,CAO9B;;AAEzC,UAAQxB,gBAAgB,CAACE,EAAzB;AACE,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,cAAL;AACA,SAAK,SAAL;AACEqB,MAAAA,kCAAkC,GAAG,CAAC;AACpCjB,QAAAA;AADoC,OAAD,KAE/B3B,UAAU,CAAC2B,EAAD,EAAKvB,aAAa,CAACiB,gBAAgB,CAACE,EAAlB,CAAlB,CAFhB;;AAIA;;AAEF,SAAK,SAAL;AACEqB,MAAAA,kCAAkC,GAAG,CAAC;AACpCjB,QAAAA,EADoC;AAEpCI,QAAAA;AAFoC,OAAD,KAG/B;AACJ,YAAID,mBAAJ,CADI,CACqB;AACzB;;AAEA,gBAAQC,IAAR;AACE,eAAK,EAAL;AACED,YAAAA,mBAAmB,GAAG,GAAtB;AACA;;AAEF,eAAK,EAAL;AACEA,YAAAA,mBAAmB,GAAG,GAAtB;AACA;;AAEF,eAAK,GAAL;AACEA,YAAAA,mBAAmB,GAAG,EAAtB;AACA;;AAEF;AACE,kBAAM,IAAIpB,yBAAJ,CAA+B,8CAA6CoB,mBAAoB,GAAhG,CAAN;AAdJ;;AAiBA,eAAO9B,UAAU,CAAC;AAChB2B,UAAAA,EADgB;AAEhBG,UAAAA;AAFgB,SAAD,EAGdzB,eAHc,CAAjB;AAID,OA5BD;;AA8BA;;AAEF;AACE,YAAM,IAAIK,yBAAJ,CAA+B,qCAAoCW,gBAAgB,CAACE,EAAG,GAAvF,CAAN;AA9CJ,GATuE,CAwDrE;;;AAGF,UAAQH,iBAAiB,CAACG,EAA1B;AACE,SAAK,QAAL;AACEsB,MAAAA,mCAAmC,GAAG,CAAC;AACrCV,QAAAA,IADqC;AAErCG,QAAAA,cAFqC;AAGrCJ,QAAAA;AAHqC,OAAD,KAIhClC,UAAU,CAAC;AACfmC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,WADF;AAEJC,UAAAA,KAAK,EAAEF;AAFH,SADS;AAKfG,QAAAA,cALe;AAMfC,QAAAA,SAAS,EAAEnB,iBAAiB,CAACmB,SANd;AAOfL,QAAAA,GAAG,EAAE;AACHX,UAAAA,EAAE,EAAER,YAAY,CAACmB,GAAD,CADb;AAEHN,UAAAA,UAAU,EAAEnB,qBAAqB,CAAC,MAAD;AAF9B;AAPU,OAAD,EAWbN,YAXa,CAJhB;;AAiBA;;AAEF;AACE,YAAM,IAAIO,yBAAJ,CAA+B,2CAA0CU,iBAAiB,CAACG,EAAG,GAA9F,CAAN;AAtBJ;;AAyBA,QAAM;AACJN,IAAAA,aADI;AAEJ6B,IAAAA;AAFI,MAGFxC,mBAAmB,CAACqC,IAAD,EAAOH,mBAAP,EAA4BrB,QAA5B,CAHvB;AAIA,QAAMD,6BAA6B,GAAGlB,UAAU,CAAC;AAC/CoB,IAAAA,iBAAiB,EAAE;AACjBG,MAAAA,EAAE,EAAER,YAAY,CAACK,iBAAiB,CAACG,EAAnB,CADC;AAEjBK,MAAAA,UAAU,EAAEiB,mCAAmC,CAACC,4BAA4B,CAAC1B,iBAA9B;AAF9B,KAD4B;AAK/CC,IAAAA,gBAAgB,EAAE;AAChBE,MAAAA,EAAE,EAAER,YAAY,CAACM,gBAAgB,CAACE,EAAlB,CADA;AAEhBK,MAAAA,UAAU,EAAEgB,kCAAkC,CAACE,4BAA4B,CAACzB,gBAA9B;AAF9B;AAL6B,GAAD,EAS7CnB,eAT6C,CAAhD;AAUA,SAAO;AACLgB,IAAAA,6BADK;AAELD,IAAAA;AAFK,GAAP;AAID,CAtGM;AAuGP,OAAO,MAAM8B,0BAA0B,GAAG,CAACC,2BAAD,EAA8B7B,QAA9B,KAA2C;AACnF,MAAI8B,uBAAJ;;AAEA,MAAI;AACFA,IAAAA,uBAAuB,GAAGlD,UAAU,CAACiD,2BAAD,EAA8B/C,uBAA9B,CAApC;AACD,GAFD,CAEE,OAAOiD,GAAP,EAAY;AACZ;AACA,QAAIA,GAAG,YAAYvC,qBAAnB,EAA0C;AACxC,aAAO;AACL6B,QAAAA,mBAAmB,EAAE,IADhB;AAELW,QAAAA,kBAAkB,EAAEH;AAFf,OAAP;AAID;AACD;;;AAGA,UAAME,GAAN;AACD;;AAED,MAAI,CAAC/B,QAAL,EAAe;AACb,UAAM,IAAIP,oBAAJ,CAAyB,gDAAzB,CAAN;AACD;;AAED,QAAM;AACJ4B,IAAAA,mBADI;AAEJvB,IAAAA;AAFI,MAGFgC,uBAHJ;AAIA,QAAMG,qBAAqB,GAAGtC,IAAI,CAAC0B,mBAAmB,CAACjB,EAArB,CAAlC;AACA,QAAML,6BAA6B,GAAGsB,mBAAmB,CAACZ,UAA1D;AACA,MAAIyB,gBAAJ;;AAEA,UAAQD,qBAAR;AACE,SAAK,OAAL;AACEC,MAAAA,gBAAgB,GAAGrC,gBAAgB,CAACC,aAAD,EAAgBC,6BAAhB,EAA+CC,QAA/C,CAAnC;AACA;;AAEF;AACE,YAAM,IAAIT,yBAAJ,CAA+B,yCAAwC8B,mBAAmB,CAACjB,EAAG,GAA9F,CAAN;AANJ;;AASA,SAAO;AACLiB,IAAAA,mBAAmB,EAAEa,gBAAgB,CAACb,mBADjC;AAELW,IAAAA,kBAAkB,EAAEE,gBAAgB,CAACZ;AAFhC,GAAP;AAID,CA5CM;AA6CP,OAAO,MAAMa,0BAA0B,GAAG,CAACH,kBAAD,EAAqBX,mBAArB,EAA0CrB,QAA1C,KAAuD;AAC/F,MAAI,CAACA,QAAD,IAAa,CAACqB,mBAAlB,EAAuC;AACrC,WAAOW,kBAAP;AACD;;AAED,MAAI,CAAChC,QAAD,IAAaqB,mBAAjB,EAAsC;AACpC,UAAM,IAAI5B,oBAAJ,CAAyB,+DAAzB,CAAN;AACD;;AAED,QAAM;AACJK,IAAAA,aADI;AAEJC,IAAAA;AAFI,MAGFwB,gBAAgB,CAACS,kBAAD,EAAqBX,mBAArB,EAA0CrB,QAA1C,CAHpB;AAIA,QAAM6B,2BAA2B,GAAGhD,UAAU,CAAC;AAC7CwC,IAAAA,mBAAmB,EAAE;AACnBjB,MAAAA,EAAE,EAAER,YAAY,CAACwC,KADE;AAEnB3B,MAAAA,UAAU,EAAEV;AAFO,KADwB;AAK7CD,IAAAA;AAL6C,GAAD,EAM3ChB,uBAN2C,CAA9C;AAOA,SAAO+C,2BAAP;AACD,CArBM","sourcesContent":["import { decodeAsn1, encodeAsn1 } from '../../util/asn1-encoder';\nimport { EncryptedPrivateKeyInfo, Pbes2Algorithms, Pbkdf2Params, Pbes2EsParams, Rc2CbcParameter } from '../../util/asn1-entities';\nimport { encryptWithPassword, decryptWithPassword } from '../../util/pbe';\nimport { uint8ArrayToInteger, hexStringToUint8Array } from '../../util/binary';\nimport { UnsupportedAlgorithmError, DecodeAsn1FailedError, MissingPasswordError } from '../../util/errors';\nimport { validateEncryptionAlgorithm } from '../../util/validator';\nimport { OIDS, FLIPPED_OIDS } from '../../util/oids';\nexport const decryptWithPBES2 = (encryptedData, encryptionAlgorithmParamsAsn1, password) => {\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = decodeAsn1(encryptionAlgorithmParamsAsn1, Pbes2Algorithms);\n  const keyDerivationFuncId = OIDS[keyDerivationFunc.id];\n  const encryptionSchemeId = OIDS[encryptionScheme.id];\n  const effectiveKeyDerivationFunc = {\n    id: keyDerivationFuncId\n  };\n  const effectiveEncryptionScheme = {\n    id: encryptionSchemeId\n  }; // Process encryption scheme\n\n  switch (encryptionSchemeId) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n    case 'des-ede3-cbc':\n    case 'des-cbc':\n      effectiveEncryptionScheme.iv = decodeAsn1(encryptionScheme.parameters, Pbes2EsParams[encryptionSchemeId]);\n      break;\n\n    case 'rc2-cbc':\n      {\n        const rc2CBCParameter = decodeAsn1(encryptionScheme.parameters, Rc2CbcParameter);\n        const rc2ParameterVersion = uint8ArrayToInteger(rc2CBCParameter.rc2ParameterVersion);\n        effectiveEncryptionScheme.iv = rc2CBCParameter.iv; // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n        // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n\n        switch (rc2ParameterVersion) {\n          case 160:\n            effectiveEncryptionScheme.bits = 40;\n            break;\n\n          case 120:\n            effectiveEncryptionScheme.bits = 64;\n            break;\n\n          case 58:\n            effectiveEncryptionScheme.bits = 128;\n            break;\n\n          default:\n            throw new UnsupportedAlgorithmError(`Unsupported RC2 version parameter with value '${rc2ParameterVersion}'`);\n        }\n\n        break;\n      }\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme algorithm OID '${encryptionScheme.id}'`);\n  } // Process key derivation func\n\n\n  switch (keyDerivationFuncId) {\n    case 'pbkdf2':\n      {\n        const pbkdf2Params = decodeAsn1(keyDerivationFunc.parameters, Pbkdf2Params);\n        const prfId = OIDS[pbkdf2Params.prf.id];\n        /* istanbul ignore if */\n\n        if (pbkdf2Params.salt.type !== 'specified') {\n          throw new UnsupportedAlgorithmError('Only \\'specified\\' salts are supported in PBKDF2');\n        }\n\n        if (!prfId) {\n          throw new UnsupportedAlgorithmError(`Unsupported prf algorithm OID '${pbkdf2Params.prf.id}'`);\n        }\n\n        effectiveKeyDerivationFunc.salt = pbkdf2Params.salt.value;\n        effectiveKeyDerivationFunc.iterationCount = uint8ArrayToInteger(pbkdf2Params.iterationCount);\n        effectiveKeyDerivationFunc.prf = prfId;\n\n        if (pbkdf2Params.keyLength) {\n          effectiveKeyDerivationFunc.keyLength = uint8ArrayToInteger(pbkdf2Params.keyLength);\n        }\n\n        break;\n      }\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function algorithm OID '${keyDerivationFunc.id}'`);\n  }\n\n  const encryptionAlgorithm = {\n    keyDerivationFunc: effectiveKeyDerivationFunc,\n    encryptionScheme: effectiveEncryptionScheme\n  };\n  const decryptedData = decryptWithPassword(encryptedData, encryptionAlgorithm, password);\n  return {\n    encryptionAlgorithm,\n    decryptedData\n  };\n};\nexport const encryptWithPBES2 = (data, encryptionAlgorithm, password) => {\n  encryptionAlgorithm = validateEncryptionAlgorithm(encryptionAlgorithm, 'pbkdf2', 'aes256-cbc');\n  const {\n    keyDerivationFunc,\n    encryptionScheme\n  } = encryptionAlgorithm;\n  let encodeEncryptionSchemeAsn1ParamsFn;\n  let encodeKeyDerivationFuncAsn1ParamsFn; // Process encryption scheme\n\n  switch (encryptionScheme.id) {\n    case 'aes128-cbc':\n    case 'aes192-cbc':\n    case 'aes256-cbc':\n    case 'des-ede3-cbc':\n    case 'des-cbc':\n      encodeEncryptionSchemeAsn1ParamsFn = ({\n        iv\n      }) => encodeAsn1(iv, Pbes2EsParams[encryptionScheme.id]);\n\n      break;\n\n    case 'rc2-cbc':\n      encodeEncryptionSchemeAsn1ParamsFn = ({\n        iv,\n        bits\n      }) => {\n        let rc2ParameterVersion; // RC2-CBCParameter encoding of the \"effective key bits\" as defined in:\n        // https://tools.ietf.org/html/rfc2898#appendix-B.2.3\n\n        switch (bits) {\n          case 40:\n            rc2ParameterVersion = 160;\n            break;\n\n          case 64:\n            rc2ParameterVersion = 120;\n            break;\n\n          case 128:\n            rc2ParameterVersion = 58;\n            break;\n\n          default:\n            throw new UnsupportedAlgorithmError(`Unsupported RC2 bits parameter with value '${rc2ParameterVersion}'`);\n        }\n\n        return encodeAsn1({\n          iv,\n          rc2ParameterVersion\n        }, Rc2CbcParameter);\n      };\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption scheme id '${encryptionScheme.id}'`);\n  } // Process key derivation name\n\n\n  switch (keyDerivationFunc.id) {\n    case 'pbkdf2':\n      encodeKeyDerivationFuncAsn1ParamsFn = ({\n        salt,\n        iterationCount,\n        prf\n      }) => encodeAsn1({\n        salt: {\n          type: 'specified',\n          value: salt\n        },\n        iterationCount,\n        keyLength: keyDerivationFunc.keyLength,\n        prf: {\n          id: FLIPPED_OIDS[prf],\n          parameters: hexStringToUint8Array('0500')\n        }\n      }, Pbkdf2Params);\n\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported key derivation function id '${keyDerivationFunc.id}'`);\n  }\n\n  const {\n    encryptedData,\n    effectiveEncryptionAlgorithm\n  } = encryptWithPassword(data, encryptionAlgorithm, password);\n  const encryptionAlgorithmParamsAsn1 = encodeAsn1({\n    keyDerivationFunc: {\n      id: FLIPPED_OIDS[keyDerivationFunc.id],\n      parameters: encodeKeyDerivationFuncAsn1ParamsFn(effectiveEncryptionAlgorithm.keyDerivationFunc)\n    },\n    encryptionScheme: {\n      id: FLIPPED_OIDS[encryptionScheme.id],\n      parameters: encodeEncryptionSchemeAsn1ParamsFn(effectiveEncryptionAlgorithm.encryptionScheme)\n    }\n  }, Pbes2Algorithms);\n  return {\n    encryptionAlgorithmParamsAsn1,\n    encryptedData\n  };\n};\nexport const maybeDecryptPrivateKeyInfo = (encryptedPrivateKeyInfoAsn1, password) => {\n  let encryptedPrivateKeyInfo;\n\n  try {\n    encryptedPrivateKeyInfo = decodeAsn1(encryptedPrivateKeyInfoAsn1, EncryptedPrivateKeyInfo);\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof DecodeAsn1FailedError) {\n      return {\n        encryptionAlgorithm: null,\n        privateKeyInfoAsn1: encryptedPrivateKeyInfoAsn1\n      };\n    }\n    /* istanbul ignore next */\n\n\n    throw err;\n  }\n\n  if (!password) {\n    throw new MissingPasswordError('Please specify the password to decrypt the key');\n  }\n\n  const {\n    encryptionAlgorithm,\n    encryptedData\n  } = encryptedPrivateKeyInfo;\n  const encryptionAlgorithmId = OIDS[encryptionAlgorithm.id];\n  const encryptionAlgorithmParamsAsn1 = encryptionAlgorithm.parameters;\n  let decryptionResult;\n\n  switch (encryptionAlgorithmId) {\n    case 'pbes2':\n      decryptionResult = decryptWithPBES2(encryptedData, encryptionAlgorithmParamsAsn1, password);\n      break;\n\n    default:\n      throw new UnsupportedAlgorithmError(`Unsupported encryption algorithm OID '${encryptionAlgorithm.id}'`);\n  }\n\n  return {\n    encryptionAlgorithm: decryptionResult.encryptionAlgorithm,\n    privateKeyInfoAsn1: decryptionResult.decryptedData\n  };\n};\nexport const maybeEncryptPrivateKeyInfo = (privateKeyInfoAsn1, encryptionAlgorithm, password) => {\n  if (!password && !encryptionAlgorithm) {\n    return privateKeyInfoAsn1;\n  }\n\n  if (!password && encryptionAlgorithm) {\n    throw new MissingPasswordError('An encryption algorithm was specified but no password was set');\n  }\n\n  const {\n    encryptedData,\n    encryptionAlgorithmParamsAsn1\n  } = encryptWithPBES2(privateKeyInfoAsn1, encryptionAlgorithm, password);\n  const encryptedPrivateKeyInfoAsn1 = encodeAsn1({\n    encryptionAlgorithm: {\n      id: FLIPPED_OIDS.pbes2,\n      parameters: encryptionAlgorithmParamsAsn1\n    },\n    encryptedData\n  }, EncryptedPrivateKeyInfo);\n  return encryptedPrivateKeyInfoAsn1;\n};"]},"metadata":{},"sourceType":"module"}