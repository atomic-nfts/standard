{"ast":null,"code":"/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\n\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n  var cur_accum,\n      cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n\n  var maxcode;\n  var remaining;\n  var curPixel;\n  var n_bits; // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n\n  var clear_flg = false; // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n\n  var g_init_bits, ClearCode, EOFCode; // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  } // Clear out the hash table\n  // table clear for block compress\n\n\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  } // Reset code table\n\n\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift; // Set up the globals: g_init_bits - initial number of bits\n\n    g_init_bits = init_bits; // Set up the necessary values\n\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n    ClearCode = 1 << init_bits - 1;\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n    hshift = 0;\n\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n\n    hshift = 8 - hshift; // set hash code range bound\n\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = c << hshift ^ ent; // xor hashing\n\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) {\n        // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n\n        if (i === 0) disp = 1;\n\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n\n      output(ent, outs);\n      ent = c;\n\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    } // Put out the final code.\n\n\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n\n    remaining = width * height; // reset navigation variables\n\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n\n    outs.writeByte(0); // write block terminator\n  } // Flush the packet to disk, and reset the accumulator\n\n\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  } // Return the next pixel from the image\n\n\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n    if (cur_bits > 0) cur_accum |= code << cur_bits;else cur_accum = code;\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out(cur_accum & 0xff, outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    } // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n\n\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out(cur_accum & 0xff, outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/gif-encoder/lib/LZWEncoder.js"],"names":["EOF","BITS","HSIZE","masks","LZWEncoder","width","height","pixels","colorDepth","initCodeSize","Math","max","accum","Uint8Array","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","remaining","curPixel","n_bits","clear_flg","g_init_bits","ClearCode","EOFCode","char_out","c","outs","flush_char","cl_block","cl_hash","output","hsize","i","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","encode","writeByte","writeBytes","pix","code","module","exports"],"mappings":"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","sourcesContent":["/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n  var remaining;\n  var curPixel;\n  var n_bits;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n"]},"metadata":{},"sourceType":"script"}