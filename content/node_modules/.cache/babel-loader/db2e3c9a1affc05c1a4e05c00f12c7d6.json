{"ast":null,"code":"import isPlainObject from 'lodash.isplainobject';\n\nfunction forEachObject(obj, fn, path) {\n  for (const key in obj) {\n    const deepPath = path ? `${path}.${key}` : key; // Note that we always use obj[key] because it might be mutated by forEach\n\n    fn.call(obj, obj[key], key, obj, deepPath);\n    forEach(obj[key], fn, deepPath);\n  }\n}\n\nfunction forEachArray(array, fn, path) {\n  array.forEach((value, index, arr) => {\n    const deepPath = `${path}[${index}]`;\n    fn.call(arr, value, index, arr, deepPath); // Note that we use arr[index] because it might be mutated by forEach\n\n    forEach(arr[index], fn, deepPath);\n  });\n}\n\nfunction forEach(value, fn, path) {\n  path = path || '';\n\n  if (Array.isArray(value)) {\n    forEachArray(value, fn, path);\n  } else if (isPlainObject(value)) {\n    forEachObject(value, fn, path);\n  }\n}\n\nexport default forEach;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/deep-for-each/es/index.js"],"names":["isPlainObject","forEachObject","obj","fn","path","key","deepPath","call","forEach","forEachArray","array","value","index","arr","Array","isArray"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,sBAA1B;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,EAA5B,EAAgCC,IAAhC,EAAsC;AACpC,OAAK,MAAMC,GAAX,IAAkBH,GAAlB,EAAuB;AACrB,UAAMI,QAAQ,GAAGF,IAAI,GAAI,GAAEA,IAAK,IAAGC,GAAI,EAAlB,GAAsBA,GAA3C,CADqB,CAC2B;;AAEhDF,IAAAA,EAAE,CAACI,IAAH,CAAQL,GAAR,EAAaA,GAAG,CAACG,GAAD,CAAhB,EAAuBA,GAAvB,EAA4BH,GAA5B,EAAiCI,QAAjC;AACAE,IAAAA,OAAO,CAACN,GAAG,CAACG,GAAD,CAAJ,EAAWF,EAAX,EAAeG,QAAf,CAAP;AACD;AACF;;AAED,SAASG,YAAT,CAAsBC,KAAtB,EAA6BP,EAA7B,EAAiCC,IAAjC,EAAuC;AACrCM,EAAAA,KAAK,CAACF,OAAN,CAAc,CAACG,KAAD,EAAQC,KAAR,EAAeC,GAAf,KAAuB;AACnC,UAAMP,QAAQ,GAAI,GAAEF,IAAK,IAAGQ,KAAM,GAAlC;AACAT,IAAAA,EAAE,CAACI,IAAH,CAAQM,GAAR,EAAaF,KAAb,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCP,QAAhC,EAFmC,CAEQ;;AAE3CE,IAAAA,OAAO,CAACK,GAAG,CAACD,KAAD,CAAJ,EAAaT,EAAb,EAAiBG,QAAjB,CAAP;AACD,GALD;AAMD;;AAED,SAASE,OAAT,CAAiBG,KAAjB,EAAwBR,EAAxB,EAA4BC,IAA5B,EAAkC;AAChCA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,MAAIU,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxBF,IAAAA,YAAY,CAACE,KAAD,EAAQR,EAAR,EAAYC,IAAZ,CAAZ;AACD,GAFD,MAEO,IAAIJ,aAAa,CAACW,KAAD,CAAjB,EAA0B;AAC/BV,IAAAA,aAAa,CAACU,KAAD,EAAQR,EAAR,EAAYC,IAAZ,CAAb;AACD;AACF;;AAED,eAAeI,OAAf","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\n\nfunction forEachObject(obj, fn, path) {\n  for (const key in obj) {\n    const deepPath = path ? `${path}.${key}` : key; // Note that we always use obj[key] because it might be mutated by forEach\n\n    fn.call(obj, obj[key], key, obj, deepPath);\n    forEach(obj[key], fn, deepPath);\n  }\n}\n\nfunction forEachArray(array, fn, path) {\n  array.forEach((value, index, arr) => {\n    const deepPath = `${path}[${index}]`;\n    fn.call(arr, value, index, arr, deepPath); // Note that we use arr[index] because it might be mutated by forEach\n\n    forEach(arr[index], fn, deepPath);\n  });\n}\n\nfunction forEach(value, fn, path) {\n  path = path || '';\n\n  if (Array.isArray(value)) {\n    forEachArray(value, fn, path);\n  } else if (isPlainObject(value)) {\n    forEachObject(value, fn, path);\n  }\n}\n\nexport default forEach;"]},"metadata":{},"sourceType":"module"}