{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readContract = void 0;\n\nvar contract_load_1 = require(\"./contract-load\");\n\nvar utils_1 = require(\"./utils\");\n\nvar contract_step_1 = require(\"./contract-step\");\n\nvar errors_1 = __importDefault(require(\"./errors\"));\n\nvar cache = {};\n/**\n * Queries all interaction transactions and replays a contract to its latest state.\n *\n * If height is provided, will replay only to that block height.\n *\n * @param arweave         an Arweave client instance\n * @param contractId      the Transaction Id of the contract\n * @param height          if specified the contract will be replayed only to this block height\n * @param returnValidity  if true, the function will return valid and invalid transaction IDs along with the state\n */\n\nfunction readContract(arweave, contractId, height, returnValidity) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var networkInfo, res, loadPromise, fetchTxPromise, _yield$Promise$all, _yield$Promise$all2, contractInfo, txInfos, state, contractSrc, _contractInfo, handler, swGlobal, validity, heights, max, _res, _iterator, _step, txInfo, currentTx, contractIndex, inputTag, input, interaction, result, settings, evolve, canEvolve, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (height) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return arweave.network.getInfo();\n\n          case 3:\n            networkInfo = _context.sent;\n            height = networkInfo.height;\n\n          case 5:\n            if (!(contractId in cache)) {\n              _context.next = 9;\n              break;\n            }\n\n            if (!(height in cache[contractId])) {\n              _context.next = 9;\n              break;\n            }\n\n            res = JSON.parse(cache[contractId][height]);\n            return _context.abrupt(\"return\", returnValidity ? {\n              state: res.state,\n              validity: res.validity\n            } : res.state);\n\n          case 9:\n            loadPromise = contract_load_1.loadContract(arweave, contractId).catch(function (err) {\n              var error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n              /* CONTRACT_NOT_FOUND */\n              , {\n                message: \"Contract having txId: \".concat(contractId, \" not found\"),\n                requestedTxId: contractId\n              });\n              throw error;\n            });\n            fetchTxPromise = fetchTransactions(arweave, contractId, height).catch(function (err) {\n              return err;\n            }); // tslint:disable-next-line: prefer-const\n\n            _context.next = 13;\n            return Promise.all([loadPromise, fetchTxPromise]);\n\n          case 13:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            contractInfo = _yield$Promise$all2[0];\n            txInfos = _yield$Promise$all2[1];\n\n            if (!(contractInfo instanceof Error)) {\n              _context.next = 19;\n              break;\n            }\n\n            throw contractInfo;\n\n          case 19:\n            if (!(txInfos instanceof Error)) {\n              _context.next = 21;\n              break;\n            }\n\n            throw txInfos;\n\n          case 21:\n            contractSrc = contractInfo.contractSrc;\n            _context.prev = 22;\n            state = JSON.parse(contractInfo.initState);\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](22);\n            throw new Error(\"Unable to parse initial state for contract: \".concat(contractId));\n\n          case 29:\n            utils_1.log(arweave, \"Replaying \".concat(txInfos.length, \" confirmed interactions\"));\n            _context.next = 32;\n            return sortTransactions(arweave, txInfos);\n\n          case 32:\n            // tslint:disable-next-line: prefer-const\n            _contractInfo = contractInfo, handler = _contractInfo.handler, swGlobal = _contractInfo.swGlobal;\n            validity = {};\n\n            if (contractId in cache) {\n              heights = Object.keys(cache[contractId]).filter(function (item) {\n                return +item < height;\n              }).map(function (item) {\n                return +item;\n              });\n\n              if (heights.length) {\n                max = Math.max.apply(Math, _toConsumableArray(heights));\n                txInfos = txInfos.filter(function (item) {\n                  return item.node.block.height > max;\n                });\n                _res = JSON.parse(cache[contractId][max]);\n                state = _res.state;\n                validity = _res.validity;\n              }\n            }\n\n            _iterator = _createForOfIteratorHelper(txInfos);\n            _context.prev = 36;\n\n            _iterator.s();\n\n          case 38:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 87;\n              break;\n            }\n\n            txInfo = _step.value;\n            currentTx = txInfo.node;\n            contractIndex = txInfo.node.tags.findIndex(function (tag) {\n              return tag.name === 'Contract' && tag.value === contractId;\n            });\n            inputTag = txInfo.node.tags[contractIndex + 1];\n\n            if (!(!inputTag || inputTag.name !== 'Input')) {\n              _context.next = 46;\n              break;\n            }\n\n            utils_1.log(arweave, \"Skipping tx with missing or invalid Input tag - \".concat(currentTx.id));\n            return _context.abrupt(\"continue\", 85);\n\n          case 46:\n            input = inputTag.value;\n            _context.prev = 47;\n            input = JSON.parse(input);\n            _context.next = 55;\n            break;\n\n          case 51:\n            _context.prev = 51;\n            _context.t1 = _context[\"catch\"](47);\n            utils_1.log(arweave, _context.t1);\n            return _context.abrupt(\"continue\", 85);\n\n          case 55:\n            if (input) {\n              _context.next = 58;\n              break;\n            }\n\n            utils_1.log(arweave, \"Skipping tx with missing or invalid Input tag - \".concat(currentTx.id));\n            return _context.abrupt(\"continue\", 85);\n\n          case 58:\n            interaction = {\n              input: input,\n              caller: currentTx.owner.address\n            };\n            swGlobal._activeTx = currentTx;\n            _context.next = 62;\n            return contract_step_1.execute(handler, interaction, state);\n\n          case 62:\n            result = _context.sent;\n\n            if (result.type === 'exception') {\n              utils_1.log(arweave, \"\".concat(result.result));\n              utils_1.log(arweave, \"Executing of interaction: \".concat(currentTx.id, \" threw exception.\"));\n            }\n\n            if (result.type === 'error') {\n              utils_1.log(arweave, \"\".concat(result.result));\n              utils_1.log(arweave, \"Executing of interaction: \".concat(currentTx.id, \" returned error.\"));\n            }\n\n            validity[currentTx.id] = result.type === 'ok';\n            state = result.state;\n            settings = new Map();\n\n            try {\n              if (state.settings) settings = new Map(state.settings);\n            } catch (_a) {}\n\n            evolve = state.evolve || settings.get('evolve');\n            canEvolve = state.canEvolve || settings.get('canEvolve'); // By default, contracts can evolve if there's not an explicit `false`.\n\n            if (canEvolve === undefined || canEvolve === null) {\n              canEvolve = true;\n            }\n\n            if (!(evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve)) {\n              _context.next = 85;\n              break;\n            }\n\n            if (!(contractSrc !== state.evolve)) {\n              _context.next = 85;\n              break;\n            }\n\n            _context.prev = 74;\n            _context.next = 77;\n            return contract_load_1.loadContract(arweave, contractId, evolve);\n\n          case 77:\n            contractInfo = _context.sent;\n            handler = contractInfo.handler;\n            _context.next = 85;\n            break;\n\n          case 81:\n            _context.prev = 81;\n            _context.t2 = _context[\"catch\"](74);\n            error = new errors_1.default(\"CONTRACT_NOT_FOUND\"\n            /* CONTRACT_NOT_FOUND */\n            , {\n              message: \"Contract having txId: \".concat(contractId, \" not found\"),\n              requestedTxId: contractId\n            });\n            throw error;\n\n          case 85:\n            _context.next = 38;\n            break;\n\n          case 87:\n            _context.next = 92;\n            break;\n\n          case 89:\n            _context.prev = 89;\n            _context.t3 = _context[\"catch\"](36);\n\n            _iterator.e(_context.t3);\n\n          case 92:\n            _context.prev = 92;\n\n            _iterator.f();\n\n            return _context.finish(92);\n\n          case 95:\n            cache[contractId] = Object.assign(Object.assign({}, cache[contractId] || {}), _defineProperty({}, height, JSON.stringify({\n              state: state,\n              validity: validity\n            })));\n            return _context.abrupt(\"return\", returnValidity ? {\n              state: state,\n              validity: validity\n            } : state);\n\n          case 97:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[22, 26], [36, 89, 92, 95], [47, 51], [74, 81]]);\n  }));\n}\n\nexports.readContract = readContract; // Sort the transactions based on the sort key generated in addSortKey()\n\nfunction sortTransactions(arweave, txInfos) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var addKeysFuncs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            addKeysFuncs = txInfos.map(function (tx) {\n              return addSortKey(arweave, tx);\n            });\n            _context2.next = 3;\n            return Promise.all(addKeysFuncs);\n\n          case 3:\n            txInfos.sort(function (a, b) {\n              return a.sortKey.localeCompare(b.sortKey);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n} // Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\n\n\nfunction addSortKey(arweave, txInfo) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var node, blockHashBytes, txIdBytes, concatted, hashed, blockHeight;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            node = txInfo.node;\n            blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n            txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n            concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n            _context3.t0 = utils_1;\n            _context3.next = 7;\n            return arweave.crypto.hash(concatted);\n\n          case 7:\n            _context3.t1 = _context3.sent;\n            hashed = _context3.t0.arrayToHex.call(_context3.t0, _context3.t1);\n            blockHeight = \"000000\".concat(node.block.height).slice(-12);\n            txInfo.sortKey = \"\".concat(blockHeight, \",\").concat(hashed);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n} // the maximum number of transactions we can get from graphql at once\n\n\nvar MAX_REQUEST = 100; // fetch all contract interactions up to the specified block height\n\nfunction fetchTransactions(arweave, contractId, height) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var variables, transactions, txInfos, cursor;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            variables = {\n              tags: [{\n                name: 'App-Name',\n                values: ['SmartWeaveAction']\n              }, {\n                name: 'Contract',\n                values: [contractId]\n              }],\n              blockFilter: {\n                max: height\n              },\n              first: MAX_REQUEST\n            };\n            _context4.next = 3;\n            return getNextPage(arweave, variables);\n\n          case 3:\n            transactions = _context4.sent;\n            txInfos = transactions.edges.filter(function (tx) {\n              return !tx.node.parent || !tx.node.parent.id;\n            });\n\n          case 5:\n            if (!transactions.pageInfo.hasNextPage) {\n              _context4.next = 14;\n              break;\n            }\n\n            cursor = transactions.edges[MAX_REQUEST - 1].cursor;\n            variables = Object.assign(Object.assign({}, variables), {\n              after: cursor\n            });\n            _context4.next = 10;\n            return getNextPage(arweave, variables);\n\n          case 10:\n            transactions = _context4.sent;\n            txInfos.push.apply(txInfos, _toConsumableArray(transactions.edges.filter(function (tx) {\n              return !tx.node.parent || !tx.node.parent.id;\n            })));\n            _context4.next = 5;\n            break;\n\n          case 14:\n            return _context4.abrupt(\"return\", txInfos);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nfunction getNextPage(arweave, variables) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var query, response, data, txs;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = \"query Transactions($tags: [TagFilter!]!, $blockFilter: BlockFilter!, $first: Int!, $after: String) {\\n    transactions(tags: $tags, block: $blockFilter, first: $first, sort: HEIGHT_ASC, after: $after) {\\n      pageInfo {\\n        hasNextPage\\n      }\\n      edges {\\n        node {\\n          id\\n          owner { address }\\n          recipient\\n          tags {\\n            name\\n            value\\n          }\\n          block {\\n            height\\n            id\\n            timestamp\\n          }\\n          fee { winston }\\n          quantity { winston }\\n          parent { id }\\n        }\\n        cursor\\n      }\\n    }\\n  }\";\n            _context5.next = 3;\n            return arweave.api.post('graphql', {\n              query: query,\n              variables: variables\n            });\n\n          case 3:\n            response = _context5.sent;\n\n            if (!(response.status !== 200)) {\n              _context5.next = 6;\n              break;\n            }\n\n            throw new Error(\"Unable to retrieve transactions. Arweave gateway responded with status \".concat(response.status, \".\"));\n\n          case 6:\n            data = response.data;\n            txs = data.data.transactions;\n            return _context5.abrupt(\"return\", txs);\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/@kyve/contract-lib/node_modules/smartweave/lib/contract-read.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","readContract","contract_load_1","require","utils_1","contract_step_1","errors_1","cache","arweave","contractId","height","returnValidity","network","getInfo","networkInfo","res","JSON","parse","state","validity","loadPromise","loadContract","catch","err","error","default","message","requestedTxId","fetchTxPromise","fetchTransactions","all","contractInfo","txInfos","Error","contractSrc","initState","log","length","sortTransactions","handler","swGlobal","heights","keys","filter","item","map","max","Math","node","block","txInfo","currentTx","contractIndex","tags","findIndex","tag","name","inputTag","id","input","interaction","caller","owner","address","_activeTx","execute","type","settings","Map","_a","evolve","get","canEvolve","undefined","test","assign","stringify","addKeysFuncs","tx","addSortKey","sort","a","b","sortKey","localeCompare","blockHashBytes","utils","b64UrlToBuffer","txIdBytes","concatted","concatBuffers","crypto","hash","hashed","arrayToHex","blockHeight","slice","MAX_REQUEST","variables","values","blockFilter","first","getNextPage","transactions","edges","parent","pageInfo","hasNextPage","cursor","after","push","query","api","post","response","status","data","txs"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readContract = void 0;\nconst contract_load_1 = require(\"./contract-load\");\nconst utils_1 = require(\"./utils\");\nconst contract_step_1 = require(\"./contract-step\");\nconst errors_1 = __importDefault(require(\"./errors\"));\nconst cache = {};\n/**\n * Queries all interaction transactions and replays a contract to its latest state.\n *\n * If height is provided, will replay only to that block height.\n *\n * @param arweave         an Arweave client instance\n * @param contractId      the Transaction Id of the contract\n * @param height          if specified the contract will be replayed only to this block height\n * @param returnValidity  if true, the function will return valid and invalid transaction IDs along with the state\n */\nfunction readContract(arweave, contractId, height, returnValidity) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!height) {\n            const networkInfo = yield arweave.network.getInfo();\n            height = networkInfo.height;\n        }\n        if (contractId in cache) {\n            if (height in cache[contractId]) {\n                const res = JSON.parse(cache[contractId][height]);\n                return returnValidity ? { state: res.state, validity: res.validity } : res.state;\n            }\n        }\n        const loadPromise = contract_load_1.loadContract(arweave, contractId).catch((err) => {\n            const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                message: `Contract having txId: ${contractId} not found`,\n                requestedTxId: contractId,\n            });\n            throw error;\n        });\n        const fetchTxPromise = fetchTransactions(arweave, contractId, height).catch((err) => err);\n        // tslint:disable-next-line: prefer-const\n        let [contractInfo, txInfos] = yield Promise.all([loadPromise, fetchTxPromise]);\n        if (contractInfo instanceof Error)\n            throw contractInfo;\n        if (txInfos instanceof Error)\n            throw txInfos;\n        let state;\n        const contractSrc = contractInfo.contractSrc;\n        try {\n            state = JSON.parse(contractInfo.initState);\n        }\n        catch (e) {\n            throw new Error(`Unable to parse initial state for contract: ${contractId}`);\n        }\n        utils_1.log(arweave, `Replaying ${txInfos.length} confirmed interactions`);\n        yield sortTransactions(arweave, txInfos);\n        // tslint:disable-next-line: prefer-const\n        let { handler, swGlobal } = contractInfo;\n        let validity = {};\n        if (contractId in cache) {\n            const heights = Object.keys(cache[contractId])\n                .filter((item) => +item < height)\n                .map((item) => +item);\n            if (heights.length) {\n                const max = Math.max(...heights);\n                txInfos = txInfos.filter((item) => item.node.block.height > max);\n                const res = JSON.parse(cache[contractId][max]);\n                state = res.state;\n                validity = res.validity;\n            }\n        }\n        for (const txInfo of txInfos) {\n            const currentTx = txInfo.node;\n            const contractIndex = txInfo.node.tags.findIndex((tag) => tag.name === 'Contract' && tag.value === contractId);\n            const inputTag = txInfo.node.tags[contractIndex + 1];\n            if (!inputTag || inputTag.name !== 'Input') {\n                utils_1.log(arweave, `Skipping tx with missing or invalid Input tag - ${currentTx.id}`);\n                continue;\n            }\n            let input = inputTag.value;\n            try {\n                input = JSON.parse(input);\n            }\n            catch (e) {\n                utils_1.log(arweave, e);\n                continue;\n            }\n            if (!input) {\n                utils_1.log(arweave, `Skipping tx with missing or invalid Input tag - ${currentTx.id}`);\n                continue;\n            }\n            const interaction = {\n                input,\n                caller: currentTx.owner.address,\n            };\n            swGlobal._activeTx = currentTx;\n            const result = yield contract_step_1.execute(handler, interaction, state);\n            if (result.type === 'exception') {\n                utils_1.log(arweave, `${result.result}`);\n                utils_1.log(arweave, `Executing of interaction: ${currentTx.id} threw exception.`);\n            }\n            if (result.type === 'error') {\n                utils_1.log(arweave, `${result.result}`);\n                utils_1.log(arweave, `Executing of interaction: ${currentTx.id} returned error.`);\n            }\n            validity[currentTx.id] = result.type === 'ok';\n            state = result.state;\n            let settings = new Map();\n            try {\n                if (state.settings)\n                    settings = new Map(state.settings);\n            }\n            catch (_a) { }\n            const evolve = state.evolve || settings.get('evolve');\n            let canEvolve = state.canEvolve || settings.get('canEvolve');\n            // By default, contracts can evolve if there's not an explicit `false`.\n            if (canEvolve === undefined || canEvolve === null) {\n                canEvolve = true;\n            }\n            if (evolve && /[a-z0-9_-]{43}/i.test(evolve) && canEvolve) {\n                if (contractSrc !== state.evolve) {\n                    try {\n                        contractInfo = yield contract_load_1.loadContract(arweave, contractId, evolve);\n                        handler = contractInfo.handler;\n                    }\n                    catch (e) {\n                        const error = new errors_1.default(\"CONTRACT_NOT_FOUND\" /* CONTRACT_NOT_FOUND */, {\n                            message: `Contract having txId: ${contractId} not found`,\n                            requestedTxId: contractId,\n                        });\n                        throw error;\n                    }\n                }\n            }\n        }\n        cache[contractId] = Object.assign(Object.assign({}, (cache[contractId] || {})), { [height]: JSON.stringify({ state, validity }) });\n        return returnValidity ? { state, validity } : state;\n    });\n}\nexports.readContract = readContract;\n// Sort the transactions based on the sort key generated in addSortKey()\nfunction sortTransactions(arweave, txInfos) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const addKeysFuncs = txInfos.map((tx) => addSortKey(arweave, tx));\n        yield Promise.all(addKeysFuncs);\n        txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n    });\n}\n// Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\nfunction addSortKey(arweave, txInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { node } = txInfo;\n        const blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n        const txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n        const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n        const hashed = utils_1.arrayToHex(yield arweave.crypto.hash(concatted));\n        const blockHeight = `000000${node.block.height}`.slice(-12);\n        txInfo.sortKey = `${blockHeight},${hashed}`;\n    });\n}\n// the maximum number of transactions we can get from graphql at once\nconst MAX_REQUEST = 100;\n// fetch all contract interactions up to the specified block height\nfunction fetchTransactions(arweave, contractId, height) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let variables = {\n            tags: [\n                {\n                    name: 'App-Name',\n                    values: ['SmartWeaveAction'],\n                },\n                {\n                    name: 'Contract',\n                    values: [contractId],\n                },\n            ],\n            blockFilter: {\n                max: height,\n            },\n            first: MAX_REQUEST,\n        };\n        let transactions = yield getNextPage(arweave, variables);\n        const txInfos = transactions.edges.filter((tx) => !tx.node.parent || !tx.node.parent.id);\n        while (transactions.pageInfo.hasNextPage) {\n            const cursor = transactions.edges[MAX_REQUEST - 1].cursor;\n            variables = Object.assign(Object.assign({}, variables), { after: cursor });\n            transactions = yield getNextPage(arweave, variables);\n            txInfos.push(...transactions.edges.filter((tx) => !tx.node.parent || !tx.node.parent.id));\n        }\n        return txInfos;\n    });\n}\nfunction getNextPage(arweave, variables) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const query = `query Transactions($tags: [TagFilter!]!, $blockFilter: BlockFilter!, $first: Int!, $after: String) {\n    transactions(tags: $tags, block: $blockFilter, first: $first, sort: HEIGHT_ASC, after: $after) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          owner { address }\n          recipient\n          tags {\n            name\n            value\n          }\n          block {\n            height\n            id\n            timestamp\n          }\n          fee { winston }\n          quantity { winston }\n          parent { id }\n        }\n        cursor\n      }\n    }\n  }`;\n        const response = yield arweave.api.post('graphql', {\n            query,\n            variables,\n        });\n        if (response.status !== 200) {\n            throw new Error(`Unable to retrieve transactions. Arweave gateway responded with status ${response.status}.`);\n        }\n        const data = response.data;\n        const txs = data.data.transactions;\n        return txs;\n    });\n}\n"]},"metadata":{},"sourceType":"script"}