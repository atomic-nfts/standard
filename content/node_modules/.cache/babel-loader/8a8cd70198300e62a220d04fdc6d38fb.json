{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactRead = exports.readContract = void 0;\n\nconst index_1 = require(\"./index\");\n\nconst core_1 = require(\"@kyve/core\");\n\nconst extensions_1 = require(\"@kyve/core/dist/extensions\");\n\nconst ardb_1 = __importDefault(require(\"ardb\"));\n\nconst contract_step_1 = require(\"smartweave/lib/contract-step\");\n\nconst utils_1 = require(\"smartweave/lib/utils\");\n\nconst smartweave_1 = require(\"smartweave\");\n\nconst readContract = (poolID, contractID, returnValidity, arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n  // load last KYVE state for this contract\n  const query = new index_1.Query(poolID, false, arweave);\n  const result = yield query.tag(\"Target-Contract\", contractID).only([\"id\", \"tags\", \"tags.name\", \"tags.value\"]).limit(1).find();\n\n  if (!result) {\n    throw new Error(\"No matching transactions in pool found.\");\n  }\n\n  const transaction = result[0]; // find 'Block' tag\n\n  const latestArchivedBlock = parseInt(transaction.tags.find(tag => tag.name == \"Block\").value);\n  const data = JSON.parse(yield core_1.getData(transaction.id));\n  let state = data.state; // find txs which have not been added to state\n  // get latest network height\n\n  const networkInfo = yield arweave.network.getInfo();\n  const height = networkInfo.height;\n  const ardb = new ardb_1.default(arweave);\n  const missingTXs = yield ardb.sort(\"HEIGHT_ASC\").min(latestArchivedBlock + 1).max(height).tags([{\n    name: \"App-Name\",\n    values: [\"SmartWeaveAction\"]\n  }, {\n    name: \"Contract\",\n    values: [contractID]\n  }]).findAll(); // from https://github.com/ArweaveTeam/SmartWeave/blob/master/src/contract-read.ts#L56\n  // TODO: FIX ONCE https://github.com/ArweaveTeam/SmartWeave/pull/82 is merged\n\n  yield sortTransactions(arweave, missingTXs);\n  const contractInfo = yield smartweave_1.loadContract(arweave, contractID);\n  const {\n    handler,\n    swGlobal\n  } = contractInfo;\n  const validity = {};\n\n  for (const txInfo of missingTXs) {\n    const tags = utils_1.formatTags(txInfo.node.tags);\n    const currentTx = Object.assign(Object.assign({}, txInfo.node), {\n      tags\n    });\n    let input = currentTx.tags.Input; // Check that input is not an array. If a tx has multiple input tags, it will be an array\n\n    if (Array.isArray(input)) {\n      console.warn(`Skipping tx with multiple Input tags - ${currentTx.id}`);\n      continue;\n    }\n\n    try {\n      input = JSON.parse(input);\n    } catch (e) {\n      console.log(e);\n      continue;\n    }\n\n    if (!input) {\n      console.log(`Skipping tx with missing or invalid Input tag - ${currentTx.id}`);\n      continue;\n    }\n\n    const interaction = {\n      input,\n      caller: currentTx.owner.address\n    };\n    swGlobal._activeTx = currentTx;\n    const result = yield contract_step_1.execute(handler, interaction, state);\n\n    if (result.type === \"exception\") {\n      console.warn(`Executing of interaction: ${currentTx.id} threw exception.`);\n      console.warn(`${result.result}`);\n    }\n\n    if (result.type === \"error\") {\n      console.warn(`Executing of interaction: ${currentTx.id} returned error.`);\n      console.warn(`${result.result}`);\n    }\n\n    validity[currentTx.id] = result.type === \"ok\";\n    state = result.state;\n  }\n\n  return returnValidity ? {\n    state,\n    validity\n  } : state;\n});\n\nexports.readContract = readContract;\n\nconst interactRead = (poolID, contractID, input, wallet, tags = [], target = \"\", winstonQty = \"\", arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n  const latestState = yield exports.readContract(poolID, contractID, false, arweave);\n  const {\n    handler,\n    swGlobal\n  } = yield smartweave_1.loadContract(arweave, contractID);\n  const from = wallet ? yield arweave.wallets.getAddress(wallet) : \"\";\n  const interaction = {\n    input,\n    caller: from\n  };\n  const tx = yield createTx(arweave, wallet, contractID, input, tags, target, winstonQty);\n  const currentBlock = yield arweave.blocks.getCurrent(); // @ts-ignore\n\n  swGlobal._activeTx = createDummyTx(tx, from, currentBlock);\n  const result = yield contract_step_1.execute(handler, interaction, latestState);\n  return result.result;\n});\n\nexports.interactRead = interactRead; // Sort the transactions based on the sort key generated in addSortKey()\n\nfunction sortTransactions(arweave, txInfos) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const addKeysFuncs = txInfos.map(tx => addSortKey(arweave, tx));\n    yield Promise.all(addKeysFuncs);\n    txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n  });\n} // Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\n\n\nfunction addSortKey(arweave, txInfo) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      node\n    } = txInfo;\n    const blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n    const txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n    const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n    const hashed = utils_1.arrayToHex(yield arweave.crypto.hash(concatted));\n    const blockHeight = `000000${node.block.height}`.slice(-12);\n    txInfo.sortKey = `${blockHeight},${hashed}`;\n  });\n}\n\nfunction createTx(arweave, wallet, contractId, input, tags, target = \"\", winstonQty = \"0\") {\n  return __awaiter(this, void 0, void 0, function* () {\n    const options = {\n      data: Math.random().toString().slice(-4)\n    };\n\n    if (target && target.length) {\n      options.target = target.toString();\n\n      if (winstonQty && +winstonQty > 0) {\n        options.quantity = winstonQty.toString();\n      }\n    }\n\n    const interactionTx = yield arweave.createTransaction(options, wallet);\n\n    if (!input) {\n      throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n    }\n\n    if (tags && tags.length) {\n      for (const tag of tags) {\n        interactionTx.addTag(tag.name.toString(), tag.value.toString());\n      }\n    }\n\n    interactionTx.addTag(\"App-Name\", \"SmartWeaveAction\");\n    interactionTx.addTag(\"App-Version\", \"0.3.0\");\n    interactionTx.addTag(\"Contract\", contractId);\n    interactionTx.addTag(\"Input\", JSON.stringify(input));\n    yield arweave.transactions.sign(interactionTx, wallet);\n    return interactionTx;\n  });\n}\n\nfunction createDummyTx(tx, from, block) {\n  return {\n    id: tx.id,\n    owner: {\n      address: from\n    },\n    recipient: tx.target,\n    tags: tx.tags,\n    fee: {\n      winston: tx.reward\n    },\n    quantity: {\n      winston: tx.quantity\n    },\n    block: {\n      id: block.indep_hash,\n      height: block.height,\n      timestamp: block.timestamp\n    }\n  };\n}","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/@kyve/query/dist/smartweave.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","interactRead","readContract","index_1","require","core_1","extensions_1","ardb_1","contract_step_1","utils_1","smartweave_1","poolID","contractID","returnValidity","arweave","arweaveClient","query","Query","tag","only","limit","find","Error","transaction","latestArchivedBlock","parseInt","tags","name","data","JSON","parse","getData","id","state","networkInfo","network","getInfo","height","ardb","default","missingTXs","sort","min","max","values","findAll","sortTransactions","contractInfo","loadContract","handler","swGlobal","validity","txInfo","formatTags","node","currentTx","assign","input","Input","Array","isArray","console","warn","log","interaction","caller","owner","address","_activeTx","execute","type","wallet","target","winstonQty","latestState","from","wallets","getAddress","tx","createTx","currentBlock","blocks","getCurrent","createDummyTx","txInfos","addKeysFuncs","map","addSortKey","all","a","b","sortKey","localeCompare","blockHashBytes","utils","b64UrlToBuffer","block","txIdBytes","concatted","concatBuffers","hashed","arrayToHex","crypto","hash","blockHeight","slice","contractId","options","Math","random","toString","length","quantity","interactionTx","createTransaction","stringify","addTag","transactions","sign","recipient","fee","winston","reward","indep_hash","timestamp"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.interactRead = exports.readContract = void 0;\nconst index_1 = require(\"./index\");\nconst core_1 = require(\"@kyve/core\");\nconst extensions_1 = require(\"@kyve/core/dist/extensions\");\nconst ardb_1 = __importDefault(require(\"ardb\"));\nconst contract_step_1 = require(\"smartweave/lib/contract-step\");\nconst utils_1 = require(\"smartweave/lib/utils\");\nconst smartweave_1 = require(\"smartweave\");\nconst readContract = (poolID, contractID, returnValidity, arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n    // load last KYVE state for this contract\n    const query = new index_1.Query(poolID, false, arweave);\n    const result = yield query\n        .tag(\"Target-Contract\", contractID)\n        .only([\"id\", \"tags\", \"tags.name\", \"tags.value\"])\n        .limit(1)\n        .find();\n    if (!result) {\n        throw new Error(\"No matching transactions in pool found.\");\n    }\n    const transaction = result[0];\n    // find 'Block' tag\n    const latestArchivedBlock = parseInt(transaction.tags.find((tag) => tag.name == \"Block\").value);\n    const data = JSON.parse(yield core_1.getData(transaction.id));\n    let state = data.state;\n    // find txs which have not been added to state\n    // get latest network height\n    const networkInfo = yield arweave.network.getInfo();\n    const height = networkInfo.height;\n    const ardb = new ardb_1.default(arweave);\n    const missingTXs = (yield ardb\n        .sort(\"HEIGHT_ASC\")\n        .min(latestArchivedBlock + 1)\n        .max(height)\n        .tags([\n        { name: \"App-Name\", values: [\"SmartWeaveAction\"] },\n        { name: \"Contract\", values: [contractID] },\n    ])\n        .findAll());\n    // from https://github.com/ArweaveTeam/SmartWeave/blob/master/src/contract-read.ts#L56\n    // TODO: FIX ONCE https://github.com/ArweaveTeam/SmartWeave/pull/82 is merged\n    yield sortTransactions(arweave, missingTXs);\n    const contractInfo = yield smartweave_1.loadContract(arweave, contractID);\n    const { handler, swGlobal } = contractInfo;\n    const validity = {};\n    for (const txInfo of missingTXs) {\n        const tags = utils_1.formatTags(txInfo.node.tags);\n        const currentTx = Object.assign(Object.assign({}, txInfo.node), { tags });\n        let input = currentTx.tags.Input;\n        // Check that input is not an array. If a tx has multiple input tags, it will be an array\n        if (Array.isArray(input)) {\n            console.warn(`Skipping tx with multiple Input tags - ${currentTx.id}`);\n            continue;\n        }\n        try {\n            input = JSON.parse(input);\n        }\n        catch (e) {\n            console.log(e);\n            continue;\n        }\n        if (!input) {\n            console.log(`Skipping tx with missing or invalid Input tag - ${currentTx.id}`);\n            continue;\n        }\n        const interaction = {\n            input,\n            caller: currentTx.owner.address,\n        };\n        swGlobal._activeTx = currentTx;\n        const result = yield contract_step_1.execute(handler, interaction, state);\n        if (result.type === \"exception\") {\n            console.warn(`Executing of interaction: ${currentTx.id} threw exception.`);\n            console.warn(`${result.result}`);\n        }\n        if (result.type === \"error\") {\n            console.warn(`Executing of interaction: ${currentTx.id} returned error.`);\n            console.warn(`${result.result}`);\n        }\n        validity[currentTx.id] = result.type === \"ok\";\n        state = result.state;\n    }\n    return returnValidity ? { state, validity } : state;\n});\nexports.readContract = readContract;\nconst interactRead = (poolID, contractID, input, wallet, tags = [], target = \"\", winstonQty = \"\", arweave = extensions_1.arweaveClient) => __awaiter(void 0, void 0, void 0, function* () {\n    const latestState = yield exports.readContract(poolID, contractID, false, arweave);\n    const { handler, swGlobal } = yield smartweave_1.loadContract(arweave, contractID);\n    const from = wallet ? yield arweave.wallets.getAddress(wallet) : \"\";\n    const interaction = {\n        input,\n        caller: from,\n    };\n    const tx = yield createTx(arweave, wallet, contractID, input, tags, target, winstonQty);\n    const currentBlock = yield arweave.blocks.getCurrent();\n    // @ts-ignore\n    swGlobal._activeTx = createDummyTx(tx, from, currentBlock);\n    const result = yield contract_step_1.execute(handler, interaction, latestState);\n    return result.result;\n});\nexports.interactRead = interactRead;\n// Sort the transactions based on the sort key generated in addSortKey()\nfunction sortTransactions(arweave, txInfos) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const addKeysFuncs = txInfos.map((tx) => addSortKey(arweave, tx));\n        yield Promise.all(addKeysFuncs);\n        txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));\n    });\n}\n// Construct a string that will lexographically sort.\n// { block_height, sha256(block_indep_hash + txid) }\n// pad block height to 12 digits and convert hash value\n// to a hex string.\nfunction addSortKey(arweave, txInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { node } = txInfo;\n        const blockHashBytes = arweave.utils.b64UrlToBuffer(node.block.id);\n        const txIdBytes = arweave.utils.b64UrlToBuffer(node.id);\n        const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);\n        const hashed = utils_1.arrayToHex(yield arweave.crypto.hash(concatted));\n        const blockHeight = `000000${node.block.height}`.slice(-12);\n        txInfo.sortKey = `${blockHeight},${hashed}`;\n    });\n}\nfunction createTx(arweave, wallet, contractId, input, tags, target = \"\", winstonQty = \"0\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        const options = {\n            data: Math.random().toString().slice(-4),\n        };\n        if (target && target.length) {\n            options.target = target.toString();\n            if (winstonQty && +winstonQty > 0) {\n                options.quantity = winstonQty.toString();\n            }\n        }\n        const interactionTx = yield arweave.createTransaction(options, wallet);\n        if (!input) {\n            throw new Error(`Input should be a truthy value: ${JSON.stringify(input)}`);\n        }\n        if (tags && tags.length) {\n            for (const tag of tags) {\n                interactionTx.addTag(tag.name.toString(), tag.value.toString());\n            }\n        }\n        interactionTx.addTag(\"App-Name\", \"SmartWeaveAction\");\n        interactionTx.addTag(\"App-Version\", \"0.3.0\");\n        interactionTx.addTag(\"Contract\", contractId);\n        interactionTx.addTag(\"Input\", JSON.stringify(input));\n        yield arweave.transactions.sign(interactionTx, wallet);\n        return interactionTx;\n    });\n}\nfunction createDummyTx(tx, from, block) {\n    return {\n        id: tx.id,\n        owner: {\n            address: from,\n        },\n        recipient: tx.target,\n        tags: tx.tags,\n        fee: {\n            winston: tx.reward,\n        },\n        quantity: {\n            winston: tx.quantity,\n        },\n        block: {\n            id: block.indep_hash,\n            height: block.height,\n            timestamp: block.timestamp,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"script"}