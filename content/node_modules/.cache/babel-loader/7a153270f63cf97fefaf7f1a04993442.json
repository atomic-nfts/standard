{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ArweaveUtils = require(\"./lib/utils\");\n\nrequire(\"arconnect\");\n\nvar Wallets = /*#__PURE__*/function () {\n  function Wallets(api, crypto) {\n    _classCallCheck(this, Wallets);\n\n    this.api = api;\n    this.crypto = crypto;\n  }\n  /**\n   * Get the wallet balance for the given address.\n   *\n   * @param {string} address - The arweave address to get the balance for.\n   *\n   * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n   */\n\n\n  _createClass(Wallets, [{\n    key: \"getBalance\",\n    value: function getBalance(address) {\n      return this.api.get(\"wallet/\".concat(address, \"/balance\"), {\n        transformResponse: [\n        /**\n         * We need to specify a response transformer to override\n         * the default JSON.parse behaviour, as this causes\n         * balances to be converted to a number and we want to\n         * return it as a winston string.\n         * @param data\n         */\n        function (data) {\n          return data;\n        }]\n      }).then(function (response) {\n        return response.data;\n      });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n\n  }, {\n    key: \"getLastTransactionID\",\n    value: function getLastTransactionID(address) {\n      return this.api.get(\"wallet/\".concat(address, \"/last_tx\")).then(function (response) {\n        return response.data;\n      });\n    }\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      return this.crypto.generateJWK();\n    }\n  }, {\n    key: \"jwkToAddress\",\n    value: function () {\n      var _jwkToAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(jwk) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!jwk || jwk === \"use_wallet\")) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.getAddress());\n\n              case 4:\n                return _context.abrupt(\"return\", this.getAddress(jwk));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function jwkToAddress(_x) {\n        return _jwkToAddress.apply(this, arguments);\n      }\n\n      return jwkToAddress;\n    }()\n  }, {\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(jwk) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!jwk || jwk === \"use_wallet\")) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return window.arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n\n              case 4:\n                _context2.next = 8;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n\n              case 8:\n                return _context2.abrupt(\"return\", window.arweaveWallet.getActiveAddress());\n\n              case 11:\n                return _context2.abrupt(\"return\", this.ownerToAddress(jwk.n));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 6]]);\n      }));\n\n      function getAddress(_x2) {\n        return _getAddress.apply(this, arguments);\n      }\n\n      return getAddress;\n    }()\n  }, {\n    key: \"ownerToAddress\",\n    value: function () {\n      var _ownerToAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(owner) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = ArweaveUtils;\n                _context3.next = 3;\n                return this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner));\n\n              case 3:\n                _context3.t1 = _context3.sent;\n                return _context3.abrupt(\"return\", _context3.t0.bufferTob64Url.call(_context3.t0, _context3.t1));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function ownerToAddress(_x3) {\n        return _ownerToAddress.apply(this, arguments);\n      }\n\n      return ownerToAddress;\n    }()\n  }]);\n\n  return Wallets;\n}();\n\nexports.default = Wallets;","map":{"version":3,"sources":["../../../src/common/wallets.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,IAAA,YAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,OAAA,CAAA,WAAA,CAAA;;IAEqB,O;AAKnB,mBAAY,GAAZ,EAAsB,MAAtB,EAA6C;AAAA;;AAC3C,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;;;;AAMG;;;;;WACI,oBAAW,OAAX,EAA0B;AAC/B,aAAO,KAAK,GAAL,CACJ,GADI,kBACU,OADV,eAC6B;AAChC,QAAA,iBAAiB,EAAE;AACjB;;;;;;AAMG;AACH,kBAAU,IAAV,EAAc;AACZ,iBAAO,IAAP;AACD,SAVgB;AADa,OAD7B,EAeJ,IAfI,CAeC,UAAC,QAAD,EAAa;AACjB,eAAO,QAAQ,CAAC,IAAhB;AACD,OAjBI,CAAP;AAkBD;AAED;;;;;;AAMG;;;;WACI,8BAAqB,OAArB,EAAoC;AACzC,aAAO,KAAK,GAAL,CAAS,GAAT,kBAAuB,OAAvB,eAA0C,IAA1C,CAA+C,UAAC,QAAD,EAAa;AACjE,eAAO,QAAQ,CAAC,IAAhB;AACD,OAFM,CAAP;AAGD;;;WAEM,oBAAQ;AACb,aAAO,KAAK,MAAL,CAAY,WAAZ,EAAP;AACD;;;;mFAEM,iBACL,GADK;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGD,CAAC,GAAD,IAAQ,GAAG,KAAK,YAHf;AAAA;AAAA;AAAA;;AAAA,iDAII,KAAK,UAAL,EAJJ;;AAAA;AAAA,iDAMI,KAAK,UAAL,CAAgB,GAAhB,CANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;iFAUA,kBAAiB,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,sBACD,CAAC,GAAD,IAAQ,GAAG,KAAK,YADf;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAIK,MAAM,CAAC,aAAP,CAAqB,OAArB,CAA6B,CAAC,gBAAD,CAA7B,CAJL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kDAUI,MAAM,CAAC,aAAP,CAAqB,gBAArB,EAVJ;;AAAA;AAAA,kDAYI,KAAK,cAAL,CAAoB,GAAG,CAAC,CAAxB,CAZJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFAgBA,kBAAqB,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA,+BACE,YADF;AAAA;AAAA,uBAEG,KAAK,MAAL,CAAY,IAAZ,CAAiB,YAAY,CAAC,cAAb,CAA4B,KAA5B,CAAjB,CAFH;;AAAA;AAAA;AAAA,+DACe,cADf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAjFT,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"./lib/utils\");\nrequire(\"arconnect\");\nclass Wallets {\n    constructor(api, crypto) {\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getBalance(address) {\n        return this.api\n            .get(`wallet/${address}/balance`, {\n            transformResponse: [\n                /**\n                 * We need to specify a response transformer to override\n                 * the default JSON.parse behaviour, as this causes\n                 * balances to be converted to a number and we want to\n                 * return it as a winston string.\n                 * @param data\n                 */\n                function (data) {\n                    return data;\n                },\n            ],\n        })\n            .then((response) => {\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response) => {\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        }\n        else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                // @ts-ignore\n                await window.arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n            }\n            catch (_a) {\n                // Permission is already granted\n            }\n            // @ts-ignore\n            return window.arweaveWallet.getActiveAddress();\n        }\n        else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n    }\n}\nexports.default = Wallets;\n//# sourceMappingURL=wallets.js.map"]},"metadata":{},"sourceType":"script"}