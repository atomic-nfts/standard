{"ast":null,"code":"'use strict';\n\nfunction dePalette(indata, outdata, width, height, palette) {\n  var pxPos = 0; // use values from palette\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var color = palette[indata[pxPos]];\n\n      if (!color) {\n        throw new Error('index ' + indata[pxPos] + ' not in palette');\n      }\n\n      for (var i = 0; i < 4; i++) {\n        outdata[pxPos + i] = color[i];\n      }\n\n      pxPos += 4;\n    }\n  }\n}\n\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n  var pxPos = 0;\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var makeTrans = false;\n\n      if (transColor.length === 1) {\n        if (transColor[0] === indata[pxPos]) {\n          makeTrans = true;\n        }\n      } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n        makeTrans = true;\n      }\n\n      if (makeTrans) {\n        for (var i = 0; i < 4; i++) {\n          outdata[pxPos + i] = 0;\n        }\n      }\n\n      pxPos += 4;\n    }\n  }\n}\n\nfunction scaleDepth(indata, outdata, width, height, depth) {\n  var maxOutSample = 255;\n  var maxInSample = Math.pow(2, depth) - 1;\n  var pxPos = 0;\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      for (var i = 0; i < 4; i++) {\n        outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n      }\n\n      pxPos += 4;\n    }\n  }\n}\n\nmodule.exports = function (indata, imageData) {\n  var depth = imageData.depth;\n  var width = imageData.width;\n  var height = imageData.height;\n  var colorType = imageData.colorType;\n  var transColor = imageData.transColor;\n  var palette = imageData.palette;\n  var outdata = indata; // only different for 16 bits\n\n  if (colorType === 3) {\n    // paletted\n    dePalette(indata, outdata, width, height, palette);\n  } else {\n    if (transColor) {\n      replaceTransparentColor(indata, outdata, width, height, transColor);\n    } // if it needs scaling\n\n\n    if (depth !== 8) {\n      // if we need to change the buffer size\n      if (depth === 16) {\n        outdata = new Buffer(width * height * 4);\n      }\n\n      scaleDepth(indata, outdata, width, height, depth);\n    }\n  }\n\n  return outdata;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/pngjs-nozlib/lib/format-normaliser.js"],"names":["dePalette","indata","outdata","width","height","palette","pxPos","y","x","color","Error","i","replaceTransparentColor","transColor","makeTrans","length","scaleDepth","depth","maxOutSample","maxInSample","Math","pow","floor","module","exports","imageData","colorType","Buffer"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction dePalette(indata, outdata, width, height, palette) {\n  var pxPos = 0;\n  // use values from palette\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var color = palette[indata[pxPos]];\n\n      if (!color) {\n        throw new Error('index ' + indata[pxPos] + ' not in palette');\n      }\n\n      for (var i = 0; i < 4; i++) {\n        outdata[pxPos + i] = color[i];\n      }\n      pxPos += 4;\n    }\n  }\n}\n\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n  var pxPos = 0;\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var makeTrans = false;\n\n      if (transColor.length === 1) {\n        if (transColor[0] === indata[pxPos]) {\n          makeTrans = true;\n        }\n      }\n      else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n        makeTrans = true;\n      }\n      if (makeTrans) {\n        for (var i = 0; i < 4; i++) {\n          outdata[pxPos + i] = 0;\n        }\n      }\n      pxPos += 4;\n    }\n  }\n}\n\nfunction scaleDepth(indata, outdata, width, height, depth) {\n  var maxOutSample = 255;\n  var maxInSample = Math.pow(2, depth) - 1;\n  var pxPos = 0;\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      for (var i = 0; i < 4; i++) {\n        outdata[pxPos + i] = Math.floor((indata[pxPos + i] * maxOutSample) / maxInSample + 0.5);\n      }\n      pxPos += 4;\n    }\n  }\n}\n\nmodule.exports = function(indata, imageData) {\n\n  var depth = imageData.depth;\n  var width = imageData.width;\n  var height = imageData.height;\n  var colorType = imageData.colorType;\n  var transColor = imageData.transColor;\n  var palette = imageData.palette;\n\n  var outdata = indata; // only different for 16 bits\n\n  if (colorType === 3) { // paletted\n    dePalette(indata, outdata, width, height, palette);\n  }\n  else {\n    if (transColor) {\n      replaceTransparentColor(indata, outdata, width, height, transColor);\n    }\n    // if it needs scaling\n    if (depth !== 8) {\n      // if we need to change the buffer size\n      if (depth === 16) {\n        outdata = new Buffer(width * height * 4);\n      }\n      scaleDepth(indata, outdata, width, height, depth);\n    }\n  }\n  return outdata;\n};\n"]},"metadata":{},"sourceType":"script"}