{"ast":null,"code":"/*!\n * shallow-clone <https://github.com/jonschlinkert/shallow-clone>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nconst valueOf = Symbol.prototype.valueOf;\n\nconst typeOf = require('kind-of');\n\nfunction clone(val, deep) {\n  switch (typeOf(val)) {\n    case 'array':\n      return val.slice();\n\n    case 'object':\n      return Object.assign({}, val);\n\n    case 'date':\n      return new val.constructor(Number(val));\n\n    case 'map':\n      return new Map(val);\n\n    case 'set':\n      return new Set(val);\n\n    case 'buffer':\n      return cloneBuffer(val);\n\n    case 'symbol':\n      return cloneSymbol(val);\n\n    case 'arraybuffer':\n      return cloneArrayBuffer(val);\n\n    case 'float32array':\n    case 'float64array':\n    case 'int16array':\n    case 'int32array':\n    case 'int8array':\n    case 'uint16array':\n    case 'uint32array':\n    case 'uint8clampedarray':\n    case 'uint8array':\n      return cloneTypedArray(val);\n\n    case 'regexp':\n      return cloneRegExp(val);\n\n    case 'error':\n      return Object.create(val);\n\n    default:\n      {\n        return val;\n      }\n  }\n}\n\nfunction cloneRegExp(val) {\n  const flags = val.flags !== void 0 ? val.flags : /\\w+$/.exec(val) || void 0;\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\n\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\n\nfunction cloneTypedArray(val, deep) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\n\nfunction cloneBuffer(val) {\n  const len = val.length;\n  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);\n  val.copy(buf);\n  return buf;\n}\n\nfunction cloneSymbol(val) {\n  return valueOf ? Object(valueOf.call(val)) : {};\n}\n/**\n * Expose `clone`\n */\n\n\nmodule.exports = clone;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/shallow-clone/index.js"],"names":["valueOf","Symbol","prototype","typeOf","require","clone","val","deep","slice","Object","assign","constructor","Number","Map","Set","cloneBuffer","cloneSymbol","cloneArrayBuffer","cloneTypedArray","cloneRegExp","create","flags","exec","re","source","lastIndex","res","byteLength","Uint8Array","set","buffer","byteOffset","length","len","buf","Buffer","allocUnsafe","from","copy","call","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBF,OAAjC;;AACA,MAAMG,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACxB,UAAQJ,MAAM,CAACG,GAAD,CAAd;AACE,SAAK,OAAL;AACE,aAAOA,GAAG,CAACE,KAAJ,EAAP;;AACF,SAAK,QAAL;AACE,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,GAAlB,CAAP;;AACF,SAAK,MAAL;AACE,aAAO,IAAIA,GAAG,CAACK,WAAR,CAAoBC,MAAM,CAACN,GAAD,CAA1B,CAAP;;AACF,SAAK,KAAL;AACE,aAAO,IAAIO,GAAJ,CAAQP,GAAR,CAAP;;AACF,SAAK,KAAL;AACE,aAAO,IAAIQ,GAAJ,CAAQR,GAAR,CAAP;;AACF,SAAK,QAAL;AACE,aAAOS,WAAW,CAACT,GAAD,CAAlB;;AACF,SAAK,QAAL;AACE,aAAOU,WAAW,CAACV,GAAD,CAAlB;;AACF,SAAK,aAAL;AACE,aAAOW,gBAAgB,CAACX,GAAD,CAAvB;;AACF,SAAK,cAAL;AACA,SAAK,cAAL;AACA,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,WAAL;AACA,SAAK,aAAL;AACA,SAAK,aAAL;AACA,SAAK,mBAAL;AACA,SAAK,YAAL;AACE,aAAOY,eAAe,CAACZ,GAAD,CAAtB;;AACF,SAAK,QAAL;AACE,aAAOa,WAAW,CAACb,GAAD,CAAlB;;AACF,SAAK,OAAL;AACE,aAAOG,MAAM,CAACW,MAAP,CAAcd,GAAd,CAAP;;AACF;AAAS;AACP,eAAOA,GAAP;AACD;AAjCH;AAmCD;;AAED,SAASa,WAAT,CAAqBb,GAArB,EAA0B;AACxB,QAAMe,KAAK,GAAGf,GAAG,CAACe,KAAJ,KAAc,KAAK,CAAnB,GAAuBf,GAAG,CAACe,KAA3B,GAAoC,OAAOC,IAAP,CAAYhB,GAAZ,KAAoB,KAAK,CAA3E;AACA,QAAMiB,EAAE,GAAG,IAAIjB,GAAG,CAACK,WAAR,CAAoBL,GAAG,CAACkB,MAAxB,EAAgCH,KAAhC,CAAX;AACAE,EAAAA,EAAE,CAACE,SAAH,GAAenB,GAAG,CAACmB,SAAnB;AACA,SAAOF,EAAP;AACD;;AAED,SAASN,gBAAT,CAA0BX,GAA1B,EAA+B;AAC7B,QAAMoB,GAAG,GAAG,IAAIpB,GAAG,CAACK,WAAR,CAAoBL,GAAG,CAACqB,UAAxB,CAAZ;AACA,MAAIC,UAAJ,CAAeF,GAAf,EAAoBG,GAApB,CAAwB,IAAID,UAAJ,CAAetB,GAAf,CAAxB;AACA,SAAOoB,GAAP;AACD;;AAED,SAASR,eAAT,CAAyBZ,GAAzB,EAA8BC,IAA9B,EAAoC;AAClC,SAAO,IAAID,GAAG,CAACK,WAAR,CAAoBL,GAAG,CAACwB,MAAxB,EAAgCxB,GAAG,CAACyB,UAApC,EAAgDzB,GAAG,CAAC0B,MAApD,CAAP;AACD;;AAED,SAASjB,WAAT,CAAqBT,GAArB,EAA0B;AACxB,QAAM2B,GAAG,GAAG3B,GAAG,CAAC0B,MAAhB;AACA,QAAME,GAAG,GAAGC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,CAAmBH,GAAnB,CAArB,GAA+CE,MAAM,CAACE,IAAP,CAAYJ,GAAZ,CAA3D;AACA3B,EAAAA,GAAG,CAACgC,IAAJ,CAASJ,GAAT;AACA,SAAOA,GAAP;AACD;;AAED,SAASlB,WAAT,CAAqBV,GAArB,EAA0B;AACxB,SAAON,OAAO,GAAGS,MAAM,CAACT,OAAO,CAACuC,IAAR,CAAajC,GAAb,CAAD,CAAT,GAA+B,EAA7C;AACD;AAED;AACA;AACA;;;AAEAkC,MAAM,CAACC,OAAP,GAAiBpC,KAAjB","sourcesContent":["/*!\n * shallow-clone <https://github.com/jonschlinkert/shallow-clone>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst valueOf = Symbol.prototype.valueOf;\nconst typeOf = require('kind-of');\n\nfunction clone(val, deep) {\n  switch (typeOf(val)) {\n    case 'array':\n      return val.slice();\n    case 'object':\n      return Object.assign({}, val);\n    case 'date':\n      return new val.constructor(Number(val));\n    case 'map':\n      return new Map(val);\n    case 'set':\n      return new Set(val);\n    case 'buffer':\n      return cloneBuffer(val);\n    case 'symbol':\n      return cloneSymbol(val);\n    case 'arraybuffer':\n      return cloneArrayBuffer(val);\n    case 'float32array':\n    case 'float64array':\n    case 'int16array':\n    case 'int32array':\n    case 'int8array':\n    case 'uint16array':\n    case 'uint32array':\n    case 'uint8clampedarray':\n    case 'uint8array':\n      return cloneTypedArray(val);\n    case 'regexp':\n      return cloneRegExp(val);\n    case 'error':\n      return Object.create(val);\n    default: {\n      return val;\n    }\n  }\n}\n\nfunction cloneRegExp(val) {\n  const flags = val.flags !== void 0 ? val.flags : (/\\w+$/.exec(val) || void 0);\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\n\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\n\nfunction cloneTypedArray(val, deep) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\n\nfunction cloneBuffer(val) {\n  const len = val.length;\n  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);\n  val.copy(buf);\n  return buf;\n}\n\nfunction cloneSymbol(val) {\n  return valueOf ? Object(valueOf.call(val)) : {};\n}\n\n/**\n * Expose `clone`\n */\n\nmodule.exports = clone;\n"]},"metadata":{},"sourceType":"script"}