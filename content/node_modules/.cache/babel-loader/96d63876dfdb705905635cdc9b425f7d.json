{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCacheData = exports.Common = exports.BUNDLER_NODES = exports.arweave = void 0;\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar arweave_1 = __importDefault(require(\"arweave\"));\n\nvar arweaveUtils = __importStar(require(\"arweave/node/lib/utils\"));\n\nvar smartweave_1 = require(\"smartweave\");\n\nvar query_1 = require(\"@kyve/query\"); //@ts-ignore // Needed to allow implicit any here\n\n\nvar human_crypto_keys_1 = require(\"human-crypto-keys\"); //@ts-ignore\n\n\nvar pem_jwk_1 = require(\"pem-jwk\");\n\nvar HOST_GATEWAY = \"arweave.net\";\nvar URL_ARWEAVE_INFO = \"https://\".concat(HOST_GATEWAY, \"/info\");\nvar URL_ARWEAVE_GQL = \"https://\".concat(HOST_GATEWAY, \"/graphql\");\nvar BLOCK_TEMPLATE = \"\\n  pageInfo {\\n    hasNextPage\\n  }\\n  edges {\\n    cursor\\n    node {\\n      id anchor signature recipient\\n      owner { address key }\\n      fee { winston ar }\\n      quantity { winston ar }\\n      data { size type }\\n      tags { name value }\\n      block { id timestamp height previous }\\n      parent { id }\\n    }\\n  }\";\nexports.arweave = arweave_1.default.init({\n  host: HOST_GATEWAY,\n  protocol: \"https\",\n  port: 443\n});\nexports.BUNDLER_NODES = \"/nodes\";\n/**\n * Tools for interacting with the koi network\n */\n\nvar Common = /*#__PURE__*/function () {\n  function Common() {\n    var bundlerUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://bundler.openkoi.com:8888\";\n    var contractId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc\";\n\n    _classCallCheck(this, Common);\n\n    this.bundlerUrl = bundlerUrl;\n    this.contractId = contractId;\n    console.log(\"Initialized Koii Tools for true ownership and direct communication using version \", this.contractId);\n  }\n  /**\n   * Generates wallet optionally with a mnemonic phrase\n   * @param use_mnemonic [false] Flag for enabling mnemonic phrase wallet generation\n   */\n\n\n  _createClass(Common, [{\n    key: \"generateWallet\",\n    value: function () {\n      var _generateWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var use_mnemonic,\n            key,\n            mnemonic,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                use_mnemonic = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n\n                if (!(use_mnemonic === true)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 4;\n                return this._generateMnemonic();\n\n              case 4:\n                mnemonic = _context.sent;\n                _context.next = 7;\n                return this._getKeyFromMnemonic(mnemonic);\n\n              case 7:\n                key = _context.sent;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return exports.arweave.wallets.generate();\n\n              case 12:\n                key = _context.sent;\n\n              case 13:\n                if (key) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw Error(\"failed to create wallet\");\n\n              case 15:\n                this.mnemonic = mnemonic;\n                this.wallet = key;\n                _context.next = 19;\n                return this.getWalletAddress();\n\n              case 19:\n                return _context.abrupt(\"return\", true);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function generateWallet() {\n        return _generateWallet.apply(this, arguments);\n      }\n\n      return generateWallet;\n    }()\n    /**\n     * Loads arweave wallet\n     * @param source object to load from, JSON or JWK, or mnemonic key\n     */\n\n  }, {\n    key: \"loadWallet\",\n    value: function () {\n      var _loadWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = typeof source;\n                _context2.next = _context2.t0 === \"string\" ? 3 : 7;\n                break;\n\n              case 3:\n                _context2.next = 5;\n                return this._getKeyFromMnemonic(source);\n\n              case 5:\n                this.wallet = _context2.sent;\n                return _context2.abrupt(\"break\", 8);\n\n              case 7:\n                this.wallet = source;\n\n              case 8:\n                _context2.next = 10;\n                return this.getWalletAddress();\n\n              case 10:\n                return _context2.abrupt(\"return\", this.wallet);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadWallet(_x) {\n        return _loadWallet.apply(this, arguments);\n      }\n\n      return loadWallet;\n    }()\n    /**\n     * Manually set wallet address\n     * @param walletAddress Address as a string\n     * @returns Wallet address\n     */\n\n  }, {\n    key: \"setWallet\",\n    value: function setWallet(walletAddress) {\n      if (!this.address) this.address = walletAddress;\n      return this.address;\n    }\n    /**\n     * Uses koi wallet to get the address\n     * @returns Wallet address\n     */\n\n  }, {\n    key: \"getWalletAddress\",\n    value: function () {\n      var _getWalletAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof this.address !== \"string\")) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return exports.arweave.wallets.jwkToAddress(this.wallet);\n\n              case 3:\n                this.address = _context3.sent;\n\n              case 4:\n                return _context3.abrupt(\"return\", this.address);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getWalletAddress() {\n        return _getWalletAddress.apply(this, arguments);\n      }\n\n      return getWalletAddress;\n    }()\n    /**\n     * Get and set arweave balance\n     * @returns Balance as a string if wallet exists, else undefined\n     */\n\n  }, {\n    key: \"getWalletBalance\",\n    value: function () {\n      var _getWalletBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var winston, ar;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.address) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", 0);\n\n              case 2:\n                _context4.next = 4;\n                return exports.arweave.wallets.getBalance(this.address);\n\n              case 4:\n                winston = _context4.sent;\n                ar = exports.arweave.ar.winstonToAr(winston);\n                return _context4.abrupt(\"return\", parseFloat(ar));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getWalletBalance() {\n        return _getWalletBalance.apply(this, arguments);\n      }\n\n      return getWalletBalance;\n    }()\n    /**\n     * Gets koi balance from cache\n     * @returns Balance as a number\n     */\n\n  }, {\n    key: \"getKoiBalance\",\n    value: function () {\n      var _getKoiBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var state;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getContractState();\n\n              case 2:\n                state = _context5.sent;\n\n                if (!(this.address !== undefined && this.address in state.balances)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", state.balances[this.address]);\n\n              case 5:\n                return _context5.abrupt(\"return\", 0);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getKoiBalance() {\n        return _getKoiBalance.apply(this, arguments);\n      }\n\n      return getKoiBalance;\n    }()\n    /**\n     * Gets the current contract state\n     * @returns Current KOI system state\n     */\n\n  }, {\n    key: \"getContractState\",\n    value: function getContractState() {\n      return this._readContract();\n    }\n    /**\n     * Get contract state\n     * @param id Transaction ID\n     * @returns State object\n     */\n\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", exports.arweave.transactions.get(id));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getTransaction(_x2) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n    /**\n     * Get block height\n     * @returns Block height maybe number\n     */\n\n  }, {\n    key: \"getBlockHeight\",\n    value: function () {\n      var _getBlockHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var info;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return getArweaveNetInfo();\n\n              case 2:\n                info = _context7.sent;\n                return _context7.abrupt(\"return\", info.data.height);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getBlockHeight() {\n        return _getBlockHeight.apply(this, arguments);\n      }\n\n      return getBlockHeight;\n    }()\n    /**\n     * Get the NFT state from arweave, this should be the initial state\n     * @param txId Transaction ID of the NFT\n     * @returns The NFT state object\n     */\n\n  }, {\n    key: \"readNftState\",\n    value: function () {\n      var _readNftState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(txId) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return axios_1.default.get(\"https://bundler.openkoi.com:8888/state/getNFTState?tranxId=\".concat(txId));\n\n              case 3:\n                response = _context8.sent;\n                return _context8.abrupt(\"return\", response.data);\n\n              case 7:\n                _context8.prev = 7;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.log(\"ERRPR\", _context8.t0);\n                if (_context8.t0) console.error('error fetching NFT data from bundler for ' + txId);\n                return _context8.abrupt(\"return\", smartweave_1.smartweave.readContract(exports.arweave, txId));\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[0, 7]]);\n      }));\n\n      function readNftState(_x3) {\n        return _readNftState.apply(this, arguments);\n      }\n\n      return readNftState;\n    }()\n    /**\n     * Interact with contract to stake\n     * @param qty Quantity to stake\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"stake\",\n    value: function stake(qty) {\n      if (!Number.isInteger(qty)) throw Error('Invalid value for \"qty\". Must be an integer');\n      var input = {\n        function: \"stake\",\n        qty: qty\n      };\n      return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to withdraw\n     * @param qty Quantity to transfer\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(qty) {\n      if (!Number.isInteger(qty)) throw Error('Invalid value for \"qty\". Must be an integer');\n      var input = {\n        function: \"withdraw\",\n        qty: qty\n      };\n      return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to transfer koi\n     * @param qty Quantity to transfer\n     * @param target Receiver address\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function () {\n      var _transfer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(qty, target, token) {\n        var input, transaction, txid;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                input = {\n                  function: \"transfer\",\n                  qty: qty,\n                  target: target\n                };\n                _context9.t0 = token;\n                _context9.next = _context9.t0 === \"AR\" ? 4 : _context9.t0 === \"KOI\" ? 12 : 16;\n                break;\n\n              case 4:\n                _context9.next = 6;\n                return exports.arweave.createTransaction({\n                  target: target,\n                  quantity: exports.arweave.ar.arToWinston(qty.toString())\n                }, this.wallet);\n\n              case 6:\n                transaction = _context9.sent;\n                _context9.next = 9;\n                return exports.arweave.transactions.sign(transaction, this.wallet);\n\n              case 9:\n                _context9.next = 11;\n                return exports.arweave.transactions.post(transaction);\n\n              case 11:\n                return _context9.abrupt(\"return\", transaction.id);\n\n              case 12:\n                _context9.next = 14;\n                return this._interactWrite(input);\n\n              case 14:\n                txid = _context9.sent;\n                return _context9.abrupt(\"return\", txid);\n\n              case 16:\n                throw Error(\"token or coin ticker doesn't exist\");\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function transfer(_x4, _x5, _x6) {\n        return _transfer.apply(this, arguments);\n      }\n\n      return transfer;\n    }()\n    /**\n     * Mint koi\n     * @param arg object arg.targetAddress(receiver address) and arg.qty(amount to mint)\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"mint\",\n    value: function mint(arg) {\n      var input = {\n        function: \"mint\",\n        qty: arg.qty,\n        target: arg.targetAddress\n      };\n      return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to register data\n     * @param txId It has batchFile/value(string) and stake amount/value(int) as properties\n     * @param ownerId String container the owner ID\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"registerData\",\n    value: function registerData(txId) {\n      var ownerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var input = {\n        function: \"registerData\",\n        txId: txId,\n        owner: ownerId\n      };\n      return this._interactWrite(input);\n    }\n    /**\n     * Sign transaction\n     * @param tx Transaction to be signed\n     * @returns signed Transaction\n     */\n\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tx) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return exports.arweave.transactions.sign(tx, this.wallet);\n\n              case 3:\n                return _context10.abrupt(\"return\", tx);\n\n              case 6:\n                _context10.prev = 6;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", null);\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 6]]);\n      }));\n\n      function signTransaction(_x7) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n    /**\n     * Get transaction data from Arweave\n     * @param txId Transaction ID\n     * @returns Transaction\n     */\n\n  }, {\n    key: \"nftTransactionData\",\n    value: function nftTransactionData(txId) {\n      return exports.arweave.transactions.get(txId);\n    }\n    /**\n     * Sign payload\n     * @param payload Payload to sign\n     * @returns Signed payload with signature\n     */\n\n  }, {\n    key: \"signPayload\",\n    value: function () {\n      var _signPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(payload) {\n        var data, jwk, publicModulus, dataInString, dataIn8Array, rawSignature;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(this.wallet === undefined)) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", null);\n\n              case 2:\n                data = payload.data || payload.vote || null;\n                jwk = this.wallet;\n                publicModulus = jwk.n;\n                dataInString = JSON.stringify(data);\n                dataIn8Array = arweaveUtils.stringToBuffer(dataInString);\n                _context11.next = 9;\n                return exports.arweave.crypto.sign(jwk, dataIn8Array);\n\n              case 9:\n                rawSignature = _context11.sent;\n                payload.signature = arweaveUtils.bufferTob64Url(rawSignature);\n                payload.owner = publicModulus;\n                return _context11.abrupt(\"return\", payload);\n\n              case 13:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function signPayload(_x8) {\n        return _signPayload.apply(this, arguments);\n      }\n\n      return signPayload;\n    }()\n    /**\n     * Verify signed payload\n     * @param payload\n     * @returns Verification result\n     */\n\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(payload) {\n        var data, rawSignature, dataInString, dataIn8Array;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                data = payload.data || payload.vote || null;\n                rawSignature = arweaveUtils.b64UrlToBuffer(payload.signature);\n                dataInString = JSON.stringify(data);\n                dataIn8Array = arweaveUtils.stringToBuffer(dataInString);\n                _context12.next = 6;\n                return exports.arweave.crypto.verify(payload.owner, dataIn8Array, rawSignature);\n\n              case 6:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function verifySignature(_x9) {\n        return _verifySignature.apply(this, arguments);\n      }\n\n      return verifySignature;\n    }()\n    /**\n     * Posts data to Arweave\n     * @param data\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"postData\",\n    value: function () {\n      var _postData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(data) {\n        var wallet, transaction, txId, response;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                // TODO: define data interface\n                wallet = this.wallet;\n                _context13.next = 3;\n                return exports.arweave.createTransaction({\n                  data: Buffer.from(JSON.stringify(data, null, 2), \"utf8\")\n                }, wallet);\n\n              case 3:\n                transaction = _context13.sent;\n                _context13.next = 6;\n                return exports.arweave.transactions.sign(transaction, wallet);\n\n              case 6:\n                txId = transaction.id; // After is signed, we send the transaction\n\n                _context13.next = 9;\n                return exports.arweave.transactions.post(transaction);\n\n              case 9:\n                response = _context13.sent;\n\n                if (!(response.status === 200)) {\n                  _context13.next = 12;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\", txId);\n\n              case 12:\n                return _context13.abrupt(\"return\", null);\n\n              case 13:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function postData(_x10) {\n        return _postData.apply(this, arguments);\n      }\n\n      return postData;\n    }()\n    /**\n     * Gets all the transactions where the wallet is the owner\n     * @param wallet Wallet address as a string\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns Object with transaction IDs as keys, and transaction data strings as values\n     */\n\n  }, {\n    key: \"getOwnedTxs\",\n    value: function getOwnedTxs(wallet, count, cursorId) {\n      var countStr = count !== undefined ? \", first: \".concat(count) : \"\";\n      var afterStr = cursorId !== undefined ? \", after: \\\"\".concat(cursorId, \"\\\"\") : \"\";\n      var query = \"\\n      query {\\n        transactions(owners:[\\\"\".concat(wallet, \"\\\"]\").concat(countStr).concat(afterStr, \") {\\n          \").concat(BLOCK_TEMPLATE, \"\\n        }\\n      }\");\n      var request = JSON.stringify({\n        query: query\n      });\n      return this.gql(request);\n    }\n    /**\n     * Gets all the transactions where the wallet is the recipient\n     * @param wallet Wallet address as a string\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns Object with transaction IDs as keys, and transaction data strings as values\n     */\n\n  }, {\n    key: \"getRecipientTxs\",\n    value: function getRecipientTxs(wallet, count, cursorId) {\n      var countStr = count !== undefined ? \", first: \".concat(count) : \"\";\n      var afterStr = cursorId !== undefined ? \", after: \\\"\".concat(cursorId, \"\\\"\") : \"\";\n      var query = \"\\n      query {\\n        transactions(recipients:[\\\"\".concat(wallet, \"\\\"]\").concat(countStr).concat(afterStr, \") {\\n          \").concat(BLOCK_TEMPLATE, \"\\n        }\\n      }\");\n      var request = JSON.stringify({\n        query: query\n      });\n      return this.gql(request);\n    }\n    /**\n     * Get the updated state of an NFT\n     * @param contentTxId TxId of the content\n     * @param state\n     * @returns An object with {totaltViews, totalReward, 24hrsViews}\n     */\n\n  }, {\n    key: \"contentView\",\n    value: function () {\n      var _contentView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(contentTxId, state) {\n        var rewardReport, nftState, contentViews;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                rewardReport = state.stateUpdate.trafficLogs.rewardReport;\n                _context14.prev = 1;\n                _context14.next = 4;\n                return this.readNftState(contentTxId);\n\n              case 4:\n                nftState = _context14.sent;\n                contentViews = _objectSpread(_objectSpread({}, nftState), {}, {\n                  totalViews: 0,\n                  totalReward: 0,\n                  twentyFourHrViews: 0,\n                  txIdContent: contentTxId\n                });\n                rewardReport.forEach(function (ele) {\n                  var logSummary = ele.logsSummary;\n\n                  for (var txId in logSummary) {\n                    if (txId == contentTxId) {\n                      if (rewardReport.indexOf(ele) == rewardReport.length - 1) {\n                        contentViews.twentyFourHrViews = logSummary[contentTxId];\n                      }\n\n                      var rewardPerAttention = ele.rewardPerAttention;\n                      contentViews.totalViews += logSummary[contentTxId];\n                      var rewardPerLog = logSummary[contentTxId] * rewardPerAttention;\n                      contentViews.totalReward += rewardPerLog;\n                    }\n                  }\n                });\n                return _context14.abrupt(\"return\", contentViews);\n\n              case 10:\n                _context14.prev = 10;\n                _context14.t0 = _context14[\"catch\"](1);\n                return _context14.abrupt(\"return\", null);\n\n              case 13:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[1, 10]]);\n      }));\n\n      function contentView(_x11, _x12) {\n        return _contentView.apply(this, arguments);\n      }\n\n      return contentView;\n    }()\n    /**\n     * Get a list of all NFT IDs\n     * @returns Array of transaction IDs which are registered NFTs\n     */\n\n  }, {\n    key: \"retrieveAllRegisteredContent\",\n    value: function () {\n      var _retrieveAllRegisteredContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var state, registerRecords, txIdArr;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.getContractState();\n\n              case 2:\n                state = _context15.sent;\n                registerRecords = state.registeredRecord;\n                txIdArr = Object.keys(registerRecords);\n                return _context15.abrupt(\"return\", txIdArr);\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function retrieveAllRegisteredContent() {\n        return _retrieveAllRegisteredContent.apply(this, arguments);\n      }\n\n      return retrieveAllRegisteredContent;\n    }()\n    /**\n     * Get a list of NFT IDs by owner\n     * @param owner Wallet address of the owner\n     * @returns Array containing the NFTs\n     */\n\n  }, {\n    key: \"getNftIdsByOwner\",\n    value: function () {\n      var _getNftIdsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(owner) {\n        var state, nfts, nft;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getContractState();\n\n              case 2:\n                state = _context16.sent;\n                nfts = [];\n\n                for (nft in state.registeredRecord) {\n                  if (state.registeredRecord[nft] === owner) nfts.push(nft);\n                }\n\n                return _context16.abrupt(\"return\", nfts);\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getNftIdsByOwner(_x13) {\n        return _getNftIdsByOwner.apply(this, arguments);\n      }\n\n      return getNftIdsByOwner;\n    }()\n    /**\n     * Get Koi rewards earned from an NFT\n     * @param txId The transaction id to process\n     * @returns Koi rewards earned or null if the transaction is not a valid Koi NFT\n     */\n\n  }, {\n    key: \"getNftReward\",\n    value: function () {\n      var _getNftReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(txId) {\n        var state, nft;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getContractState();\n\n              case 2:\n                state = _context17.sent;\n\n                if (txId in state.registeredRecord) {\n                  _context17.next = 5;\n                  break;\n                }\n\n                return _context17.abrupt(\"return\", null);\n\n              case 5:\n                _context17.next = 7;\n                return this.contentView(txId, state);\n\n              case 7:\n                nft = _context17.sent;\n                return _context17.abrupt(\"return\", nft.totalReward);\n\n              case 9:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getNftReward(_x14) {\n        return _getNftReward.apply(this, arguments);\n      }\n\n      return getNftReward;\n    }()\n    /**\n     * Query Arweave using GQL\n     * @param request Query string\n     * @returns Object containing the query results\n     */\n\n  }, {\n    key: \"gql\",\n    value: function () {\n      var _gql = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(request) {\n        var _yield$axios_1$defaul, data;\n\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return axios_1.default.post(URL_ARWEAVE_GQL, request, {\n                  headers: {\n                    \"content-type\": \"application/json\"\n                  }\n                });\n\n              case 2:\n                _yield$axios_1$defaul = _context18.sent;\n                data = _yield$axios_1$defaul.data;\n                return _context18.abrupt(\"return\", data);\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function gql(_x15) {\n        return _gql.apply(this, arguments);\n      }\n\n      return gql;\n    }()\n    /**\n     * Gets an array of service nodes\n     * @param url URL of the service node to retrieve the array from a known service node\n     * @returns Array of service nodes\n     */\n\n  }, {\n    key: \"getNodes\",\n    value: function () {\n      var _getNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var url,\n            res,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                url = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : this.bundlerUrl;\n                _context19.next = 3;\n                return getCacheData(url + exports.BUNDLER_NODES);\n\n              case 3:\n                res = _context19.sent;\n                _context19.prev = 4;\n                return _context19.abrupt(\"return\", JSON.parse(res.data));\n\n              case 8:\n                _context19.prev = 8;\n                _context19.t0 = _context19[\"catch\"](4);\n                return _context19.abrupt(\"return\", []);\n\n              case 11:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[4, 8]]);\n      }));\n\n      function getNodes() {\n        return _getNodes.apply(this, arguments);\n      }\n\n      return getNodes;\n    }()\n    /**\n     * Gets the list of all KIDs(DIDs)\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns {Array} - returns a Javascript Array of object with each object representing a single KID\n     */\n\n  }, {\n    key: \"getAllKID\",\n    value: function () {\n      var _getAllKID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(count, cursorId) {\n        var countStr, afterStr, query, request, gqlResp;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                countStr = count !== undefined ? \", first: \".concat(count) : \"\";\n                afterStr = cursorId !== undefined ? \", after: \\\"\".concat(cursorId, \"\\\"\") : \"\";\n                query = \"\\n    query {\\n      transactions(tags: {\\n        name: \\\"Action\\\",\\n        values: [\\\"KID/Create\\\"]\\n    }\".concat(countStr).concat(afterStr, \") {\\n        \").concat(BLOCK_TEMPLATE, \"\\n      }\\n    }\");\n                request = JSON.stringify({\n                  query: query\n                });\n                _context20.next = 6;\n                return this.gql(request);\n\n              case 6:\n                gqlResp = _context20.sent;\n\n                if (!(gqlResp && gqlResp.data.transactions.edges)) {\n                  _context20.next = 9;\n                  break;\n                }\n\n                return _context20.abrupt(\"return\", gqlResp.data.transactions.edges);\n\n              case 9:\n                return _context20.abrupt(\"return\", {\n                  message: \"No KIDs Found\"\n                });\n\n              case 10:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAllKID(_x16, _x17) {\n        return _getAllKID.apply(this, arguments);\n      }\n\n      return getAllKID;\n    }()\n    /**\n       * Get the KID state for the particular walletAddress\n       * @param walletAddress The wallet address for the person whose DID is to be found\n       * @returns {Object} - returns a contract object having id which can be used to get the state\n       */\n\n  }, {\n    key: \"getKIDByWalletAddress\",\n    value: function () {\n      var _getKIDByWalletAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(walletAddress) {\n        var query, request, gqlResp;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                query = \"\\n      query {\\n        transactions(tags: [{\\n          name: \\\"Action\\\",\\n          values: [\\\"KID/Create\\\"]\\n      },\\n        {\\n          name: \\\"Wallet-Address\\\",\\n          values: [\\\"\".concat(walletAddress, \"\\\"]\\n      }\\n      ]) {\\n          \").concat(BLOCK_TEMPLATE, \"\\n        }\\n      }\");\n                request = JSON.stringify({\n                  query: query\n                });\n                _context21.next = 4;\n                return this.gql(request);\n\n              case 4:\n                gqlResp = _context21.sent;\n\n                if (!(gqlResp && gqlResp.data.transactions.edges)) {\n                  _context21.next = 7;\n                  break;\n                }\n\n                return _context21.abrupt(\"return\", gqlResp.data.transactions.edges);\n\n              case 7:\n                return _context21.abrupt(\"return\", {\n                  message: \"No KID Found for this address\"\n                });\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getKIDByWalletAddress(_x18) {\n        return _getKIDByWalletAddress.apply(this, arguments);\n      }\n\n      return getKIDByWalletAddress;\n    }()\n    /**\n     * Creates a KID smartcontract on arweave\n     * @param KIDObject - an object containing name, description, addresses and link\n     * @param image - an object containing contentType and blobData\n     * @returns {txId} - returns a txId in case of success and false in case of failure\n     */\n\n  }, {\n    key: \"createKID\",\n    value: function () {\n      var _createKID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(KIDObject, image) {\n        var initialState, tx, uploader;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                initialState = KIDObject;\n\n                if (!(initialState && initialState.addresses && initialState.addresses.Arweave)) {\n                  _context22.next = 36;\n                  break;\n                }\n\n                _context22.prev = 2;\n                _context22.next = 5;\n                return exports.arweave.createTransaction({\n                  data: image.blobData\n                }, this.wallet);\n\n              case 5:\n                tx = _context22.sent;\n                tx.addTag('Content-Type', image.contentType);\n                tx.addTag('Network', 'Koii');\n                tx.addTag('Action', 'KID/Create');\n                tx.addTag('App-Name', 'SmartWeaveContract');\n                tx.addTag('App-Version', '0.1.0');\n                tx.addTag('Contract-Src', 't2jB63nGIWYUTDy2b00JPzSDtx1GQRsmKUeHtvZu1_A');\n                tx.addTag('Wallet-Address', initialState.addresses.Arweave);\n                tx.addTag('Init-State', JSON.stringify(initialState));\n                _context22.next = 16;\n                return exports.arweave.transactions.sign(tx, this.wallet);\n\n              case 16:\n                _context22.next = 18;\n                return exports.arweave.transactions.getUploader(tx);\n\n              case 18:\n                uploader = _context22.sent;\n\n              case 19:\n                if (uploader.isComplete) {\n                  _context22.next = 25;\n                  break;\n                }\n\n                _context22.next = 22;\n                return uploader.uploadChunk();\n\n              case 22:\n                console.log(uploader.pctComplete + '% complete', uploader.uploadedChunks + '/' + uploader.totalChunks);\n                _context22.next = 19;\n                break;\n\n              case 25:\n                console.log(\"TX ID: \", tx.id);\n                return _context22.abrupt(\"return\", tx.id);\n\n              case 29:\n                _context22.prev = 29;\n                _context22.t0 = _context22[\"catch\"](2);\n                console.log('create transaction error');\n                console.log('err-transaction', _context22.t0);\n                return _context22.abrupt(\"return\", false);\n\n              case 34:\n                _context22.next = 38;\n                break;\n\n              case 36:\n                console.log('Arweave Address missing in addresses');\n                return _context22.abrupt(\"return\", false);\n\n              case 38:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[2, 29]]);\n      }));\n\n      function createKID(_x19, _x20) {\n        return _createKID.apply(this, arguments);\n      }\n\n      return createKID;\n    }()\n    /**\n     * Updates the state of a KID smartcontract on arweave\n     * @param KIDObject - an object containing name, description, addresses and link\n     * @param contractId - the contract Id for KID to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"updateKID\",\n    value: function () {\n      var _updateKID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(KIDObject, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context23.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, _objectSpread({\n                  function: 'updateKID'\n                }, KIDObject));\n\n              case 3:\n                txId = _context23.sent;\n                return _context23.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function updateKID(_x21, _x22) {\n        return _updateKID.apply(this, arguments);\n      }\n\n      return updateKID;\n    }()\n    /**\n       * Creates a NFT Collection smartcontract on arweave\n       * @param collectionObject - an object containing name, description, addresses and link\n       * @returns {txId} - returns a txId in case of success and false in case of failure\n       */\n\n  }, {\n    key: \"createCollection\",\n    value: function () {\n      var _createCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(collectionObject) {\n        var initialState, tx, uploader;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                initialState = collectionObject;\n\n                if (collectionObject.owner) {\n                  _context24.next = 4;\n                  break;\n                }\n\n                console.log(\"collectionObject doesn't contain an owner\");\n                return _context24.abrupt(\"return\", false);\n\n              case 4:\n                _context24.prev = 4;\n                _context24.next = 7;\n                return exports.arweave.createTransaction({\n                  data: Buffer.from(collectionObject.owner, 'utf8')\n                }, this.wallet);\n\n              case 7:\n                tx = _context24.sent;\n                tx.addTag('Content-Type', 'text/plain');\n                tx.addTag('Network', 'Koii');\n                tx.addTag('Action', 'Collection/Create');\n                tx.addTag('App-Name', 'SmartWeaveContract');\n                tx.addTag('App-Version', '0.1.0');\n                tx.addTag('Contract-Src', 'NCepV_8bY831CMHK0LZQAQAVwZyNKLalmC36FlagLQE');\n                tx.addTag('Wallet-Address', collectionObject.owner);\n                tx.addTag('Init-State', JSON.stringify(initialState));\n                _context24.next = 18;\n                return exports.arweave.transactions.sign(tx, this.wallet);\n\n              case 18:\n                _context24.next = 20;\n                return exports.arweave.transactions.getUploader(tx);\n\n              case 20:\n                uploader = _context24.sent;\n\n              case 21:\n                if (uploader.isComplete) {\n                  _context24.next = 27;\n                  break;\n                }\n\n                _context24.next = 24;\n                return uploader.uploadChunk();\n\n              case 24:\n                console.log(uploader.pctComplete + '% complete', uploader.uploadedChunks + '/' + uploader.totalChunks);\n                _context24.next = 21;\n                break;\n\n              case 27:\n                console.log(\"TX ID: \", tx.id);\n                return _context24.abrupt(\"return\", tx.id);\n\n              case 31:\n                _context24.prev = 31;\n                _context24.t0 = _context24[\"catch\"](4);\n                console.log('create transaction error');\n                console.log('err-transaction', _context24.t0);\n                return _context24.abrupt(\"return\", false);\n\n              case 36:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this, [[4, 31]]);\n      }));\n\n      function createCollection(_x23) {\n        return _createCollection.apply(this, arguments);\n      }\n\n      return createCollection;\n    }()\n    /**\n       * Gets the list of all Collections by walletAddress\n       * @param walletAddress The wallet address for the person whose DID is to be found\n       * @param count The number of results to return\n       * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n       * @returns {Array} - returns a Javascript Array of object with each object representing a Collection object (The collection object contains id which can be used in func readState to get actual state)\n       */\n\n  }, {\n    key: \"getCollectionsByWalletAddress\",\n    value: function () {\n      var _getCollectionsByWalletAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(walletAddress, count, cursorId) {\n        var countStr, afterStr, query, request, gqlResp;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                countStr = count !== undefined ? \", first: \".concat(count) : \"\";\n                afterStr = cursorId !== undefined ? \", after: \\\"\".concat(cursorId, \"\\\"\") : \"\";\n                query = \"\\n      query {\\n        transactions(tags: [{\\n          name: \\\"Action\\\",\\n          values: [\\\"Collection/Create\\\"]\\n      },\\n        {\\n          name: \\\"Wallet-Address\\\",\\n          values: [\\\"\".concat(walletAddress, \"\\\"]\\n      }\\n      ]\").concat(countStr).concat(afterStr, \") {\\n          \").concat(BLOCK_TEMPLATE, \"\\n        }\\n      }\");\n                request = JSON.stringify({\n                  query: query\n                });\n                _context25.next = 6;\n                return this.gql(request);\n\n              case 6:\n                gqlResp = _context25.sent;\n\n                if (!(gqlResp && gqlResp.data.transactions.edges)) {\n                  _context25.next = 9;\n                  break;\n                }\n\n                return _context25.abrupt(\"return\", gqlResp.data.transactions.edges);\n\n              case 9:\n                return _context25.abrupt(\"return\", {\n                  message: \"No Collections found for this address\"\n                });\n\n              case 10:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getCollectionsByWalletAddress(_x24, _x25, _x26) {\n        return _getCollectionsByWalletAddress.apply(this, arguments);\n      }\n\n      return getCollectionsByWalletAddress;\n    }()\n    /**\n     * Get the state from arweave for any contract\n     * @param txId Transaction ID of the NFT\n     * @returns The NFT state object\n     */\n\n  }, {\n    key: \"readState\",\n    value: function () {\n      var _readState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(txId) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                return _context26.abrupt(\"return\", smartweave_1.smartweave.readContract(exports.arweave, txId));\n\n              case 1:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function readState(_x27) {\n        return _readState.apply(this, arguments);\n      }\n\n      return readState;\n    }()\n    /**\n     * Add new NFTs to the existing collection\n     * @param nftId - The transaction id of the NFT to be added to the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"addToCollection\",\n    value: function () {\n      var _addToCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(nftId, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context27.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n                  function: 'addToCollection',\n                  nftId: nftId\n                });\n\n              case 3:\n                txId = _context27.sent;\n                return _context27.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function addToCollection(_x28, _x29) {\n        return _addToCollection.apply(this, arguments);\n      }\n\n      return addToCollection;\n    }()\n    /**\n     * Remove NFTs from the existing collection\n     * @param index - The index of the NFT which is to be removed from the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"removeFromCollection\",\n    value: function () {\n      var _removeFromCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(index, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context28.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n                  function: 'removeFromCollection',\n                  index: index\n                });\n\n              case 3:\n                txId = _context28.sent;\n                return _context28.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function removeFromCollection(_x30, _x31) {\n        return _removeFromCollection.apply(this, arguments);\n      }\n\n      return removeFromCollection;\n    }()\n    /**\n     * Updates the view of the existing Collection\n     * @param newView - The view you want to set for the collection to display (Initialized with 'default')\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"updateView\",\n    value: function () {\n      var _updateView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(newView, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context29.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n                  function: 'updateView',\n                  newView: newView\n                });\n\n              case 3:\n                txId = _context29.sent;\n                return _context29.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function updateView(_x32, _x33) {\n        return _updateView.apply(this, arguments);\n      }\n\n      return updateView;\n    }()\n    /**\n     * Updates the index of the NFT which should be used as the preview for the collection\n     * @param imageIndex - The index of the NFT which should be used as the preview for the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"updatePreviewImageIndex\",\n    value: function () {\n      var _updatePreviewImageIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(imageIndex, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context30.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n                  function: 'updatePreviewImageIndex',\n                  imageIndex: imageIndex\n                });\n\n              case 3:\n                txId = _context30.sent;\n                return _context30.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function updatePreviewImageIndex(_x34, _x35) {\n        return _updatePreviewImageIndex.apply(this, arguments);\n      }\n\n      return updatePreviewImageIndex;\n    }()\n    /**\n     * Updates the array of NFTs from which the collection is composed of (Can be used to reorder the NFts in the collection also)\n     * @param collection - The array of NFTs from which the collection is composed of.\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n\n  }, {\n    key: \"updateCollection\",\n    value: function () {\n      var _updateCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(collection, contractId) {\n        var wallet, txId;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n                _context31.next = 3;\n                return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n                  function: 'updateCollection',\n                  collection: collection\n                });\n\n              case 3:\n                txId = _context31.sent;\n                return _context31.abrupt(\"return\", txId);\n\n              case 5:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function updateCollection(_x36, _x37) {\n        return _updateCollection.apply(this, arguments);\n      }\n\n      return updateCollection;\n    }()\n    /**\n     *  Calculates total Views and earned KOII for given NFTIds Array\n     * @param nftIdArr - The array of NFTIds for which total Views and earned KOII will be calculated\n     * @returns {object} - returns an object containing totalViews and totalRewards\n     */\n\n  }, {\n    key: \"getViewsAndEarnedKOII\",\n    value: function () {\n      var _getViewsAndEarnedKOII = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(nftIdArr) {\n        var state, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getContractState();\n\n              case 2:\n                state = _context32.sent;\n\n                if (!state) {\n                  _context32.next = 9;\n                  break;\n                }\n\n                _ret = function () {\n                  var rewardReport = state.stateUpdate ? state.stateUpdate.trafficLogs.rewardReport : [];\n                  var totalViewsOverall = 0;\n                  var totalRewardOverall = 0;\n\n                  var _loop = function _loop(i) {\n                    var contentTxId = nftIdArr[i];\n                    var contentViews = {\n                      totalViews: 0,\n                      totalReward: 0,\n                      twentyFourHrViews: 0\n                    };\n                    rewardReport.forEach(function (ele) {\n                      var logSummary = ele.logsSummary;\n\n                      for (var txId in logSummary) {\n                        if (txId == contentTxId) {\n                          if (rewardReport.indexOf(ele) == rewardReport.length - 1) {\n                            contentViews.twentyFourHrViews = logSummary[contentTxId];\n                          }\n\n                          var rewardPerAttention = ele.rewardPerAttention;\n                          contentViews.totalViews += logSummary[contentTxId];\n                          var rewardPerLog = logSummary[contentTxId] * rewardPerAttention;\n                          contentViews.totalReward += rewardPerLog;\n                        }\n                      }\n                    });\n                    totalViewsOverall += contentViews.totalViews;\n                    totalRewardOverall += contentViews.totalReward;\n                  };\n\n                  for (var i = 0; i < nftIdArr.length; i++) {\n                    _loop(i);\n                  }\n\n                  return {\n                    v: {\n                      totalViews: totalViewsOverall,\n                      totalReward: totalRewardOverall\n                    }\n                  };\n                }();\n\n                if (!(typeof _ret === \"object\")) {\n                  _context32.next = 7;\n                  break;\n                }\n\n                return _context32.abrupt(\"return\", _ret.v);\n\n              case 7:\n                _context32.next = 10;\n                break;\n\n              case 9:\n                return _context32.abrupt(\"return\", {\n                  message: \"Views and earned KOII cannot be extracted (State not valid)\"\n                });\n\n              case 10:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function getViewsAndEarnedKOII(_x38) {\n        return _getViewsAndEarnedKOII.apply(this, arguments);\n      }\n\n      return getViewsAndEarnedKOII;\n    }() // Protected functions\n\n    /**\n     * Writes to contract\n     * @param input Passes to smartweave write function, in order to execute a contract function\n     * @returns Transaction ID\n     */\n\n  }, {\n    key: \"_interactWrite\",\n    value: function _interactWrite(input) {\n      var wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n      return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, this.contractId, input);\n    }\n    /**\n     * Read contract latest state\n     * @returns Contract\n     */\n\n  }, {\n    key: \"_readContract\",\n    value: function () {\n      var _readContract2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n        var poolID, query, snapshotArray;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                // return smartweave.readContract(arweave, this.contractId);\n                poolID = \"OFD4GqQcqp-Y_Iqh8DN_0s3a_68oMvvnekeOEu_a45I\";\n                query = new query_1.Query(poolID); // finding latest transactions\n\n                _context33.prev = 2;\n                _context33.next = 5;\n                return query.limit(1).find();\n\n              case 5:\n                snapshotArray = _context33.sent;\n\n                if (!(snapshotArray && snapshotArray.length > 0)) {\n                  _context33.next = 10;\n                  break;\n                }\n\n                return _context33.abrupt(\"return\", JSON.parse(snapshotArray[0]).state);\n\n              case 10:\n                console.error(\"NOTHING RETURNED FROM KYVE\");\n\n              case 11:\n                _context33.next = 16;\n                break;\n\n              case 13:\n                _context33.prev = 13;\n                _context33.t0 = _context33[\"catch\"](2);\n                console.error(\"ERROR RETRIEVING FROM KYVE\", _context33.t0);\n\n              case 16:\n                return _context33.abrupt(\"return\", smartweave_1.smartweave.readContract(exports.arweave, this.contractId));\n\n              case 17:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this, [[2, 13]]);\n      }));\n\n      function _readContract() {\n        return _readContract2.apply(this, arguments);\n      }\n\n      return _readContract;\n    }() // Private functions\n\n    /**\n     * Generate a 12 word mnemonic for an Arweave key https://github.com/acolytec3/arweave-mnemonic-keys\n     * @returns {string} - a promise resolving to a 12 word mnemonic seed phrase\n     */\n\n  }, {\n    key: \"_generateMnemonic\",\n    value: function () {\n      var _generateMnemonic2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        var keys;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return human_crypto_keys_1.generateKeyPair({\n                  id: \"rsa\",\n                  modulusLength: 4096\n                }, {\n                  privateKeyFormat: \"pkcs1-pem\"\n                });\n\n              case 2:\n                keys = _context34.sent;\n                return _context34.abrupt(\"return\", keys.mnemonic);\n\n              case 4:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34);\n      }));\n\n      function _generateMnemonic() {\n        return _generateMnemonic2.apply(this, arguments);\n      }\n\n      return _generateMnemonic;\n    }()\n    /**\n     * Generates a JWK object representation of an Arweave key\n     * @param mnemonic - a 12 word mnemonic represented as a string\n     * @returns {object} - returns a Javascript object that conforms to the JWKInterface required by Arweave-js\n     */\n\n  }, {\n    key: \"_getKeyFromMnemonic\",\n    value: function () {\n      var _getKeyFromMnemonic2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(mnemonic) {\n        var keyPair, privateKey;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                _context35.next = 2;\n                return human_crypto_keys_1.getKeyPairFromMnemonic(mnemonic, {\n                  id: \"rsa\",\n                  modulusLength: 4096\n                }, {\n                  privateKeyFormat: \"pkcs1-pem\"\n                });\n\n              case 2:\n                keyPair = _context35.sent;\n                //@ts-ignore Need to access private attribute\n                privateKey = pem_jwk_1.pem2jwk(keyPair.privateKey);\n                delete privateKey.alg;\n                delete privateKey.key_ops;\n                return _context35.abrupt(\"return\", privateKey);\n\n              case 7:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function _getKeyFromMnemonic(_x39) {\n        return _getKeyFromMnemonic2.apply(this, arguments);\n      }\n\n      return _getKeyFromMnemonic;\n    }()\n  }]);\n\n  return Common;\n}();\n\nexports.Common = Common;\n/**\n * Get cached data from path\n * @param path Path to cached data\n * @returns Data as generic type T\n */\n\nfunction getCacheData(path) {\n  return axios_1.default.get(path);\n}\n\nexports.getCacheData = getCacheData;\n/**\n * Get info from Arweave net\n * @returns Axios response with info\n */\n\nfunction getArweaveNetInfo() {\n  return axios_1.default.get(URL_ARWEAVE_INFO);\n}\n\nmodule.exports = {\n  BUNDLER_NODES: exports.BUNDLER_NODES,\n  arweave: exports.arweave,\n  Common: Common,\n  getCacheData: getCacheData\n};","map":{"version":3,"sources":["../src/common.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCacheData = exports.Common = exports.BUNDLER_NODES = exports.arweave = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst arweave_1 = __importDefault(require(\"arweave\"));\nconst arweaveUtils = __importStar(require(\"arweave/node/lib/utils\"));\nconst smartweave_1 = require(\"smartweave\");\nconst query_1 = require(\"@kyve/query\");\n//@ts-ignore // Needed to allow implicit any here\nconst human_crypto_keys_1 = require(\"human-crypto-keys\");\n//@ts-ignore\nconst pem_jwk_1 = require(\"pem-jwk\");\nconst HOST_GATEWAY = \"arweave.net\";\nconst URL_ARWEAVE_INFO = `https://${HOST_GATEWAY}/info`;\nconst URL_ARWEAVE_GQL = `https://${HOST_GATEWAY}/graphql`;\nconst BLOCK_TEMPLATE = `\n  pageInfo {\n    hasNextPage\n  }\n  edges {\n    cursor\n    node {\n      id anchor signature recipient\n      owner { address key }\n      fee { winston ar }\n      quantity { winston ar }\n      data { size type }\n      tags { name value }\n      block { id timestamp height previous }\n      parent { id }\n    }\n  }`;\nexports.arweave = arweave_1.default.init({\n    host: HOST_GATEWAY,\n    protocol: \"https\",\n    port: 443\n});\nexports.BUNDLER_NODES = \"/nodes\";\n/**\n * Tools for interacting with the koi network\n */\nclass Common {\n    constructor(bundlerUrl = \"https://bundler.openkoi.com:8888\", contractId = \"cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc\") {\n        this.bundlerUrl = bundlerUrl;\n        this.contractId = contractId;\n        console.log(\"Initialized Koii Tools for true ownership and direct communication using version \", this.contractId);\n    }\n    /**\n     * Generates wallet optionally with a mnemonic phrase\n     * @param use_mnemonic [false] Flag for enabling mnemonic phrase wallet generation\n     */\n    async generateWallet(use_mnemonic = false) {\n        let key, mnemonic;\n        if (use_mnemonic === true) {\n            mnemonic = await this._generateMnemonic();\n            key = await this._getKeyFromMnemonic(mnemonic);\n        }\n        else\n            key = await exports.arweave.wallets.generate();\n        if (!key)\n            throw Error(\"failed to create wallet\");\n        this.mnemonic = mnemonic;\n        this.wallet = key;\n        await this.getWalletAddress();\n        return true;\n    }\n    /**\n     * Loads arweave wallet\n     * @param source object to load from, JSON or JWK, or mnemonic key\n     */\n    async loadWallet(source) {\n        switch (typeof source) {\n            case \"string\":\n                this.wallet = await this._getKeyFromMnemonic(source);\n                break;\n            default:\n                this.wallet = source;\n        }\n        await this.getWalletAddress();\n        return this.wallet;\n    }\n    /**\n     * Manually set wallet address\n     * @param walletAddress Address as a string\n     * @returns Wallet address\n     */\n    setWallet(walletAddress) {\n        if (!this.address)\n            this.address = walletAddress;\n        return this.address;\n    }\n    /**\n     * Uses koi wallet to get the address\n     * @returns Wallet address\n     */\n    async getWalletAddress() {\n        if (typeof this.address !== \"string\")\n            this.address = await exports.arweave.wallets.jwkToAddress(this.wallet);\n        return this.address;\n    }\n    /**\n     * Get and set arweave balance\n     * @returns Balance as a string if wallet exists, else undefined\n     */\n    async getWalletBalance() {\n        if (!this.address)\n            return 0;\n        const winston = await exports.arweave.wallets.getBalance(this.address);\n        const ar = exports.arweave.ar.winstonToAr(winston);\n        return parseFloat(ar);\n    }\n    /**\n     * Gets koi balance from cache\n     * @returns Balance as a number\n     */\n    async getKoiBalance() {\n        const state = await this.getContractState();\n        if (this.address !== undefined && this.address in state.balances)\n            return state.balances[this.address];\n        return 0;\n    }\n    /**\n     * Gets the current contract state\n     * @returns Current KOI system state\n     */\n    getContractState() {\n        return this._readContract();\n    }\n    /**\n     * Get contract state\n     * @param id Transaction ID\n     * @returns State object\n     */\n    async getTransaction(id) {\n        return exports.arweave.transactions.get(id);\n    }\n    /**\n     * Get block height\n     * @returns Block height maybe number\n     */\n    async getBlockHeight() {\n        const info = await getArweaveNetInfo();\n        return info.data.height;\n    }\n    /**\n     * Get the NFT state from arweave, this should be the initial state\n     * @param txId Transaction ID of the NFT\n     * @returns The NFT state object\n     */\n    async readNftState(txId) {\n        try {\n            const response = await axios_1.default.get(`https://bundler.openkoi.com:8888/state/getNFTState?tranxId=${txId}`);\n            return response.data;\n        }\n        catch (err) {\n            console.log(\"ERRPR\", err);\n            if (err)\n                console.error('error fetching NFT data from bundler for ' + txId);\n            return smartweave_1.smartweave.readContract(exports.arweave, txId);\n        }\n    }\n    /**\n     * Interact with contract to stake\n     * @param qty Quantity to stake\n     * @returns Transaction ID\n     */\n    stake(qty) {\n        if (!Number.isInteger(qty))\n            throw Error('Invalid value for \"qty\". Must be an integer');\n        const input = {\n            function: \"stake\",\n            qty: qty\n        };\n        return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to withdraw\n     * @param qty Quantity to transfer\n     * @returns Transaction ID\n     */\n    withdraw(qty) {\n        if (!Number.isInteger(qty))\n            throw Error('Invalid value for \"qty\". Must be an integer');\n        const input = {\n            function: \"withdraw\",\n            qty: qty\n        };\n        return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to transfer koi\n     * @param qty Quantity to transfer\n     * @param target Receiver address\n     * @returns Transaction ID\n     */\n    async transfer(qty, target, token) {\n        const input = {\n            function: \"transfer\",\n            qty: qty,\n            target: target\n        };\n        switch (token) {\n            case \"AR\": {\n                const transaction = await exports.arweave.createTransaction({ target: target, quantity: exports.arweave.ar.arToWinston(qty.toString()) }, this.wallet);\n                await exports.arweave.transactions.sign(transaction, this.wallet);\n                await exports.arweave.transactions.post(transaction);\n                return transaction.id;\n            }\n            case \"KOI\": {\n                const txid = await this._interactWrite(input);\n                return txid;\n            }\n            default: {\n                throw Error(\"token or coin ticker doesn't exist\");\n            }\n        }\n    }\n    /**\n     * Mint koi\n     * @param arg object arg.targetAddress(receiver address) and arg.qty(amount to mint)\n     * @returns Transaction ID\n     */\n    mint(arg) {\n        const input = {\n            function: \"mint\",\n            qty: arg.qty,\n            target: arg.targetAddress\n        };\n        return this._interactWrite(input);\n    }\n    /**\n     * Interact with contract to register data\n     * @param txId It has batchFile/value(string) and stake amount/value(int) as properties\n     * @param ownerId String container the owner ID\n     * @returns Transaction ID\n     */\n    registerData(txId, ownerId = \"\") {\n        const input = {\n            function: \"registerData\",\n            txId: txId,\n            owner: ownerId\n        };\n        return this._interactWrite(input);\n    }\n    /**\n     * Sign transaction\n     * @param tx Transaction to be signed\n     * @returns signed Transaction\n     */\n    async signTransaction(tx) {\n        try {\n            //const wallet = this.wallet;\n            // Now we sign the transaction\n            await exports.arweave.transactions.sign(tx, this.wallet);\n            // After is signed, we send the transaction\n            //await exports.arweave.transactions.post(transaction);\n            return tx;\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    /**\n     * Get transaction data from Arweave\n     * @param txId Transaction ID\n     * @returns Transaction\n     */\n    nftTransactionData(txId) {\n        return exports.arweave.transactions.get(txId);\n    }\n    /**\n     * Sign payload\n     * @param payload Payload to sign\n     * @returns Signed payload with signature\n     */\n    async signPayload(payload) {\n        if (this.wallet === undefined)\n            return null;\n        const data = payload.data || payload.vote || null;\n        const jwk = this.wallet;\n        const publicModulus = jwk.n;\n        const dataInString = JSON.stringify(data);\n        const dataIn8Array = arweaveUtils.stringToBuffer(dataInString);\n        const rawSignature = await exports.arweave.crypto.sign(jwk, dataIn8Array);\n        payload.signature = arweaveUtils.bufferTob64Url(rawSignature);\n        payload.owner = publicModulus;\n        return payload;\n    }\n    /**\n     * Verify signed payload\n     * @param payload\n     * @returns Verification result\n     */\n    async verifySignature(payload) {\n        const data = payload.data || payload.vote || null;\n        const rawSignature = arweaveUtils.b64UrlToBuffer(payload.signature);\n        const dataInString = JSON.stringify(data);\n        const dataIn8Array = arweaveUtils.stringToBuffer(dataInString);\n        return await exports.arweave.crypto.verify(payload.owner, dataIn8Array, rawSignature);\n    }\n    /**\n     * Posts data to Arweave\n     * @param data\n     * @returns Transaction ID\n     */\n    async postData(data) {\n        // TODO: define data interface\n        const wallet = this.wallet;\n        const transaction = await exports.arweave.createTransaction({\n            data: Buffer.from(JSON.stringify(data, null, 2), \"utf8\")\n        }, wallet);\n        // Now we sign the transaction\n        await exports.arweave.transactions.sign(transaction, wallet);\n        const txId = transaction.id;\n        // After is signed, we send the transaction\n        const response = await exports.arweave.transactions.post(transaction);\n        if (response.status === 200)\n            return txId;\n        return null;\n    }\n    /**\n     * Gets all the transactions where the wallet is the owner\n     * @param wallet Wallet address as a string\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns Object with transaction IDs as keys, and transaction data strings as values\n     */\n    getOwnedTxs(wallet, count, cursorId) {\n        const countStr = count !== undefined ? `, first: ${count}` : \"\";\n        const afterStr = cursorId !== undefined ? `, after: \"${cursorId}\"` : \"\";\n        const query = `\n      query {\n        transactions(owners:[\"${wallet}\"]${countStr}${afterStr}) {\n          ${BLOCK_TEMPLATE}\n        }\n      }`;\n        const request = JSON.stringify({ query });\n        return this.gql(request);\n    }\n    /**\n     * Gets all the transactions where the wallet is the recipient\n     * @param wallet Wallet address as a string\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns Object with transaction IDs as keys, and transaction data strings as values\n     */\n    getRecipientTxs(wallet, count, cursorId) {\n        const countStr = count !== undefined ? `, first: ${count}` : \"\";\n        const afterStr = cursorId !== undefined ? `, after: \"${cursorId}\"` : \"\";\n        const query = `\n      query {\n        transactions(recipients:[\"${wallet}\"]${countStr}${afterStr}) {\n          ${BLOCK_TEMPLATE}\n        }\n      }`;\n        const request = JSON.stringify({ query });\n        return this.gql(request);\n    }\n    /**\n     * Get the updated state of an NFT\n     * @param contentTxId TxId of the content\n     * @param state\n     * @returns An object with {totaltViews, totalReward, 24hrsViews}\n     */\n    async contentView(contentTxId, state) {\n        const rewardReport = state.stateUpdate.trafficLogs.rewardReport;\n        try {\n            const nftState = await this.readNftState(contentTxId);\n            const contentViews = {\n                ...nftState,\n                totalViews: 0,\n                totalReward: 0,\n                twentyFourHrViews: 0,\n                txIdContent: contentTxId\n            };\n            rewardReport.forEach((ele) => {\n                const logSummary = ele.logsSummary;\n                for (const txId in logSummary) {\n                    if (txId == contentTxId) {\n                        if (rewardReport.indexOf(ele) == rewardReport.length - 1) {\n                            contentViews.twentyFourHrViews = logSummary[contentTxId];\n                        }\n                        const rewardPerAttention = ele.rewardPerAttention;\n                        contentViews.totalViews += logSummary[contentTxId];\n                        const rewardPerLog = logSummary[contentTxId] * rewardPerAttention;\n                        contentViews.totalReward += rewardPerLog;\n                    }\n                }\n            });\n            return contentViews;\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    /**\n     * Get a list of all NFT IDs\n     * @returns Array of transaction IDs which are registered NFTs\n     */\n    async retrieveAllRegisteredContent() {\n        const state = await this.getContractState();\n        const registerRecords = state.registeredRecord;\n        const txIdArr = Object.keys(registerRecords);\n        return txIdArr;\n    }\n    /**\n     * Get a list of NFT IDs by owner\n     * @param owner Wallet address of the owner\n     * @returns Array containing the NFTs\n     */\n    async getNftIdsByOwner(owner) {\n        const state = await this.getContractState();\n        const nfts = [];\n        for (const nft in state.registeredRecord)\n            if (state.registeredRecord[nft] === owner)\n                nfts.push(nft);\n        return nfts;\n    }\n    /**\n     * Get Koi rewards earned from an NFT\n     * @param txId The transaction id to process\n     * @returns Koi rewards earned or null if the transaction is not a valid Koi NFT\n     */\n    async getNftReward(txId) {\n        const state = await this.getContractState();\n        if (!(txId in state.registeredRecord))\n            return null;\n        const nft = await this.contentView(txId, state);\n        return nft.totalReward;\n    }\n    /**\n     * Query Arweave using GQL\n     * @param request Query string\n     * @returns Object containing the query results\n     */\n    async gql(request) {\n        const { data } = await axios_1.default.post(URL_ARWEAVE_GQL, request, {\n            headers: { \"content-type\": \"application/json\" }\n        });\n        return data;\n    }\n    /**\n     * Gets an array of service nodes\n     * @param url URL of the service node to retrieve the array from a known service node\n     * @returns Array of service nodes\n     */\n    async getNodes(url = this.bundlerUrl) {\n        const res = await getCacheData(url + exports.BUNDLER_NODES);\n        try {\n            return JSON.parse(res.data);\n        }\n        catch (_e) {\n            return [];\n        }\n    }\n    /**\n     * Gets the list of all KIDs(DIDs)\n     * @param count The number of results to return\n     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n     * @returns {Array} - returns a Javascript Array of object with each object representing a single KID\n     */\n    async getAllKID(count, cursorId) {\n        const countStr = count !== undefined ? `, first: ${count}` : \"\";\n        const afterStr = cursorId !== undefined ? `, after: \"${cursorId}\"` : \"\";\n        const query = `\n    query {\n      transactions(tags: {\n        name: \"Action\",\n        values: [\"KID/Create\"]\n    }${countStr}${afterStr}) {\n        ${BLOCK_TEMPLATE}\n      }\n    }`;\n        const request = JSON.stringify({ query });\n        let gqlResp = await this.gql(request);\n        if (gqlResp && gqlResp.data.transactions.edges) {\n            return gqlResp.data.transactions.edges;\n        }\n        return { message: \"No KIDs Found\" };\n    }\n    /**\n       * Get the KID state for the particular walletAddress\n       * @param walletAddress The wallet address for the person whose DID is to be found\n       * @returns {Object} - returns a contract object having id which can be used to get the state\n       */\n    async getKIDByWalletAddress(walletAddress) {\n        const query = `\n      query {\n        transactions(tags: [{\n          name: \"Action\",\n          values: [\"KID/Create\"]\n      },\n        {\n          name: \"Wallet-Address\",\n          values: [\"${walletAddress}\"]\n      }\n      ]) {\n          ${BLOCK_TEMPLATE}\n        }\n      }`;\n        const request = JSON.stringify({ query });\n        let gqlResp = await this.gql(request);\n        if (gqlResp && gqlResp.data.transactions.edges) {\n            return gqlResp.data.transactions.edges;\n        }\n        return { message: \"No KID Found for this address\" };\n    }\n    /**\n     * Creates a KID smartcontract on arweave\n     * @param KIDObject - an object containing name, description, addresses and link\n     * @param image - an object containing contentType and blobData\n     * @returns {txId} - returns a txId in case of success and false in case of failure\n     */\n    async createKID(KIDObject, image) {\n        const initialState = KIDObject;\n        if (initialState && initialState.addresses && initialState.addresses.Arweave) {\n            try {\n                const tx = await exports.arweave.createTransaction({\n                    data: image.blobData,\n                }, this.wallet);\n                tx.addTag('Content-Type', image.contentType);\n                tx.addTag('Network', 'Koii');\n                tx.addTag('Action', 'KID/Create');\n                tx.addTag('App-Name', 'SmartWeaveContract');\n                tx.addTag('App-Version', '0.1.0');\n                tx.addTag('Contract-Src', 't2jB63nGIWYUTDy2b00JPzSDtx1GQRsmKUeHtvZu1_A');\n                tx.addTag('Wallet-Address', initialState.addresses.Arweave);\n                tx.addTag('Init-State', JSON.stringify(initialState));\n                await exports.arweave.transactions.sign(tx, this.wallet);\n                const uploader = await exports.arweave.transactions.getUploader(tx);\n                while (!uploader.isComplete) {\n                    await uploader.uploadChunk();\n                    console.log(uploader.pctComplete + '% complete', uploader.uploadedChunks + '/' + uploader.totalChunks);\n                }\n                console.log(\"TX ID: \", tx.id);\n                return tx.id;\n            }\n            catch (err) {\n                console.log('create transaction error');\n                console.log('err-transaction', err);\n                return false;\n            }\n        }\n        else {\n            console.log('Arweave Address missing in addresses');\n            return false;\n        }\n    }\n    /**\n     * Updates the state of a KID smartcontract on arweave\n     * @param KIDObject - an object containing name, description, addresses and link\n     * @param contractId - the contract Id for KID to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async updateKID(KIDObject, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'updateKID',\n            ...KIDObject\n        });\n        return txId;\n    }\n    /**\n       * Creates a NFT Collection smartcontract on arweave\n       * @param collectionObject - an object containing name, description, addresses and link\n       * @returns {txId} - returns a txId in case of success and false in case of failure\n       */\n    async createCollection(collectionObject) {\n        const initialState = collectionObject;\n        if (!collectionObject.owner) {\n            console.log(\"collectionObject doesn't contain an owner\");\n            return false;\n        }\n        try {\n            const tx = await exports.arweave.createTransaction({\n                data: Buffer.from(collectionObject.owner, 'utf8'),\n            }, this.wallet);\n            tx.addTag('Content-Type', 'text/plain');\n            tx.addTag('Network', 'Koii');\n            tx.addTag('Action', 'Collection/Create');\n            tx.addTag('App-Name', 'SmartWeaveContract');\n            tx.addTag('App-Version', '0.1.0');\n            tx.addTag('Contract-Src', 'NCepV_8bY831CMHK0LZQAQAVwZyNKLalmC36FlagLQE');\n            tx.addTag('Wallet-Address', collectionObject.owner);\n            tx.addTag('Init-State', JSON.stringify(initialState));\n            await exports.arweave.transactions.sign(tx, this.wallet);\n            const uploader = await exports.arweave.transactions.getUploader(tx);\n            while (!uploader.isComplete) {\n                await uploader.uploadChunk();\n                console.log(uploader.pctComplete + '% complete', uploader.uploadedChunks + '/' + uploader.totalChunks);\n            }\n            console.log(\"TX ID: \", tx.id);\n            return tx.id;\n        }\n        catch (err) {\n            console.log('create transaction error');\n            console.log('err-transaction', err);\n            return false;\n        }\n    }\n    /**\n       * Gets the list of all Collections by walletAddress\n       * @param walletAddress The wallet address for the person whose DID is to be found\n       * @param count The number of results to return\n       * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor\n       * @returns {Array} - returns a Javascript Array of object with each object representing a Collection object (The collection object contains id which can be used in func readState to get actual state)\n       */\n    async getCollectionsByWalletAddress(walletAddress, count, cursorId) {\n        const countStr = count !== undefined ? `, first: ${count}` : \"\";\n        const afterStr = cursorId !== undefined ? `, after: \"${cursorId}\"` : \"\";\n        const query = `\n      query {\n        transactions(tags: [{\n          name: \"Action\",\n          values: [\"Collection/Create\"]\n      },\n        {\n          name: \"Wallet-Address\",\n          values: [\"${walletAddress}\"]\n      }\n      ]${countStr}${afterStr}) {\n          ${BLOCK_TEMPLATE}\n        }\n      }`;\n        const request = JSON.stringify({ query });\n        let gqlResp = await this.gql(request);\n        if (gqlResp && gqlResp.data.transactions.edges) {\n            return gqlResp.data.transactions.edges;\n        }\n        return { message: \"No Collections found for this address\" };\n    }\n    /**\n     * Get the state from arweave for any contract\n     * @param txId Transaction ID of the NFT\n     * @returns The NFT state object\n     */\n    async readState(txId) {\n        return smartweave_1.smartweave.readContract(exports.arweave, txId);\n    }\n    /**\n     * Add new NFTs to the existing collection\n     * @param nftId - The transaction id of the NFT to be added to the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async addToCollection(nftId, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'addToCollection',\n            nftId\n        });\n        return txId;\n    }\n    /**\n     * Remove NFTs from the existing collection\n     * @param index - The index of the NFT which is to be removed from the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async removeFromCollection(index, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'removeFromCollection',\n            index\n        });\n        return txId;\n    }\n    /**\n     * Updates the view of the existing Collection\n     * @param newView - The view you want to set for the collection to display (Initialized with 'default')\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async updateView(newView, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'updateView',\n            newView\n        });\n        return txId;\n    }\n    /**\n     * Updates the index of the NFT which should be used as the preview for the collection\n     * @param imageIndex - The index of the NFT which should be used as the preview for the collection\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async updatePreviewImageIndex(imageIndex, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'updatePreviewImageIndex',\n            imageIndex\n        });\n        return txId;\n    }\n    /**\n     * Updates the array of NFTs from which the collection is composed of (Can be used to reorder the NFts in the collection also)\n     * @param collection - The array of NFTs from which the collection is composed of.\n     * @param contractId - the contract Id for Collection to be updated\n     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call\n     */\n    async updateCollection(collection, contractId) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        const txId = await smartweave_1.smartweave.interactWrite(exports.arweave, wallet, contractId, {\n            function: 'updateCollection',\n            collection\n        });\n        return txId;\n    }\n    /**\n     *  Calculates total Views and earned KOII for given NFTIds Array\n     * @param nftIdArr - The array of NFTIds for which total Views and earned KOII will be calculated\n     * @returns {object} - returns an object containing totalViews and totalRewards\n     */\n    async getViewsAndEarnedKOII(nftIdArr) {\n        let state = await this.getContractState();\n        if (state) {\n            const rewardReport = state.stateUpdate ? state.stateUpdate.trafficLogs.rewardReport : [];\n            let totalViewsOverall = 0;\n            let totalRewardOverall = 0;\n            for (let i = 0; i < nftIdArr.length; i++) {\n                let contentTxId = nftIdArr[i];\n                let contentViews = {\n                    totalViews: 0,\n                    totalReward: 0,\n                    twentyFourHrViews: 0\n                };\n                rewardReport.forEach((ele) => {\n                    let logSummary = ele.logsSummary;\n                    for (let txId in logSummary) {\n                        if (txId == contentTxId) {\n                            if (rewardReport.indexOf(ele) == rewardReport.length - 1) {\n                                contentViews.twentyFourHrViews = logSummary[contentTxId];\n                            }\n                            const rewardPerAttention = ele.rewardPerAttention;\n                            contentViews.totalViews += logSummary[contentTxId];\n                            const rewardPerLog = logSummary[contentTxId] * rewardPerAttention;\n                            contentViews.totalReward += rewardPerLog;\n                        }\n                    }\n                });\n                totalViewsOverall += contentViews.totalViews;\n                totalRewardOverall += contentViews.totalReward;\n            }\n            return { totalViews: totalViewsOverall, totalReward: totalRewardOverall };\n        }\n        else {\n            return { message: \"Views and earned KOII cannot be extracted (State not valid)\" };\n        }\n    }\n    // Protected functions\n    /**\n     * Writes to contract\n     * @param input Passes to smartweave write function, in order to execute a contract function\n     * @returns Transaction ID\n     */\n    _interactWrite(input) {\n        const wallet = this.wallet === undefined ? \"use_wallet\" : this.wallet;\n        return smartweave_1.smartweave.interactWrite(exports.arweave, wallet, this.contractId, input);\n    }\n    /**\n     * Read contract latest state\n     * @returns Contract\n     */\n    async _readContract() {\n        // return smartweave.readContract(arweave, this.contractId);\n        const poolID = \"OFD4GqQcqp-Y_Iqh8DN_0s3a_68oMvvnekeOEu_a45I\";\n        const query = new query_1.Query(poolID);\n        // finding latest transactions\n        try {\n            const snapshotArray = await query.limit(1).find();\n            if (snapshotArray && snapshotArray.length > 0)\n                return JSON.parse(snapshotArray[0]).state;\n            else\n                console.error(\"NOTHING RETURNED FROM KYVE\");\n        }\n        catch (e) {\n            console.error(\"ERROR RETRIEVING FROM KYVE\", e);\n        }\n        return smartweave_1.smartweave.readContract(exports.arweave, this.contractId);\n    }\n    // Private functions\n    /**\n     * Generate a 12 word mnemonic for an Arweave key https://github.com/acolytec3/arweave-mnemonic-keys\n     * @returns {string} - a promise resolving to a 12 word mnemonic seed phrase\n     */\n    async _generateMnemonic() {\n        const keys = await human_crypto_keys_1.generateKeyPair({ id: \"rsa\", modulusLength: 4096 }, { privateKeyFormat: \"pkcs1-pem\" });\n        return keys.mnemonic;\n    }\n    /**\n     * Generates a JWK object representation of an Arweave key\n     * @param mnemonic - a 12 word mnemonic represented as a string\n     * @returns {object} - returns a Javascript object that conforms to the JWKInterface required by Arweave-js\n     */\n    async _getKeyFromMnemonic(mnemonic) {\n        const keyPair = await human_crypto_keys_1.getKeyPairFromMnemonic(mnemonic, { id: \"rsa\", modulusLength: 4096 }, { privateKeyFormat: \"pkcs1-pem\" });\n        //@ts-ignore Need to access private attribute\n        const privateKey = pem_jwk_1.pem2jwk(keyPair.privateKey);\n        delete privateKey.alg;\n        delete privateKey.key_ops;\n        return privateKey;\n    }\n}\nexports.Common = Common;\n/**\n * Get cached data from path\n * @param path Path to cached data\n * @returns Data as generic type T\n */\nfunction getCacheData(path) {\n    return axios_1.default.get(path);\n}\nexports.getCacheData = getCacheData;\n/**\n * Get info from Arweave net\n * @returns Axios response with info\n */\nfunction getArweaveNetInfo() {\n    return axios_1.default.get(URL_ARWEAVE_INFO);\n}\nmodule.exports = {\n    BUNDLER_NODES: exports.BUNDLER_NODES,\n    arweave: exports.arweave,\n    Common,\n    getCacheData\n};\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}