{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyEncodedTagSize = exports.verifyEncodedTagsArray = exports.verify = exports.MAX_TAG_COUNT = exports.MAX_TAG_VALUE_LENGTH_BYTES = exports.MAX_TAG_KEY_LENGTH_BYTES = void 0;\n\nconst ar_data_base_1 = require(\"./ar-data-base\");\n\nexports.MAX_TAG_KEY_LENGTH_BYTES = 1024 * 1;\nexports.MAX_TAG_VALUE_LENGTH_BYTES = 1024 * 3;\nexports.MAX_TAG_COUNT = 128;\n/**\r\n * Verifies a DataItem is valid.\r\n *\r\n * @param deps\r\n * @param d\r\n * @param jwk\r\n */\n\nfunction verify(deps, d) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // Try-catch all so malformed data like invalid base64 or something just returns false.\n    try {\n      // Get signature data and signature present in di.\n      const signatureData = yield ar_data_base_1.getSignatureData(deps, d);\n      const signatureBytes = deps.utils.b64UrlToBuffer(d.signature); // Verifiy Id is correct\n\n      const idBytes = yield deps.crypto.hash(signatureBytes);\n      const idOk = deps.utils.bufferTob64Url(idBytes) === d.id;\n\n      if (!idOk) {\n        return false;\n      } // Verify Signature is correct\n\n\n      const signatureOk = yield deps.crypto.verify(d.owner, signatureData, signatureBytes);\n\n      if (!signatureOk) {\n        return false;\n      } // Verify tags array is valid.\n\n\n      if (!verifyEncodedTagsArray(deps, d.tags)) {\n        return false;\n      } // Everything passed.\n\n\n      return true;\n    } catch (e) {\n      console.warn(e);\n      return false;\n    }\n  });\n}\n\nexports.verify = verify;\n/**\r\n *\r\n * Verify an array of tags only contains objects with exactly two keys, `name` and `value`\r\n * that they are both non-empty strings, and are with the bounds of tag sizes.\r\n *\r\n * @param tags\r\n */\n\nfunction verifyEncodedTagsArray(deps, tags) {\n  if (tags.length > exports.MAX_TAG_COUNT) {\n    return false;\n  } // Search for something invalid.\n\n\n  const invalid = tags.find(t => Object.keys(t).length !== 2 || typeof t.name !== \"string\" || typeof t.value !== \"string\" || !verifyEncodedTagSize(deps, t));\n  return !invalid;\n}\n\nexports.verifyEncodedTagsArray = verifyEncodedTagsArray;\n/**\r\n * Verifies the tag name or value does not exceed reasonable bounds in bytes.\r\n *\r\n * @param deps\r\n * @param tag\r\n */\n\nfunction verifyEncodedTagSize(deps, tag) {\n  const nameLen = deps.utils.b64UrlToBuffer(tag.name).length;\n\n  if (nameLen < 1 || nameLen > exports.MAX_TAG_KEY_LENGTH_BYTES) {\n    return false;\n  }\n\n  const valueLen = deps.utils.b64UrlToBuffer(tag.value).length;\n\n  if (valueLen < 1 || nameLen > exports.MAX_TAG_VALUE_LENGTH_BYTES) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.verifyEncodedTagSize = verifyEncodedTagSize;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/arweave-bundles/lib/ar-data-verify.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","verifyEncodedTagSize","verifyEncodedTagsArray","verify","MAX_TAG_COUNT","MAX_TAG_VALUE_LENGTH_BYTES","MAX_TAG_KEY_LENGTH_BYTES","ar_data_base_1","require","deps","d","signatureData","getSignatureData","signatureBytes","utils","b64UrlToBuffer","signature","idBytes","crypto","hash","idOk","bufferTob64Url","id","signatureOk","owner","tags","console","warn","length","invalid","find","t","keys","name","tag","nameLen","valueLen"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEf,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAe,OAAO,CAACC,oBAAR,GAA+BD,OAAO,CAACE,sBAAR,GAAiCF,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACI,aAAR,GAAwBJ,OAAO,CAACK,0BAAR,GAAqCL,OAAO,CAACM,wBAAR,GAAmC,KAAK,CAAtL;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACAR,OAAO,CAACM,wBAAR,GAAmC,OAAO,CAA1C;AACAN,OAAO,CAACK,0BAAR,GAAqC,OAAO,CAA5C;AACAL,OAAO,CAACI,aAAR,GAAwB,GAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,MAAT,CAAgBM,IAAhB,EAAsBC,CAAtB,EAAyB;AACrB,SAAO/B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD;AACA,QAAI;AACA;AACA,YAAMgC,aAAa,GAAG,MAAMJ,cAAc,CAACK,gBAAf,CAAgCH,IAAhC,EAAsCC,CAAtC,CAA5B;AACA,YAAMG,cAAc,GAAGJ,IAAI,CAACK,KAAL,CAAWC,cAAX,CAA0BL,CAAC,CAACM,SAA5B,CAAvB,CAHA,CAIA;;AACA,YAAMC,OAAO,GAAG,MAAMR,IAAI,CAACS,MAAL,CAAYC,IAAZ,CAAiBN,cAAjB,CAAtB;AACA,YAAMO,IAAI,GAAGX,IAAI,CAACK,KAAL,CAAWO,cAAX,CAA0BJ,OAA1B,MAAuCP,CAAC,CAACY,EAAtD;;AACA,UAAI,CAACF,IAAL,EAAW;AACP,eAAO,KAAP;AACH,OATD,CAUA;;;AACA,YAAMG,WAAW,GAAG,MAAMd,IAAI,CAACS,MAAL,CAAYf,MAAZ,CAAmBO,CAAC,CAACc,KAArB,EAA4Bb,aAA5B,EAA2CE,cAA3C,CAA1B;;AACA,UAAI,CAACU,WAAL,EAAkB;AACd,eAAO,KAAP;AACH,OAdD,CAeA;;;AACA,UAAI,CAACrB,sBAAsB,CAACO,IAAD,EAAOC,CAAC,CAACe,IAAT,CAA3B,EAA2C;AACvC,eAAO,KAAP;AACH,OAlBD,CAmBA;;;AACA,aAAO,IAAP;AACH,KArBD,CAsBA,OAAOjC,CAAP,EAAU;AACNkC,MAAAA,OAAO,CAACC,IAAR,CAAanC,CAAb;AACA,aAAO,KAAP;AACH;AACJ,GA5Be,CAAhB;AA6BH;;AACDQ,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,sBAAT,CAAgCO,IAAhC,EAAsCgB,IAAtC,EAA4C;AACxC,MAAIA,IAAI,CAACG,MAAL,GAAc5B,OAAO,CAACI,aAA1B,EAAyC;AACrC,WAAO,KAAP;AACH,GAHuC,CAIxC;;;AACA,QAAMyB,OAAO,GAAGJ,IAAI,CAACK,IAAL,CAAWC,CAAD,IAAOjC,MAAM,CAACkC,IAAP,CAAYD,CAAZ,EAAeH,MAAf,KAA0B,CAA1B,IAC7B,OAAOG,CAAC,CAACE,IAAT,KAAkB,QADW,IAE7B,OAAOF,CAAC,CAAC9C,KAAT,KAAmB,QAFU,IAG7B,CAACgB,oBAAoB,CAACQ,IAAD,EAAOsB,CAAP,CAHT,CAAhB;AAIA,SAAO,CAACF,OAAR;AACH;;AACD7B,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,oBAAT,CAA8BQ,IAA9B,EAAoCyB,GAApC,EAAyC;AACrC,QAAMC,OAAO,GAAG1B,IAAI,CAACK,KAAL,CAAWC,cAAX,CAA0BmB,GAAG,CAACD,IAA9B,EAAoCL,MAApD;;AACA,MAAIO,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAGnC,OAAO,CAACM,wBAArC,EAA+D;AAC3D,WAAO,KAAP;AACH;;AACD,QAAM8B,QAAQ,GAAG3B,IAAI,CAACK,KAAL,CAAWC,cAAX,CAA0BmB,GAAG,CAACjD,KAA9B,EAAqC2C,MAAtD;;AACA,MAAIQ,QAAQ,GAAG,CAAX,IAAgBD,OAAO,GAAGnC,OAAO,CAACK,0BAAtC,EAAkE;AAC9D,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACDL,OAAO,CAACC,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.verifyEncodedTagSize = exports.verifyEncodedTagsArray = exports.verify = exports.MAX_TAG_COUNT = exports.MAX_TAG_VALUE_LENGTH_BYTES = exports.MAX_TAG_KEY_LENGTH_BYTES = void 0;\r\nconst ar_data_base_1 = require(\"./ar-data-base\");\r\nexports.MAX_TAG_KEY_LENGTH_BYTES = 1024 * 1;\r\nexports.MAX_TAG_VALUE_LENGTH_BYTES = 1024 * 3;\r\nexports.MAX_TAG_COUNT = 128;\r\n/**\r\n * Verifies a DataItem is valid.\r\n *\r\n * @param deps\r\n * @param d\r\n * @param jwk\r\n */\r\nfunction verify(deps, d) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Try-catch all so malformed data like invalid base64 or something just returns false.\r\n        try {\r\n            // Get signature data and signature present in di.\r\n            const signatureData = yield ar_data_base_1.getSignatureData(deps, d);\r\n            const signatureBytes = deps.utils.b64UrlToBuffer(d.signature);\r\n            // Verifiy Id is correct\r\n            const idBytes = yield deps.crypto.hash(signatureBytes);\r\n            const idOk = deps.utils.bufferTob64Url(idBytes) === d.id;\r\n            if (!idOk) {\r\n                return false;\r\n            }\r\n            // Verify Signature is correct\r\n            const signatureOk = yield deps.crypto.verify(d.owner, signatureData, signatureBytes);\r\n            if (!signatureOk) {\r\n                return false;\r\n            }\r\n            // Verify tags array is valid.\r\n            if (!verifyEncodedTagsArray(deps, d.tags)) {\r\n                return false;\r\n            }\r\n            // Everything passed.\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            console.warn(e);\r\n            return false;\r\n        }\r\n    });\r\n}\r\nexports.verify = verify;\r\n/**\r\n *\r\n * Verify an array of tags only contains objects with exactly two keys, `name` and `value`\r\n * that they are both non-empty strings, and are with the bounds of tag sizes.\r\n *\r\n * @param tags\r\n */\r\nfunction verifyEncodedTagsArray(deps, tags) {\r\n    if (tags.length > exports.MAX_TAG_COUNT) {\r\n        return false;\r\n    }\r\n    // Search for something invalid.\r\n    const invalid = tags.find((t) => Object.keys(t).length !== 2 ||\r\n        typeof t.name !== \"string\" ||\r\n        typeof t.value !== \"string\" ||\r\n        !verifyEncodedTagSize(deps, t));\r\n    return !invalid;\r\n}\r\nexports.verifyEncodedTagsArray = verifyEncodedTagsArray;\r\n/**\r\n * Verifies the tag name or value does not exceed reasonable bounds in bytes.\r\n *\r\n * @param deps\r\n * @param tag\r\n */\r\nfunction verifyEncodedTagSize(deps, tag) {\r\n    const nameLen = deps.utils.b64UrlToBuffer(tag.name).length;\r\n    if (nameLen < 1 || nameLen > exports.MAX_TAG_KEY_LENGTH_BYTES) {\r\n        return false;\r\n    }\r\n    const valueLen = deps.utils.b64UrlToBuffer(tag.value).length;\r\n    if (valueLen < 1 || nameLen > exports.MAX_TAG_VALUE_LENGTH_BYTES) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.verifyEncodedTagSize = verifyEncodedTagSize;\r\n"]},"metadata":{},"sourceType":"script"}