{"ast":null,"code":"import { decomposePublicKey as decomposeDerPublicKey, composePublicKey as composeDerPublicKey } from './spki-der';\nimport { binaryStringToUint8Array, uint8ArrayToBinaryString } from '../../util/binary';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { DecodePemFailedError } from '../../util/errors';\nexport var decomposePublicKey = function decomposePublicKey(pem, options) {\n  var decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'PUBLIC KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  var spkiKey = binaryStringToUint8Array(decodedPem.body);\n  var decomposedKey = decomposeDerPublicKey(spkiKey, options);\n  decomposedKey.format = 'spki-pem';\n  return decomposedKey;\n};\nexport var composePublicKey = function composePublicKey(decomposedKey) {\n  var spkiKey = composeDerPublicKey(decomposedKey);\n  return encodePem({\n    type: 'PUBLIC KEY',\n    body: uint8ArrayToBinaryString(spkiKey)\n  });\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/crypto-key-composer/es/formats/spki/spki-pem.js"],"names":["decomposePublicKey","decomposeDerPublicKey","composePublicKey","composeDerPublicKey","binaryStringToUint8Array","uint8ArrayToBinaryString","decodePem","encodePem","DecodePemFailedError","pem","options","decodedPem","err","invalidInputKey","spkiKey","body","decomposedKey","format","type"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,qBAA/B,EAAsDC,gBAAgB,IAAIC,mBAA1E,QAAqG,YAArG;AACA,SAASC,wBAAT,EAAmCC,wBAAnC,QAAmE,mBAAnE;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,wBAArC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAO,IAAMR,kBAAkB,GAAG,SAArBA,kBAAqB,CAACS,GAAD,EAAMC,OAAN,EAAkB;AAClD,MAAIC,UAAJ;;AAEA,MAAI;AACFA,IAAAA,UAAU,GAAGL,SAAS,CAACG,GAAD,EAAM,YAAN,CAAtB;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,eAAJ,GAAsBD,GAAG,YAAYJ,oBAArC;AACA,UAAMI,GAAN;AACD;;AAED,MAAME,OAAO,GAAGV,wBAAwB,CAACO,UAAU,CAACI,IAAZ,CAAxC;AACA,MAAMC,aAAa,GAAGf,qBAAqB,CAACa,OAAD,EAAUJ,OAAV,CAA3C;AACAM,EAAAA,aAAa,CAACC,MAAd,GAAuB,UAAvB;AACA,SAAOD,aAAP;AACD,CAdM;AAeP,OAAO,IAAMd,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAc,aAAa,EAAI;AAC/C,MAAMF,OAAO,GAAGX,mBAAmB,CAACa,aAAD,CAAnC;AACA,SAAOT,SAAS,CAAC;AACfW,IAAAA,IAAI,EAAE,YADS;AAEfH,IAAAA,IAAI,EAAEV,wBAAwB,CAACS,OAAD;AAFf,GAAD,CAAhB;AAID,CANM","sourcesContent":["import { decomposePublicKey as decomposeDerPublicKey, composePublicKey as composeDerPublicKey } from './spki-der';\nimport { binaryStringToUint8Array, uint8ArrayToBinaryString } from '../../util/binary';\nimport { decodePem, encodePem } from '../../util/pem-encoder';\nimport { DecodePemFailedError } from '../../util/errors';\nexport const decomposePublicKey = (pem, options) => {\n  let decodedPem;\n\n  try {\n    decodedPem = decodePem(pem, 'PUBLIC KEY');\n  } catch (err) {\n    err.invalidInputKey = err instanceof DecodePemFailedError;\n    throw err;\n  }\n\n  const spkiKey = binaryStringToUint8Array(decodedPem.body);\n  const decomposedKey = decomposeDerPublicKey(spkiKey, options);\n  decomposedKey.format = 'spki-pem';\n  return decomposedKey;\n};\nexport const composePublicKey = decomposedKey => {\n  const spkiKey = composeDerPublicKey(decomposedKey);\n  return encodePem({\n    type: 'PUBLIC KEY',\n    body: uint8ArrayToBinaryString(spkiKey)\n  });\n};"]},"metadata":{},"sourceType":"module"}