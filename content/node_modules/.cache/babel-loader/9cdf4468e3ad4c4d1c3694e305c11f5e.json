{"ast":null,"code":"var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"[1-9]\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\n\nfunction shorten(arr, sLen) {\n  var newArr = [];\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n\n  return newArr;\n}\n\nvar monthUpdate = function (arrName) {\n  return function (v, i18n) {\n    var lowerCaseArr = i18n[arrName].map(function (v) {\n      return v.toLowerCase();\n    });\n    var index = lowerCaseArr.indexOf(v.toLowerCase());\n\n    if (index > -1) {\n      return index;\n    }\n\n    return null;\n  };\n};\n\nfunction assign(origObj) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var obj = args_1[_a];\n\n    for (var key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n\n  return origObj;\n}\n\nvar dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n  dayNamesShort: dayNamesShort,\n  dayNames: dayNames,\n  monthNamesShort: monthNamesShort,\n  monthNames: monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn: function (dayOfMonth) {\n    return dayOfMonth + [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];\n  }\n};\nvar globalI18n = assign({}, defaultI18n);\n\nvar setGlobalDateI18n = function (i18n) {\n  return globalI18n = assign(globalI18n, i18n);\n};\n\nvar regexEscape = function (str) {\n  return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\n\nvar pad = function (val, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n\n  val = String(val);\n\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n\n  return val;\n};\n\nvar formatFlags = {\n  D: function (dateObj) {\n    return String(dateObj.getDate());\n  },\n  DD: function (dateObj) {\n    return pad(dateObj.getDate());\n  },\n  Do: function (dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n  d: function (dateObj) {\n    return String(dateObj.getDay());\n  },\n  dd: function (dateObj) {\n    return pad(dateObj.getDay());\n  },\n  ddd: function (dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n  dddd: function (dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n  M: function (dateObj) {\n    return String(dateObj.getMonth() + 1);\n  },\n  MM: function (dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n  MMM: function (dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n  MMMM: function (dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n  YY: function (dateObj) {\n    return pad(String(dateObj.getFullYear()), 4).substr(2);\n  },\n  YYYY: function (dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n  h: function (dateObj) {\n    return String(dateObj.getHours() % 12 || 12);\n  },\n  hh: function (dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n  H: function (dateObj) {\n    return String(dateObj.getHours());\n  },\n  HH: function (dateObj) {\n    return pad(dateObj.getHours());\n  },\n  m: function (dateObj) {\n    return String(dateObj.getMinutes());\n  },\n  mm: function (dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n  s: function (dateObj) {\n    return String(dateObj.getSeconds());\n  },\n  ss: function (dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n  S: function (dateObj) {\n    return String(Math.round(dateObj.getMilliseconds() / 100));\n  },\n  SS: function (dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n  SSS: function (dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n  a: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n  A: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n  },\n  ZZ: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);\n  },\n  Z: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60), 2) + \":\" + pad(Math.abs(offset) % 60, 2);\n  }\n};\n\nvar monthParse = function (v) {\n  return +v - 1;\n};\n\nvar emptyDigits = [null, twoDigitsOptional];\nvar emptyWord = [null, word];\nvar amPm = [\"isPm\", word, function (v, i18n) {\n  var val = v.toLowerCase();\n\n  if (val === i18n.amPm[0]) {\n    return 0;\n  } else if (val === i18n.amPm[1]) {\n    return 1;\n  }\n\n  return null;\n}];\nvar timezoneOffset = [\"timezoneOffset\", \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\", function (v) {\n  var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n  if (parts) {\n    var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n    return parts[0] === \"+\" ? minutes : -minutes;\n  }\n\n  return 0;\n}];\nvar parseFlags = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, function (v) {\n    return parseInt(v, 10);\n  }],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\"year\", twoDigits, function (v) {\n    var now = new Date();\n    var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n    return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n  }],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", function (v) {\n    return +v * 100;\n  }],\n  SS: [\"millisecond\", twoDigits, function (v) {\n    return +v * 10;\n  }],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n}; // Some common format strings\n\nvar globalMasks = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\n\nvar setGlobalDateMasks = function (masks) {\n  return assign(globalMasks, masks);\n};\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\n\n\nvar format = function (dateObj, mask, i18n) {\n  if (mask === void 0) {\n    mask = globalMasks[\"default\"];\n  }\n\n  if (i18n === void 0) {\n    i18n = {};\n  }\n\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" || isNaN(dateObj.getTime())) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n  var literals = []; // Make literals inactive by replacing them with @@@\n\n  mask = mask.replace(literal, function ($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n); // Apply formatting rules\n\n  mask = mask.replace(token, function ($0) {\n    return formatFlags[$0](dateObj, combinedI18nSettings);\n  }); // Inline literal values back into the formatted value\n\n  return mask.replace(/@@@/g, function () {\n    return literals.shift();\n  });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\n\n\nfunction parse(dateStr, format, i18n) {\n  if (i18n === void 0) {\n    i18n = {};\n  }\n\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  } // Check to see if the format is actually a mask\n\n\n  format = globalMasks[format] || format; // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\n  if (dateStr.length > 1000) {\n    return null;\n  } // Default to the beginning of the year.\n\n\n  var today = new Date();\n  var dateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  var parseInfo = [];\n  var literals = []; // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n\n  var newFormat = format.replace(literal, function ($0, $1) {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  var specifiedFields = {};\n  var requiredFields = {}; // Change every token that we find into the correct regex\n\n  newFormat = regexEscape(newFormat).replace(token, function ($0) {\n    var info = parseFlags[$0];\n    var field = info[0],\n        regex = info[1],\n        requiredField = info[3]; // Check if the person has specified the same field twice. This will lead to confusing results.\n\n    if (specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n    }\n\n    specifiedFields[field] = true; // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  }); // Check all the required fields are present\n\n  Object.keys(requiredFields).forEach(function (field) {\n    if (!specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n    }\n  }); // Add back all the literals after\n\n  newFormat = newFormat.replace(/@@@/g, function () {\n    return literals.shift();\n  }); // Check if the date string matches the format. If it doesn't return null\n\n  var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n\n  if (!matches) {\n    return null;\n  }\n\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n); // For each match, call the parser function for that date part\n\n  for (var i = 1; i < matches.length; i++) {\n    var _a = parseInfo[i - 1],\n        field = _a[0],\n        parser = _a[2];\n    var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i]; // If the parser can't make sense of the value, return null\n\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  var dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n  var validateFields = [[\"month\", \"getMonth\"], [\"day\", \"getDate\"], [\"hour\", \"getHours\"], [\"minute\", \"getMinutes\"], [\"second\", \"getSeconds\"]];\n\n  for (var i = 0, len = validateFields.length; i < len; i++) {\n    // Check to make sure the date field is within the allowed range. Javascript dates allows values\n    // outside the allowed range. If the values don't match the value was invalid\n    if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n      return null;\n    }\n  }\n\n  if (dateInfo.timezoneOffset == null) {\n    return dateWithoutTZ;\n  }\n\n  return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\n\nvar fecha = {\n  format: format,\n  parse: parse,\n  defaultI18n: defaultI18n,\n  setGlobalDateI18n: setGlobalDateI18n,\n  setGlobalDateMasks: setGlobalDateMasks\n};\nexport default fecha;\nexport { assign, format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };","map":{"version":3,"sources":["../src/fecha.ts"],"names":[],"mappings":"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","sourcesContent":["const token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"[1-9]\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\n\ntype DateInfo = {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n  millisecond: number;\n  isPm: number | null;\n  timezoneOffset: number | null;\n};\n\nexport type I18nSettings = {\n  amPm: [string, string];\n  dayNames: Days;\n  dayNamesShort: Days;\n  monthNames: Months;\n  monthNamesShort: Months;\n  DoFn(dayOfMonth: number): string;\n};\n\nexport type I18nSettingsOptional = Partial<I18nSettings>;\n\nexport type Days = [string, string, string, string, string, string, string];\nexport type Months = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nfunction shorten<T extends string[]>(arr: T, sLen: number): string[] {\n  const newArr: string[] = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nconst monthUpdate = (\n  arrName: \"monthNames\" | \"monthNamesShort\" | \"dayNames\" | \"dayNamesShort\"\n) => (v: string, i18n: I18nSettings): number | null => {\n  const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n  const index = lowerCaseArr.indexOf(v.toLowerCase());\n  if (index > -1) {\n    return index;\n  }\n  return null;\n};\n\nexport function assign<A>(a: A): A;\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign(origObj: any, ...args: any[]): any {\n  for (const obj of args) {\n    for (const key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\n\nconst dayNames: Days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst monthNames: Months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst monthNamesShort: Months = shorten(monthNames, 3) as Months;\nconst dayNamesShort: Days = shorten(dayNames, 3) as Days;\n\nconst defaultI18n: I18nSettings = {\n  dayNamesShort,\n  dayNames,\n  monthNamesShort,\n  monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn(dayOfMonth: number) {\n    return (\n      dayOfMonth +\n      [\"th\", \"st\", \"nd\", \"rd\"][\n        dayOfMonth % 10 > 3\n          ? 0\n          : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10\n      ]\n    );\n  }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n: I18nSettingsOptional): I18nSettings =>\n  (globalI18n = assign(globalI18n, i18n));\n\nconst regexEscape = (str: string): string =>\n  str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n\nconst pad = (val: string | number, len = 2): string => {\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\n\nconst formatFlags: Record<\n  string,\n  (dateObj: Date, i18n: I18nSettings) => string\n> = {\n  D: (dateObj: Date): string => String(dateObj.getDate()),\n  DD: (dateObj: Date): string => pad(dateObj.getDate()),\n  Do: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.DoFn(dateObj.getDate()),\n  d: (dateObj: Date): string => String(dateObj.getDay()),\n  dd: (dateObj: Date): string => pad(dateObj.getDay()),\n  ddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNamesShort[dateObj.getDay()],\n  dddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNames[dateObj.getDay()],\n  M: (dateObj: Date): string => String(dateObj.getMonth() + 1),\n  MM: (dateObj: Date): string => pad(dateObj.getMonth() + 1),\n  MMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNamesShort[dateObj.getMonth()],\n  MMMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNames[dateObj.getMonth()],\n  YY: (dateObj: Date): string =>\n    pad(String(dateObj.getFullYear()), 4).substr(2),\n  YYYY: (dateObj: Date): string => pad(dateObj.getFullYear(), 4),\n  h: (dateObj: Date): string => String(dateObj.getHours() % 12 || 12),\n  hh: (dateObj: Date): string => pad(dateObj.getHours() % 12 || 12),\n  H: (dateObj: Date): string => String(dateObj.getHours()),\n  HH: (dateObj: Date): string => pad(dateObj.getHours()),\n  m: (dateObj: Date): string => String(dateObj.getMinutes()),\n  mm: (dateObj: Date): string => pad(dateObj.getMinutes()),\n  s: (dateObj: Date): string => String(dateObj.getSeconds()),\n  ss: (dateObj: Date): string => pad(dateObj.getSeconds()),\n  S: (dateObj: Date): string =>\n    String(Math.round(dateObj.getMilliseconds() / 100)),\n  SS: (dateObj: Date): string =>\n    pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n  SSS: (dateObj: Date): string => pad(dateObj.getMilliseconds(), 3),\n  a: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n  A: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase(),\n  ZZ(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4)\n    );\n  },\n  Z(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60), 2) +\n      \":\" +\n      pad(Math.abs(offset) % 60, 2)\n    );\n  }\n};\n\ntype ParseInfo = [\n  keyof DateInfo,\n  string,\n  ((v: string, i18n: I18nSettings) => number | null)?,\n  string?\n];\nconst monthParse = (v: string): number => +v - 1;\nconst emptyDigits: ParseInfo = [null, twoDigitsOptional];\nconst emptyWord: ParseInfo = [null, word];\nconst amPm: ParseInfo = [\n  \"isPm\",\n  word,\n  (v: string, i18n: I18nSettings): number | null => {\n    const val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      return 0;\n    } else if (val === i18n.amPm[1]) {\n      return 1;\n    }\n    return null;\n  }\n];\nconst timezoneOffset: ParseInfo = [\n  \"timezoneOffset\",\n  \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n  (v: string): number | null => {\n    const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n      return parts[0] === \"+\" ? minutes : -minutes;\n    }\n\n    return 0;\n  }\n];\nconst parseFlags: Record<string, ParseInfo> = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, (v: string): number => parseInt(v, 10)],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\n    \"year\",\n    twoDigits,\n    (v: string): number => {\n      const now = new Date();\n      const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n      return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n    }\n  ],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", (v: string): number => +v * 100],\n  SS: [\"millisecond\", twoDigits, (v: string): number => +v * 10],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n\n// Some common format strings\nconst globalMasks: { [key: string]: string } = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks: {\n  [key: string]: string;\n}): { [key: string]: string } => assign(globalMasks, masks);\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (\n  dateObj: Date,\n  mask: string = globalMasks[\"default\"],\n  i18n: I18nSettingsOptional = {}\n): string => {\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (\n    Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n    isNaN(dateObj.getTime())\n  ) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n\n  const literals: string[] = [];\n\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    formatFlags[$0](dateObj, combinedI18nSettings)\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, () => literals.shift());\n};\n\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(\n  dateStr: string,\n  format: string,\n  i18n: I18nSettingsOptional = {}\n): Date | null {\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  // Default to the beginning of the year.\n  const today = new Date();\n  const dateInfo: DateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  const parseInfo: ParseInfo[] = [];\n  const literals: string[] = [];\n\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  let newFormat = format.replace(literal, ($0, $1) => {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  const specifiedFields: { [field: string]: boolean } = {};\n  const requiredFields: { [field: string]: boolean } = {};\n\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, $0 => {\n    const info = parseFlags[$0];\n    const [field, regex, , requiredField] = info;\n\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(`Invalid format. ${field} specified twice in format`);\n    }\n\n    specifiedFields[field] = true;\n\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(field => {\n    if (!specifiedFields[field]) {\n      throw new Error(\n        `Invalid format. ${field} is required in specified format`\n      );\n    }\n  });\n\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n\n  // Check if the date string matches the format. If it doesn't return null\n  const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n\n  // For each match, call the parser function for that date part\n  for (let i = 1; i < matches.length; i++) {\n    const [field, , parser] = parseInfo[i - 1];\n    const value = parser\n      ? parser(matches[i], combinedI18nSettings)\n      : +matches[i];\n\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  const dateWithoutTZ: Date = new Date(\n    dateInfo.year,\n    dateInfo.month,\n    dateInfo.day,\n    dateInfo.hour,\n    dateInfo.minute,\n    dateInfo.second,\n    dateInfo.millisecond\n  );\n\n  const validateFields: [\n    \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\",\n    \"getMonth\" | \"getDate\" | \"getHours\" | \"getMinutes\" | \"getSeconds\"\n  ][] = [\n    [\"month\", \"getMonth\"],\n    [\"day\", \"getDate\"],\n    [\"hour\", \"getHours\"],\n    [\"minute\", \"getMinutes\"],\n    [\"second\", \"getSeconds\"]\n  ];\n  for (let i = 0, len = validateFields.length; i < len; i++) {\n    // Check to make sure the date field is within the allowed range. Javascript dates allows values\n    // outside the allowed range. If the values don't match the value was invalid\n    if (\n      specifiedFields[validateFields[i][0]] &&\n      dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()\n    ) {\n      return null;\n    }\n  }\n\n  if (dateInfo.timezoneOffset == null) {\n    return dateWithoutTZ;\n  }\n\n  return new Date(\n    Date.UTC(\n      dateInfo.year,\n      dateInfo.month,\n      dateInfo.day,\n      dateInfo.hour,\n      dateInfo.minute - dateInfo.timezoneOffset,\n      dateInfo.second,\n      dateInfo.millisecond\n    )\n  );\n}\nexport default {\n  format,\n  parse,\n  defaultI18n,\n  setGlobalDateI18n,\n  setGlobalDateMasks\n};\nexport { format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };\n"]},"metadata":{},"sourceType":"module"}