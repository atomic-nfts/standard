{"ast":null,"code":"'use strict';\n\nvar constants = require('./constants');\n\nmodule.exports = function (data, width, height, options) {\n  var outHasAlpha = options.colorType === constants.COLORTYPE_COLOR_ALPHA;\n\n  if (options.inputHasAlpha && outHasAlpha) {\n    return data;\n  }\n\n  if (!options.inputHasAlpha && !outHasAlpha) {\n    return data;\n  }\n\n  var outBpp = outHasAlpha ? 4 : 3;\n  var outData = new Buffer(width * height * outBpp);\n  var inBpp = options.inputHasAlpha ? 4 : 3;\n  var inIndex = 0;\n  var outIndex = 0;\n  var bgColor = options.bgColor || {};\n\n  if (bgColor.red === undefined) {\n    bgColor.red = 255;\n  }\n\n  if (bgColor.green === undefined) {\n    bgColor.green = 255;\n  }\n\n  if (bgColor.blue === undefined) {\n    bgColor.blue = 255;\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var red = data[inIndex];\n      var green = data[inIndex + 1];\n      var blue = data[inIndex + 2];\n      var alpha;\n\n      if (options.inputHasAlpha) {\n        alpha = data[inIndex + 3];\n\n        if (!outHasAlpha) {\n          alpha /= 255;\n          red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), 255);\n          green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), 255);\n          blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), 255);\n        }\n      } else {\n        alpha = 255;\n      }\n\n      outData[outIndex] = red;\n      outData[outIndex + 1] = green;\n      outData[outIndex + 2] = blue;\n\n      if (outHasAlpha) {\n        outData[outIndex + 3] = alpha;\n      }\n\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n\n  return outData;\n};","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/pngjs-nozlib/lib/bitpacker.js"],"names":["constants","require","module","exports","data","width","height","options","outHasAlpha","colorType","COLORTYPE_COLOR_ALPHA","inputHasAlpha","outBpp","outData","Buffer","inBpp","inIndex","outIndex","bgColor","red","undefined","green","blue","y","x","alpha","Math","min","max","round"],"mappings":"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","sourcesContent":["'use strict';\n\nvar constants = require('./constants');\n\nmodule.exports = function(data, width, height, options) {\n  var outHasAlpha = options.colorType === constants.COLORTYPE_COLOR_ALPHA;\n  if (options.inputHasAlpha && outHasAlpha) {\n    return data;\n  }\n  if (!options.inputHasAlpha && !outHasAlpha) {\n    return data;\n  }\n\n  var outBpp = outHasAlpha ? 4 : 3;\n  var outData = new Buffer(width * height * outBpp);\n  var inBpp = options.inputHasAlpha ? 4 : 3;\n  var inIndex = 0;\n  var outIndex = 0;\n\n  var bgColor = options.bgColor || {};\n  if (bgColor.red === undefined) {\n    bgColor.red = 255;\n  }\n  if (bgColor.green === undefined) {\n    bgColor.green = 255;\n  }\n  if (bgColor.blue === undefined) {\n    bgColor.blue = 255;\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var red = data[inIndex];\n      var green = data[inIndex + 1];\n      var blue = data[inIndex + 2];\n\n      var alpha;\n      if (options.inputHasAlpha) {\n        alpha = data[inIndex + 3];\n        if (!outHasAlpha) {\n          alpha /= 255;\n          red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), 255);\n          green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), 255);\n          blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), 255);\n        }\n      }\n      else {\n        alpha = 255;\n      }\n\n      outData[outIndex] = red;\n      outData[outIndex + 1] = green;\n      outData[outIndex + 2] = blue;\n      if (outHasAlpha) {\n        outData[outIndex + 3] = alpha;\n      }\n\n      inIndex += inBpp;\n      outIndex += outBpp;\n    }\n  }\n\n  return outData;\n};\n"]},"metadata":{},"sourceType":"script"}