{"ast":null,"code":"import { getKeyTypeFromAlgorithm } from 'crypto-key-composer';\nimport * as rsa from './keys/rsa';\nimport * as ed25519 from './keys/ed25519';\nimport { UnknownAlgorithmError, UnknownAlgorithmParamError, NilAlgorithmParamError, TypeMismatchAlgorithmParamError } from './utils/errors';\nconst supportedAlgorithms = {\n  rsa,\n  ed25519\n};\n\nconst buildParams = (defaultParams, customParams) => Object.keys(customParams).reduce((params, key) => {\n  // Do not allow unknown keys (params)\n  if (defaultParams[key] == null) {\n    throw new UnknownAlgorithmParamError(key);\n  } // Do not allow nullish values\n\n\n  if (customParams[key] == null) {\n    throw new NilAlgorithmParamError(key);\n  } // Do not allow different types\n\n\n  if (typeof customParams[key] !== typeof defaultParams[key]) {\n    throw new TypeMismatchAlgorithmParamError(key, typeof defaultParams[key]);\n  }\n\n  params[key] = customParams[key];\n  return params;\n}, { ...defaultParams\n});\n\nconst parseAlgorithm = keyAlgorithm => {\n  const algorithm = typeof keyAlgorithm === 'string' ? {\n    id: keyAlgorithm\n  } : keyAlgorithm;\n  const type = supportedAlgorithms[algorithm.id] ? algorithm.id : getKeyTypeFromAlgorithm(algorithm.id);\n\n  if (!type) {\n    throw new UnknownAlgorithmError(algorithm.id);\n  }\n\n  const {\n    generateKeyPair,\n    defaultParams\n  } = supportedAlgorithms[type];\n  const {\n    id,\n    ...customParams\n  } = algorithm;\n  const params = buildParams(defaultParams, customParams);\n  return {\n    id,\n    type,\n    params,\n    generate: generateKeyPair\n  };\n};\n\nexport default parseAlgorithm;","map":{"version":3,"sources":["/home/al/Desktop/koi/narcissus/content/node_modules/human-crypto-keys/es/algorithm.js"],"names":["getKeyTypeFromAlgorithm","rsa","ed25519","UnknownAlgorithmError","UnknownAlgorithmParamError","NilAlgorithmParamError","TypeMismatchAlgorithmParamError","supportedAlgorithms","buildParams","defaultParams","customParams","Object","keys","reduce","params","key","parseAlgorithm","keyAlgorithm","algorithm","id","type","generateKeyPair","generate"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,qBAAxC;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,SAASC,qBAAT,EAAgCC,0BAAhC,EAA4DC,sBAA5D,EAAoFC,+BAApF,QAA2H,gBAA3H;AACA,MAAMC,mBAAmB,GAAG;AAC1BN,EAAAA,GAD0B;AAE1BC,EAAAA;AAF0B,CAA5B;;AAKA,MAAMM,WAAW,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiCC,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0BG,MAA1B,CAAiC,CAACC,MAAD,EAASC,GAAT,KAAiB;AACrG;AACA,MAAIN,aAAa,CAACM,GAAD,CAAb,IAAsB,IAA1B,EAAgC;AAC9B,UAAM,IAAIX,0BAAJ,CAA+BW,GAA/B,CAAN;AACD,GAJoG,CAInG;;;AAGF,MAAIL,YAAY,CAACK,GAAD,CAAZ,IAAqB,IAAzB,EAA+B;AAC7B,UAAM,IAAIV,sBAAJ,CAA2BU,GAA3B,CAAN;AACD,GAToG,CASnG;;;AAGF,MAAI,OAAOL,YAAY,CAACK,GAAD,CAAnB,KAA6B,OAAON,aAAa,CAACM,GAAD,CAArD,EAA4D;AAC1D,UAAM,IAAIT,+BAAJ,CAAoCS,GAApC,EAAyC,OAAON,aAAa,CAACM,GAAD,CAA7D,CAAN;AACD;;AAEDD,EAAAA,MAAM,CAACC,GAAD,CAAN,GAAcL,YAAY,CAACK,GAAD,CAA1B;AACA,SAAOD,MAAP;AACD,CAlBoD,EAkBlD,EAAE,GAAGL;AAAL,CAlBkD,CAArD;;AAqBA,MAAMO,cAAc,GAAGC,YAAY,IAAI;AACrC,QAAMC,SAAS,GAAG,OAAOD,YAAP,KAAwB,QAAxB,GAAmC;AACnDE,IAAAA,EAAE,EAAEF;AAD+C,GAAnC,GAEdA,YAFJ;AAGA,QAAMG,IAAI,GAAGb,mBAAmB,CAACW,SAAS,CAACC,EAAX,CAAnB,GAAoCD,SAAS,CAACC,EAA9C,GAAmDnB,uBAAuB,CAACkB,SAAS,CAACC,EAAX,CAAvF;;AAEA,MAAI,CAACC,IAAL,EAAW;AACT,UAAM,IAAIjB,qBAAJ,CAA0Be,SAAS,CAACC,EAApC,CAAN;AACD;;AAED,QAAM;AACJE,IAAAA,eADI;AAEJZ,IAAAA;AAFI,MAGFF,mBAAmB,CAACa,IAAD,CAHvB;AAIA,QAAM;AACJD,IAAAA,EADI;AAEJ,OAAGT;AAFC,MAGFQ,SAHJ;AAIA,QAAMJ,MAAM,GAAGN,WAAW,CAACC,aAAD,EAAgBC,YAAhB,CAA1B;AACA,SAAO;AACLS,IAAAA,EADK;AAELC,IAAAA,IAFK;AAGLN,IAAAA,MAHK;AAILQ,IAAAA,QAAQ,EAAED;AAJL,GAAP;AAMD,CAzBD;;AA2BA,eAAeL,cAAf","sourcesContent":["import { getKeyTypeFromAlgorithm } from 'crypto-key-composer';\nimport * as rsa from './keys/rsa';\nimport * as ed25519 from './keys/ed25519';\nimport { UnknownAlgorithmError, UnknownAlgorithmParamError, NilAlgorithmParamError, TypeMismatchAlgorithmParamError } from './utils/errors';\nconst supportedAlgorithms = {\n  rsa,\n  ed25519\n};\n\nconst buildParams = (defaultParams, customParams) => Object.keys(customParams).reduce((params, key) => {\n  // Do not allow unknown keys (params)\n  if (defaultParams[key] == null) {\n    throw new UnknownAlgorithmParamError(key);\n  } // Do not allow nullish values\n\n\n  if (customParams[key] == null) {\n    throw new NilAlgorithmParamError(key);\n  } // Do not allow different types\n\n\n  if (typeof customParams[key] !== typeof defaultParams[key]) {\n    throw new TypeMismatchAlgorithmParamError(key, typeof defaultParams[key]);\n  }\n\n  params[key] = customParams[key];\n  return params;\n}, { ...defaultParams\n});\n\nconst parseAlgorithm = keyAlgorithm => {\n  const algorithm = typeof keyAlgorithm === 'string' ? {\n    id: keyAlgorithm\n  } : keyAlgorithm;\n  const type = supportedAlgorithms[algorithm.id] ? algorithm.id : getKeyTypeFromAlgorithm(algorithm.id);\n\n  if (!type) {\n    throw new UnknownAlgorithmError(algorithm.id);\n  }\n\n  const {\n    generateKeyPair,\n    defaultParams\n  } = supportedAlgorithms[type];\n  const {\n    id,\n    ...customParams\n  } = algorithm;\n  const params = buildParams(defaultParams, customParams);\n  return {\n    id,\n    type,\n    params,\n    generate: generateKeyPair\n  };\n};\n\nexport default parseAlgorithm;"]},"metadata":{},"sourceType":"module"}