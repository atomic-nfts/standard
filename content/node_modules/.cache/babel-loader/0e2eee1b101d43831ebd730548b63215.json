{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/al/Desktop/koi/narcissus/content/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = require(\"bignumber.js\");\n\nvar Ar = /*#__PURE__*/function () {\n  function Ar() {\n    _classCallCheck(this, Ar);\n\n    // Configure and assign the constructor function for the bignumber library.\n    this.BigNum = function (value, decimals) {\n      var instance = bignumber_js_1.BigNumber.clone({\n        DECIMAL_PLACES: decimals\n      });\n      return new instance(value);\n    };\n  }\n\n  _createClass(Ar, [{\n    key: \"winstonToAr\",\n    value: function winstonToAr(winstonString) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$formatted = _ref.formatted,\n          formatted = _ref$formatted === void 0 ? false : _ref$formatted,\n          _ref$decimals = _ref.decimals,\n          decimals = _ref$decimals === void 0 ? 12 : _ref$decimals,\n          _ref$trim = _ref.trim,\n          trim = _ref$trim === void 0 ? true : _ref$trim;\n\n      var number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n      return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n  }, {\n    key: \"arToWinston\",\n    value: function arToWinston(arString) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$formatted = _ref2.formatted,\n          formatted = _ref2$formatted === void 0 ? false : _ref2$formatted;\n\n      var number = this.stringToBigNum(arString).shiftedBy(12);\n      return formatted ? number.toFormat() : number.toFixed(0);\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(winstonStringA, winstonStringB) {\n      var a = this.stringToBigNum(winstonStringA);\n      var b = this.stringToBigNum(winstonStringB);\n      return a.comparedTo(b);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(winstonStringA, winstonStringB) {\n      return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n  }, {\n    key: \"isLessThan\",\n    value: function isLessThan(winstonStringA, winstonStringB) {\n      var a = this.stringToBigNum(winstonStringA);\n      var b = this.stringToBigNum(winstonStringB);\n      return a.isLessThan(b);\n    }\n  }, {\n    key: \"isGreaterThan\",\n    value: function isGreaterThan(winstonStringA, winstonStringB) {\n      var a = this.stringToBigNum(winstonStringA);\n      var b = this.stringToBigNum(winstonStringB);\n      return a.isGreaterThan(b);\n    }\n  }, {\n    key: \"add\",\n    value: function add(winstonStringA, winstonStringB) {\n      var a = this.stringToBigNum(winstonStringA);\n      var b = this.stringToBigNum(winstonStringB);\n      return a.plus(winstonStringB).toFixed(0);\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(winstonStringA, winstonStringB) {\n      var a = this.stringToBigNum(winstonStringA);\n      var b = this.stringToBigNum(winstonStringB);\n      return a.minus(winstonStringB).toFixed(0);\n    }\n  }, {\n    key: \"stringToBigNum\",\n    value: function stringToBigNum(stringValue) {\n      var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      return this.BigNum(stringValue, decimalPlaces);\n    }\n  }]);\n\n  return Ar;\n}();\n\nexports.default = Ar;","map":{"version":3,"sources":["../../../src/common/ar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = require(\"bignumber.js\");\nclass Ar {\n    constructor() {\n        // Configure and assign the constructor function for the bignumber library.\n        this.BigNum = (value, decimals) => {\n            let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });\n            return new instance(value);\n        };\n    }\n    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {\n        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n    arToWinston(arString, { formatted = false } = {}) {\n        let number = this.stringToBigNum(arString).shiftedBy(12);\n        return formatted ? number.toFormat() : number.toFixed(0);\n    }\n    compare(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.comparedTo(b);\n    }\n    isEqual(winstonStringA, winstonStringB) {\n        return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n    isLessThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isLessThan(b);\n    }\n    isGreaterThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isGreaterThan(b);\n    }\n    add(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.plus(winstonStringB).toFixed(0);\n    }\n    sub(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.minus(winstonStringB).toFixed(0);\n    }\n    stringToBigNum(stringValue, decimalPlaces = 12) {\n        return this.BigNum(stringValue, decimalPlaces);\n    }\n}\nexports.default = Ar;\n//# sourceMappingURL=ar.js.map"]},"metadata":{},"sourceType":"script"}