"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.getData = exports.APP_NAME = void 0;
var ardb_1 = __importDefault(require("ardb"));
var object_hash_1 = __importDefault(require("object-hash"));
var rxjs_1 = require("rxjs");
var extensions_1 = require("./extensions");
var contract_lib_1 = require("@kyve/contract-lib");
var helper_1 = require("./helper");
var logger_1 = __importDefault(require("./logger"));
exports.APP_NAME = "KYVE - DEV";
var KYVE = /** @class */ (function () {
    function KYVE(options, uploadFunc, validateFunc) {
        this.arweave = extensions_1.arweaveClient;
        this.APP_NAME = exports.APP_NAME;
        this.uploaderBuffer = [];
        this.validatorBuffer = [];
        this.refetchInterval = 5 * 60 * 1000;
        this.dryRun = false;
        this.uploadFunc = uploadFunc;
        this.validateFunc = validateFunc;
        this.poolID = options.pool;
        this.keyfile = options.jwk;
        this.stake = options.stake;
        if (options.arweave) {
            this.arweave = options.arweave;
        }
        if (options.refetchInterval) {
            this.refetchInterval = options.refetchInterval;
        }
        this.ardb = new ardb_1["default"](this.arweave);
        this.pool = new contract_lib_1.Pool(this.arweave, this.keyfile, options.pool);
        this.governance = new contract_lib_1.Governance(this.arweave, this.keyfile);
    }
    KYVE.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var log, state, address, currentStake, diff, id, id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log = new logger_1["default"]("core");
                        return [4 /*yield*/, this.pool.getState()];
                    case 1:
                        state = _a.sent();
                        // shut down if no uploader is selected
                        if (!state.settings.uploader) {
                            log.error("No uploader specified in pool. Please create a vote to elect an uploader.");
                        }
                        return [4 /*yield*/, this.arweave.wallets.getAddress(this.keyfile)];
                    case 2:
                        address = _a.sent();
                        if (!!Object.keys(state.credit).includes(address)) return [3 /*break*/, 4];
                        return [4 /*yield*/, helper_1.deposit(this.stake, address, this.governance, this.pool, this.arweave)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        currentStake = state.credit[address].stake;
                        diff = Math.abs(this.stake - currentStake);
                        if (!(this.stake === currentStake)) return [3 /*break*/, 5];
                        log.info("Already staked with " + this.stake + " $KYVE in pool " + this.pool.id + ".");
                        return [3 /*break*/, 13];
                    case 5:
                        if (!(this.stake > currentStake)) return [3 /*break*/, 10];
                        if (!(state.credit[address].amount < diff)) return [3 /*break*/, 7];
                        return [4 /*yield*/, helper_1.deposit(diff, address, this.governance, this.pool, this.arweave)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [4 /*yield*/, this.pool.stake(diff)];
                    case 8:
                        id = _a.sent();
                        log.info("Staking " + diff + " $KYVE in pool " + this.pool.id + ". Transaction: " + id);
                        return [4 /*yield*/, helper_1.untilMined(id, this.arweave)];
                    case 9:
                        _a.sent();
                        log.info("Successfully staked tokens");
                        return [3 /*break*/, 13];
                    case 10: return [4 /*yield*/, this.pool.unstake(diff)];
                    case 11:
                        id = _a.sent();
                        log.info("Unstaking " + diff + " $KYVE in pool " + this.pool.id + ". Transaction: " + id);
                        return [4 /*yield*/, helper_1.untilMined(id, this.arweave)];
                    case 12:
                        _a.sent();
                        log.info("Successfully unstaked tokens");
                        _a.label = 13;
                    case 13:
                        if (address === state.settings.uploader) {
                            log.info("Running as an uploader ...");
                            this.uploader();
                        }
                        else {
                            log.info("Running as a validator ...");
                            this.validator();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    KYVE.prototype.listener = function () {
        var _this = this;
        var log = new logger_1["default"]("listener");
        return new rxjs_1.Observable(function (subscriber) {
            var latestHash = "";
            var main = function (address) { return __awaiter(_this, void 0, void 0, function () {
                var state, newHash, unhandledTxs, _i, unhandledTxs_1, _a, id, value, res, node, data, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.pool.getState()];
                        case 1:
                            state = _b.sent();
                            newHash = object_hash_1["default"](state);
                            if (!(newHash === latestHash)) return [3 /*break*/, 2];
                            return [3 /*break*/, 9];
                        case 2:
                            unhandledTxs = Object.entries(state.txs).filter(function (_a) {
                                var key = _a[0], value = _a[1];
                                return value.status === "pending" &&
                                    !(value.yays.includes(address) || value.nays.includes(address));
                            });
                            _i = 0, unhandledTxs_1 = unhandledTxs;
                            _b.label = 3;
                        case 3:
                            if (!(_i < unhandledTxs_1.length)) return [3 /*break*/, 9];
                            _a = unhandledTxs_1[_i], id = _a[0], value = _a[1];
                            return [4 /*yield*/, this.ardb
                                    .search()
                                    .id(id)
                                    .findAll()];
                        case 4:
                            res = (_b.sent());
                            node = res[0].node;
                            _b.label = 5;
                        case 5:
                            _b.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, exports.getData(id)];
                        case 6:
                            data = _b.sent();
                            subscriber.next({
                                id: id,
                                data: data,
                                transaction: node,
                                block: node.block.height
                            });
                            return [3 /*break*/, 8];
                        case 7:
                            e_1 = _b.sent();
                            log.warn("Error while fetching data for transaction: " + id);
                            return [3 /*break*/, 8];
                        case 8:
                            _i++;
                            return [3 /*break*/, 3];
                        case 9:
                            // refetch every x ms
                            setTimeout(main, this.refetchInterval, address);
                            return [2 /*return*/];
                    }
                });
            }); };
            _this.arweave.wallets.getAddress(_this.keyfile).then(function (res) { return main(res); });
        });
    };
    KYVE.prototype.uploader = function (dryRun) {
        var _this = this;
        if (dryRun === void 0) { dryRun = false; }
        var node = new rxjs_1.Observable(function (subscriber) {
            return _this.uploadFunc(subscriber, _this.pool.state.config);
        });
        node.subscribe(function (data) {
            _this.uploaderBuffer.push(data);
            _this.bundleAndUpload();
        });
    };
    KYVE.prototype.bundleAndUpload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var log, bundleSize, buffer, transaction, tags, _i, tags_1, _a, name_1, value, buffer, items, _b, buffer_1, entry, item, _c, _d, bundle, transaction;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        log = new logger_1["default"]("uploader");
                        bundleSize = this.pool.state.settings.bundleSize;
                        if (!(bundleSize === 1)) return [3 /*break*/, 4];
                        buffer = this.uploaderBuffer;
                        this.uploaderBuffer = [];
                        return [4 /*yield*/, this.arweave.createTransaction({
                                data: JSON.stringify(buffer[0].data)
                            }, this.keyfile)];
                    case 1:
                        transaction = _e.sent();
                        tags = __spreadArray([
                            { name: "Application", value: exports.APP_NAME },
                            { name: "Pool", value: this.pool.id },
                            { name: "App-Name", value: "SmartWeaveAction" },
                            { name: "App-Version", value: "0.3.0" },
                            { name: "Contract", value: this.pool.id },
                            { name: "Input", value: JSON.stringify({ "function": "register" }) }
                        ], (buffer[0].tags || []));
                        for (_i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
                            _a = tags_1[_i], name_1 = _a.name, value = _a.value;
                            transaction.addTag(name_1, value);
                        }
                        return [4 /*yield*/, this.arweave.transactions.sign(transaction, this.keyfile)];
                    case 2:
                        _e.sent();
                        return [4 /*yield*/, this.arweave.transactions.post(transaction)];
                    case 3:
                        _e.sent();
                        log.info("Sent a transaction: " + transaction.id + ". Cost: " + this.arweave.ar.winstonToAr(transaction.reward) + " AR");
                        return [3 /*break*/, 14];
                    case 4:
                        log.info("Buffer size is now: " + this.uploaderBuffer.length);
                        if (!(this.uploaderBuffer.length >= bundleSize)) return [3 /*break*/, 14];
                        buffer = this.uploaderBuffer;
                        this.uploaderBuffer = [];
                        items = [];
                        _b = 0, buffer_1 = buffer;
                        _e.label = 5;
                    case 5:
                        if (!(_b < buffer_1.length)) return [3 /*break*/, 9];
                        entry = buffer_1[_b];
                        return [4 /*yield*/, extensions_1.arweaveBundles.createData({
                                data: JSON.stringify(entry.data),
                                tags: __spreadArray([
                                    { name: "Application", value: exports.APP_NAME },
                                    { name: "Pool", value: this.poolID.toString() }
                                ], (entry.tags || []))
                            }, this.keyfile)];
                    case 6:
                        item = _e.sent();
                        _d = (_c = items).push;
                        return [4 /*yield*/, extensions_1.arweaveBundles.sign(item, this.keyfile)];
                    case 7:
                        _d.apply(_c, [_e.sent()]);
                        _e.label = 8;
                    case 8:
                        _b++;
                        return [3 /*break*/, 5];
                    case 9: return [4 /*yield*/, extensions_1.arweaveBundles.bundleData(items)];
                    case 10:
                        bundle = _e.sent();
                        return [4 /*yield*/, this.arweave.createTransaction({ data: JSON.stringify(bundle) }, this.keyfile)];
                    case 11:
                        transaction = _e.sent();
                        transaction.addTag("Bundle-Format", "json");
                        transaction.addTag("Bundle-Version", "1.0.0");
                        transaction.addTag("Content-Type", "application/json");
                        transaction.addTag("App-Name", "SmartWeaveAction");
                        transaction.addTag("App-Version", "0.3.0");
                        transaction.addTag("Contract", this.pool.id);
                        transaction.addTag("Input", JSON.stringify({ "function": "register" }));
                        return [4 /*yield*/, this.arweave.transactions.sign(transaction, this.keyfile)];
                    case 12:
                        _e.sent();
                        return [4 /*yield*/, this.arweave.transactions.post(transaction)];
                    case 13:
                        _e.sent();
                        log.info("Sent a bundle with " + items.length + " items: " + transaction.id + ". Cost: " + this.arweave.ar.winstonToAr(transaction.reward) + " AR");
                        _e.label = 14;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    KYVE.prototype.validator = function () {
        var _this = this;
        var node = new rxjs_1.Observable(function (subscriber) {
            return _this.validateFunc(_this.listener(), subscriber, _this.pool.state.config);
        });
        node.subscribe(function (res) {
            _this.validatorBuffer.push(res);
            _this.bundleAndSubmit();
        });
    };
    KYVE.prototype.bundleAndSubmit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var log, bundleSize, buffer, transaction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log = new logger_1["default"]("validator");
                        bundleSize = this.pool.state.settings.bundleSize;
                        log.info("Buffer size is now: " + this.validatorBuffer.length);
                        if (!(this.validatorBuffer.length >= bundleSize)) return [3 /*break*/, 4];
                        buffer = this.validatorBuffer;
                        this.validatorBuffer = [];
                        return [4 /*yield*/, this.arweave.createTransaction({
                                data: JSON.stringify(buffer.map(function (item) { return ({ txID: item.id, valid: item.valid }); }))
                            }, this.keyfile)];
                    case 1:
                        transaction = _a.sent();
                        transaction.addTag("App-Name", "SmartWeaveAction");
                        transaction.addTag("App-Version", "0.3.0");
                        transaction.addTag("Contract", this.pool.id);
                        transaction.addTag("Input", JSON.stringify({ "function": "submit" }));
                        transaction.addTag("Contract", this.governance.id);
                        transaction.addTag("Input", JSON.stringify({ "function": "readOutbox", contract: this.pool.id }));
                        return [4 /*yield*/, this.arweave.transactions.sign(transaction, this.keyfile)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.arweave.transactions.post(transaction)];
                    case 3:
                        _a.sent();
                        log.info("Sent a bundle with " + buffer.length + " items: " + transaction.id + ". Cost: " + this.arweave.ar.winstonToAr(transaction.reward) + " AR");
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return KYVE;
}());
exports["default"] = KYVE;
var getData = function (id, arweave) {
    if (arweave === void 0) { arweave = extensions_1.arweaveClient; }
    return __awaiter(void 0, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, arweave.transactions.getData(id, {
                        decode: true,
                        string: true
                    })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.toString()];
            }
        });
    });
};
exports.getData = getData;
