"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Submit = void 0;
var prando_1 = __importDefault(require("prando"));
var Submit = function (state, action) { return __awaiter(void 0, void 0, void 0, function () {
    var credit, txs, foreignCalls, settings, voters, caller, data, _a, _b, _i, data_1, _c, txID, valid, unhandledTxs, _loop_1, _d, unhandledTxs_1, _e, txID, data_2, unhandledSlashing, totalSlashed, _f, unhandledSlashing_1, _g, address, data_3;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                credit = state.credit;
                txs = state.txs;
                foreignCalls = state.foreignCalls;
                settings = state.settings;
                voters = Object.entries(credit)
                    .filter(function (_a) {
                    var key = _a[0], value = _a[1];
                    return value.stake && key !== settings.uploader;
                })
                    .map(function (_a) {
                    var key = _a[0], value = _a[1];
                    return key;
                });
                caller = action.caller;
                ContractAssert(voters.includes(caller), "Caller has no stake in the pool.");
                _b = (_a = JSON).parse;
                return [4 /*yield*/, SmartWeave.unsafeClient.transactions.getData(SmartWeave.transaction.id, { decode: true, string: true })];
            case 1:
                data = _b.apply(_a, [_h.sent()]);
                for (_i = 0, data_1 = data; _i < data_1.length; _i++) {
                    _c = data_1[_i], txID = _c.txID, valid = _c.valid;
                    ContractAssert(!(txs[txID].yays.includes(caller) || txs[txID].nays.includes(caller)), "Caller has already voted.");
                    ContractAssert(SmartWeave.block.height <=
                        txs[txID].submittedAt + 2 * settings.gracePeriod, "Transaction has been dropped.");
                    if (txs[txID].closesAt) {
                        ContractAssert(SmartWeave.block.height <= txs[txID].closesAt, "Grace period has ended.");
                    }
                    else {
                        txs[txID].closesAt = SmartWeave.block.height + settings.gracePeriod;
                    }
                    if (valid)
                        txs[txID].yays.push(caller);
                    else
                        txs[txID].nays.push(caller);
                    txs[txID].voters = voters;
                }
                unhandledTxs = Object.entries(txs)
                    .sort(function (a, b) { return a[1].closesAt - b[1].closesAt; })
                    .filter(function (_a) {
                    var key = _a[0], value = _a[1];
                    return value.status === "pending" &&
                        (SmartWeave.block.height > value.closesAt ||
                            SmartWeave.block.height >
                                value.submittedAt + 2 * settings.gracePeriod);
                });
                _loop_1 = function (txID, data_2) {
                    var bytes, tokens, tempAmount, _j, _k, address, governancePayout, holder, treasuryPayout, uploaderPayout, validatorsPayout, _l, _m, address, _o, _p, address, _q, _r, address;
                    return __generator(this, function (_s) {
                        switch (_s.label) {
                            case 0:
                                if (!(data_2.yays.length + data_2.nays.length > 0.5 * data_2.voters.length)) return [3 /*break*/, 3];
                                return [4 /*yield*/, GetBytes(txID)];
                            case 1:
                                bytes = _s.sent();
                                tokens = Round(settings.payout.kyvePerByte * bytes + settings.payout.idleCost);
                                // The pool does not have enough balance to perform payout
                                if (tokens >
                                    Object.entries(credit)
                                        .map(function (_a) {
                                        var key = _a[0], value = _a[1];
                                        return value.fund;
                                    })
                                        .reduce(function (a, b) { return a + b; }, 0)) {
                                    settings.paused = true;
                                    return [2 /*return*/, "continue"];
                                }
                                tempAmount = tokens;
                                for (_j = 0, _k = Object.keys(credit); _j < _k.length; _j++) {
                                    address = _k[_j];
                                    if (tempAmount <= credit[address].fund) {
                                        credit[address].fund -= tempAmount;
                                        break;
                                    }
                                    else {
                                        tempAmount -= credit[address].fund;
                                        credit[address].fund = 0;
                                    }
                                }
                                governancePayout = Round(tokens * 0.01);
                                return [4 /*yield*/, RandomHolder(settings.foriegnContracts.governance, settings.foriegnContracts.treasury)];
                            case 2:
                                holder = _s.sent();
                                foreignCalls.push({
                                    txID: SmartWeave.transaction.id + "//" + foreignCalls.length,
                                    contract: settings.foriegnContracts.governance,
                                    input: {
                                        "function": "transfer",
                                        target: holder,
                                        qty: governancePayout
                                    }
                                });
                                treasuryPayout = Round(tokens * 0.01);
                                foreignCalls.push({
                                    txID: SmartWeave.transaction.id + "//" + foreignCalls.length,
                                    contract: settings.foriegnContracts.governance,
                                    input: {
                                        "function": "transfer",
                                        target: settings.foriegnContracts.treasury,
                                        qty: treasuryPayout
                                    }
                                });
                                uploaderPayout = Round(tokens * 0.68);
                                credit[settings.uploader].amount += uploaderPayout;
                                validatorsPayout = tokens - governancePayout - treasuryPayout - uploaderPayout;
                                for (_l = 0, _m = __spreadArray(__spreadArray([], data_2.yays), data_2.nays); _l < _m.length; _l++) {
                                    address = _m[_l];
                                    credit[address].amount += Round(validatorsPayout / (data_2.yays.length + data_2.nays.length));
                                }
                                if (data_2.yays.length >= data_2.nays.length) {
                                    // Transaction is valid
                                    txs[txID].status = "valid";
                                    // Increase validator warnings
                                    for (_o = 0, _p = data_2.voters.filter(function (item) { return data_2.yays.indexOf(item) === -1; }); _o < _p.length; _o++) {
                                        address = _p[_o];
                                        credit[address].points += 1;
                                    }
                                }
                                else {
                                    // Transaction is invalid
                                    txs[txID].status = "invalid";
                                    credit[settings.uploader].points += 1;
                                    // Increase validator warnings
                                    for (_q = 0, _r = data_2.voters.filter(function (item) { return data_2.nays.indexOf(item) === -1; }); _q < _r.length; _q++) {
                                        address = _r[_q];
                                        credit[address].points += 1;
                                    }
                                }
                                return [3 /*break*/, 4];
                            case 3:
                                // Dropped (quorum failed)
                                txs[txID].status = "dropped";
                                _s.label = 4;
                            case 4:
                                txs[txID].finalizedAt = SmartWeave.block.height;
                                return [2 /*return*/];
                        }
                    });
                };
                _d = 0, unhandledTxs_1 = unhandledTxs;
                _h.label = 2;
            case 2:
                if (!(_d < unhandledTxs_1.length)) return [3 /*break*/, 5];
                _e = unhandledTxs_1[_d], txID = _e[0], data_2 = _e[1];
                return [5 /*yield**/, _loop_1(txID, data_2)];
            case 3:
                _h.sent();
                _h.label = 4;
            case 4:
                _d++;
                return [3 /*break*/, 2];
            case 5:
                unhandledSlashing = Object.entries(credit).filter(function (_a) {
                    var key = _a[0], value = _a[1];
                    return value.points > settings.slashThreshold;
                });
                totalSlashed = 0;
                for (_f = 0, unhandledSlashing_1 = unhandledSlashing; _f < unhandledSlashing_1.length; _f++) {
                    _g = unhandledSlashing_1[_f], address = _g[0], data_3 = _g[1];
                    totalSlashed += credit[address].stake;
                    credit[address].points = 0;
                    credit[address].stake = 0;
                    if (address === settings.uploader) {
                        settings.uploader = "";
                        settings.paused = true;
                    }
                }
                if (totalSlashed) {
                    foreignCalls.push({
                        txID: SmartWeave.transaction.id + "//" + foreignCalls.length,
                        contract: settings.foriegnContracts.governance,
                        input: {
                            "function": "transfer",
                            target: settings.foriegnContracts.treasury,
                            qty: totalSlashed
                        }
                    });
                }
                return [2 /*return*/, __assign(__assign({}, state), { credit: credit, txs: txs, foreignCalls: foreignCalls, settings: settings })];
        }
    });
}); };
exports.Submit = Submit;
var GetBytes = function (txID) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, SmartWeave.unsafeClient.api.post("graphql", {
                    query: "\n      query($txID: ID!) {\n        transactions(ids: [$txID]) {\n          edges {\n            node {\n              data {\n                size\n              }\n            }\n          }\n        }\n      }\n  ",
                    variables: { txID: txID }
                }, { headers: { "content-type": "application/json" } })];
            case 1:
                res = _a.sent();
                // Only return the data size
                return [2 /*return*/, res.data.data.transactions.edges[0].node.data.size];
        }
    });
}); };
var Round = function (input) {
    return Math.floor(input * Math.pow(10, 12)) / Math.pow(10, 12);
};
var RandomHolder = function (governance, treasury) { return __awaiter(void 0, void 0, void 0, function () {
    var state, balances, vault, totalTokens, _i, _a, addr, _b, _c, addr, vaultBalance, weighted, _d, _e, addr, sum, r, _f, _g, key;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0: return [4 /*yield*/, SmartWeave.contracts.readContractState(governance)];
            case 1:
                state = _h.sent();
                balances = state.balances;
                vault = state.vault;
                totalTokens = 0;
                for (_i = 0, _a = Object.keys(balances); _i < _a.length; _i++) {
                    addr = _a[_i];
                    totalTokens += balances[addr];
                }
                for (_b = 0, _c = Object.keys(vault); _b < _c.length; _b++) {
                    addr = _c[_b];
                    if (!vault[addr].length)
                        continue;
                    vaultBalance = vault[addr]
                        .map(function (a) { return a.balance; })
                        .reduce(function (a, b) { return a + b; }, 0);
                    totalTokens += vaultBalance;
                    if (addr in balances) {
                        balances[addr] += vaultBalance;
                    }
                    else {
                        balances[addr] = vaultBalance;
                    }
                }
                weighted = {};
                for (_d = 0, _e = Object.keys(balances); _d < _e.length; _d++) {
                    addr = _e[_d];
                    weighted[addr] = balances[addr] / totalTokens;
                }
                sum = 0;
                r = new prando_1["default"](SmartWeave.transaction.id).next();
                for (_f = 0, _g = Object.keys(weighted); _f < _g.length; _f++) {
                    key = _g[_f];
                    sum += weighted[key];
                    if (r <= sum && weighted[key] > 0) {
                        return [2 /*return*/, key];
                    }
                }
                // In the slim chance that no-one is selected, governance reward goes to treasury.
                return [2 /*return*/, treasury];
        }
    });
}); };
