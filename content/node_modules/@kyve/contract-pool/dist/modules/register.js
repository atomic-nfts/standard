"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Register = void 0;
var Register = function (state, action) { return __awaiter(void 0, void 0, void 0, function () {
    var txs, settings, caller, ids, tags, data, _a, _b, items, _i, ids_1, id;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                txs = state.txs;
                settings = state.settings;
                caller = action.caller;
                ContractAssert(caller === settings.uploader, "Only the uploader can register data.");
                ids = [];
                return [4 /*yield*/, GetTags(SmartWeave.transaction.id)];
            case 1:
                tags = _c.sent();
                if (!(tags.findIndex(function (tag) { return tag.name === "Bundle-Format" && tag.value === "json"; }) > -1 &&
                    tags.findIndex(function (tag) { return tag.name === "Bundle-Version" && tag.value === "1.0.0"; }) > -1)) return [3 /*break*/, 3];
                _b = (_a = JSON).parse;
                return [4 /*yield*/, SmartWeave.unsafeClient.transactions.getData(SmartWeave.transaction.id, { decode: true, string: true })];
            case 2:
                data = _b.apply(_a, [_c.sent()]);
                items = data.items;
                items.forEach(function (item) { return ids.push(item.id); });
                return [3 /*break*/, 4];
            case 3:
                // Transaction is not a bundle
                ids.push(SmartWeave.transaction.id);
                _c.label = 4;
            case 4:
                for (_i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                    id = ids_1[_i];
                    txs[id] = {
                        status: "pending",
                        submittedAt: SmartWeave.block.height,
                        yays: [],
                        nays: [],
                        voters: []
                    };
                }
                return [2 /*return*/, __assign(__assign({}, state), { txs: txs })];
        }
    });
}); };
exports.Register = Register;
var GetTags = function (txID) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, SmartWeave.unsafeClient.api.post("graphql", {
                    query: "\n      query($txID: ID!) {\n        transactions(ids: [$txID]) {\n          edges {\n            node {\n              tags {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n  ",
                    variables: { txID: txID }
                }, { headers: { "content-type": "application/json" } })];
            case 1:
                res = _a.sent();
                // Only return the tags
                return [2 /*return*/, res.data.data.transactions.edges[0].node.tags];
        }
    });
}); };
