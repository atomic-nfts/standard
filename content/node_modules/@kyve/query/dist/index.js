"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = exports.readContract = exports.interactRead = void 0;
const ardb_1 = __importDefault(require("ardb"));
const core_1 = require("@kyve/core");
const extensions_1 = require("@kyve/core/dist/extensions");
var smartweave_1 = require("./smartweave");
Object.defineProperty(exports, "interactRead", { enumerable: true, get: function () { return smartweave_1.interactRead; } });
Object.defineProperty(exports, "readContract", { enumerable: true, get: function () { return smartweave_1.readContract; } });
class Query extends ardb_1.default {
    constructor(poolID, deRef = true, arweave = extensions_1.arweaveClient) {
        super(arweave);
        // default tags
        super.only(["id"]);
        super.limit(10);
        this.poolID = poolID;
        this.deRef = deRef;
    }
    find() {
        const _super = Object.create(null, {
            tag: { get: () => super.tag },
            find: { get: () => super.find }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.tag.call(this, "Application", core_1.APP_NAME);
            _super.tag.call(this, "Pool", this.poolID);
            const res = (yield _super.find.call(this));
            const ret = [];
            for (let { node } of res) {
                if (this.deRef) {
                    const data = yield core_1.getData(node.id);
                    ret.push(data);
                }
                else {
                    ret.push(node);
                }
            }
            return ret;
        });
    }
    next() {
        const _super = Object.create(null, {
            next: { get: () => super.next }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const res = (yield _super.next.call(this));
            const ret = [];
            for (let { node } of res) {
                const txID = node.id;
                if (this.deRef) {
                    const data = yield core_1.getData(txID);
                    ret.push(data);
                }
                else {
                    ret.push(txID);
                }
            }
            return ret;
        });
    }
}
exports.Query = Query;
