"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Pool = void 0;
var smartweave_1 = require("smartweave");
var cross_fetch_1 = require("cross-fetch");
var constants_1 = require("./constants");
var Pool = /** @class */ (function () {
    function Pool(arweave, wallet, id) {
        this.src = constants_1.POOL_SOURCE_CONTRACT_ID;
        this.governance = constants_1.GOVERNANCE_CONTRACT_ID;
        this.treasury = constants_1.TREASURY_CONTRACT_ID;
        this.client = arweave;
        this.wallet = wallet;
        this.id = id;
    }
    Pool.prototype.create = function (state) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, smartweave_1.createContractFromTx(this.client, this.wallet, this.src, JSON.stringify(__assign(__assign({}, state), { settings: __assign(__assign({}, state.settings), { foriegnContracts: {
                                        governance: this.governance,
                                        treasury: this.treasury
                                    } }) })))];
                    case 1:
                        _a.id = _b.sent();
                        return [2 /*return*/, this.id];
                }
            });
        });
    };
    Pool.prototype.getState = function (useCache) {
        if (useCache === void 0) { useCache = true; }
        return __awaiter(this, void 0, void 0, function () {
            var res, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.id)
                            throw new Error("No pool ID specified.");
                        if (!useCache) return [3 /*break*/, 5];
                        return [4 /*yield*/, cross_fetch_1.fetch("https://kyve.network/api/pool?id=" + this.id)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        res = _a.sent();
                        return [3 /*break*/, 4];
                    case 3: throw new Error("Couldn't read state for " + this.id + " from cache.");
                    case 4: return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, smartweave_1.readContract(this.client, this.id)];
                    case 6:
                        res = _a.sent();
                        _a.label = 7;
                    case 7:
                        this.state = res;
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Pool.prototype.processOutbox = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.interactWithGovernance({
                            "function": "readOutbox",
                            contract: this.id
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.deposit = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.interactWithGovernance({
                            "function": "transfer",
                            target: this.id,
                            qty: qty
                        }, [
                            { name: "Contract", value: this.id },
                            { name: "Input", value: JSON.stringify({ "function": "deposit" }) },
                        ])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.withdraw = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = {
                            "function": "withdraw",
                            qty: qty
                        };
                        return [4 /*yield*/, this.interactWithPool(input, [
                                { name: "Contract", value: this.governance },
                                {
                                    name: "Input",
                                    value: JSON.stringify({ "function": "readOutbox", contract: this.id })
                                },
                            ])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.fund = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = {
                            "function": "fund",
                            qty: qty
                        };
                        return [4 /*yield*/, this.interactWithPool(input)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.unfund = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = {
                            "function": "unfund",
                            qty: qty
                        };
                        return [4 /*yield*/, this.interactWithPool(input)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.stake = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = {
                            "function": "stake",
                            qty: qty
                        };
                        return [4 /*yield*/, this.interactWithPool(input)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.unstake = function (qty) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = {
                            "function": "unstake",
                            qty: qty
                        };
                        return [4 /*yield*/, this.interactWithPool(input)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // === Private Functions ===
    Pool.prototype.interactWithGovernance = function (input, tags) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, smartweave_1.interactWrite(this.client, this.wallet, this.state.settings.foriegnContracts.governance, input, tags)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Pool.prototype.interactWithPool = function (input, tags) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, smartweave_1.interactWrite(this.client, this.wallet, this.id, input, tags)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Pool;
}());
exports.Pool = Pool;
