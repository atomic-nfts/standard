import { AxiosResponse } from "axios";
import Arweave from "arweave";
import { JWKInterface } from "arweave/node/lib/wallet";
import Transaction from "arweave/node/lib/transaction";
export interface BundlerPayload {
    data?: any;
    signature?: string;
    owner?: string;
    senderAddress?: string;
    vote?: Vote;
}
export interface Vote {
    voteId: number;
    direct?: string;
}
export interface RegistrationData {
    url: string;
    timestamp: number;
}
export declare const arweave: Arweave;
export declare const BUNDLER_NODES = "/nodes";
/**
 * Tools for interacting with the koi network
 */
export declare class Common {
    wallet?: JWKInterface;
    mnemonic?: string;
    address?: string;
    contractId: string;
    bundlerUrl: string;
    constructor(bundlerUrl?: string, contractId?: string);
    /**
     * Generates wallet optionally with a mnemonic phrase
     * @param use_mnemonic [false] Flag for enabling mnemonic phrase wallet generation
     */
    generateWallet(use_mnemonic?: boolean): Promise<Error | true>;
    /**
     * Loads arweave wallet
     * @param source object to load from, JSON or JWK, or mnemonic key
     */
    loadWallet(source: any): Promise<JWKInterface>;
    /**
     * Manually set wallet address
     * @param walletAddress Address as a string
     * @returns Wallet address
     */
    setWallet(walletAddress: string): string;
    /**
     * Uses koi wallet to get the address
     * @returns Wallet address
     */
    getWalletAddress(): Promise<string>;
    /**
     * Get and set arweave balance
     * @returns Balance as a string if wallet exists, else undefined
     */
    getWalletBalance(): Promise<number>;
    /**
     * Gets koi balance from cache
     * @returns Balance as a number
     */
    getKoiBalance(): Promise<number>;
    /**
     * Gets the current contract state
     * @returns Current KOI system state
     */
    getContractState(): Promise<any>;
    /**
     * Get contract state
     * @param id Transaction ID
     * @returns State object
     */
    getTransaction(id: string): Promise<Transaction>;
    /**
     * Get block height
     * @returns Block height maybe number
     */
    getBlockHeight(): Promise<any>;
    /**
     * Get the NFT state from arweave, this should be the initial state
     * @param txId Transaction ID of the NFT
     * @returns The NFT state object
     */
    readNftState(txId: string): Promise<any>;
    /**
     * Interact with contract to stake
     * @param qty Quantity to stake
     * @returns Transaction ID
     */
    stake(qty: number): Promise<string>;
    /**
     * Interact with contract to withdraw
     * @param qty Quantity to transfer
     * @returns Transaction ID
     */
    withdraw(qty: number): Promise<string>;
    /**
     * Interact with contract to transfer koi
     * @param qty Quantity to transfer
     * @param target Receiver address
     * @returns Transaction ID
     */
    transfer(qty: number, target: string, token: string): Promise<string>;
    /**
     * Mint koi
     * @param arg object arg.targetAddress(receiver address) and arg.qty(amount to mint)
     * @returns Transaction ID
     */
    mint(arg: any): Promise<string>;
    /**
     * Interact with contract to register data
     * @param txId It has batchFile/value(string) and stake amount/value(int) as properties
     * @param ownerId String container the owner ID
     * @returns Transaction ID
     */
    registerData(txId: string, ownerId?: string): Promise<string>;
    /**
     * Sign transaction
     * @param tx Transaction to be signed
     * @returns signed Transaction
     */
    signTransaction(tx: Transaction): Promise<any>;
    /**
     * Get transaction data from Arweave
     * @param txId Transaction ID
     * @returns Transaction
     */
    nftTransactionData(txId: string): Promise<Transaction>;
    /**
     * Sign payload
     * @param payload Payload to sign
     * @returns Signed payload with signature
     */
    signPayload(payload: BundlerPayload): Promise<BundlerPayload | null>;
    /**
     * Verify signed payload
     * @param payload
     * @returns Verification result
     */
    verifySignature(payload: any): Promise<boolean>;
    /**
     * Posts data to Arweave
     * @param data
     * @returns Transaction ID
     */
    postData(data: any): Promise<string | null>;
    /**
     * Gets all the transactions where the wallet is the owner
     * @param wallet Wallet address as a string
     * @param count The number of results to return
     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor
     * @returns Object with transaction IDs as keys, and transaction data strings as values
     */
    getOwnedTxs(wallet: string, count?: number, cursorId?: string): Promise<any>;
    /**
     * Gets all the transactions where the wallet is the recipient
     * @param wallet Wallet address as a string
     * @param count The number of results to return
     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor
     * @returns Object with transaction IDs as keys, and transaction data strings as values
     */
    getRecipientTxs(wallet: string, count?: number, cursorId?: string): Promise<any>;
    /**
     * Get the updated state of an NFT
     * @param contentTxId TxId of the content
     * @param state
     * @returns An object with {totaltViews, totalReward, 24hrsViews}
     */
    contentView(contentTxId: any, state: any): Promise<any>;
    /**
     * Get a list of all NFT IDs
     * @returns Array of transaction IDs which are registered NFTs
     */
    retrieveAllRegisteredContent(): Promise<string[]>;
    /**
     * Get a list of NFT IDs by owner
     * @param owner Wallet address of the owner
     * @returns Array containing the NFTs
     */
    getNftIdsByOwner(owner: string): Promise<string[]>;
    /**
     * Get Koi rewards earned from an NFT
     * @param txId The transaction id to process
     * @returns Koi rewards earned or null if the transaction is not a valid Koi NFT
     */
    getNftReward(txId: string): Promise<number | null>;
    /**
     * Query Arweave using GQL
     * @param request Query string
     * @returns Object containing the query results
     */
    gql(request: string): Promise<any>;
    /**
     * Gets an array of service nodes
     * @param url URL of the service node to retrieve the array from a known service node
     * @returns Array of service nodes
     */
    getNodes(url?: string): Promise<Array<BundlerPayload>>;
    /**
     * Gets the list of all KIDs(DIDs)
     * @param count The number of results to return
     * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor
     * @returns {Array} - returns a Javascript Array of object with each object representing a single KID
     */
    getAllKID(count?: number, cursorId?: string): Promise<any>;
    /**
       * Get the KID state for the particular walletAddress
       * @param walletAddress The wallet address for the person whose DID is to be found
       * @returns {Object} - returns a contract object having id which can be used to get the state
       */
    getKIDByWalletAddress(walletAddress?: string): Promise<any>;
    /**
     * Creates a KID smartcontract on arweave
     * @param KIDObject - an object containing name, description, addresses and link
     * @param image - an object containing contentType and blobData
     * @returns {txId} - returns a txId in case of success and false in case of failure
     */
    createKID(KIDObject: any, image: any): Promise<any>;
    /**
     * Updates the state of a KID smartcontract on arweave
     * @param KIDObject - an object containing name, description, addresses and link
     * @param contractId - the contract Id for KID to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    updateKID(KIDObject: any, contractId: string): Promise<any>;
    /**
       * Creates a NFT Collection smartcontract on arweave
       * @param collectionObject - an object containing name, description, addresses and link
       * @returns {txId} - returns a txId in case of success and false in case of failure
       */
    createCollection(collectionObject: any): Promise<any>;
    /**
       * Gets the list of all Collections by walletAddress
       * @param walletAddress The wallet address for the person whose DID is to be found
       * @param count The number of results to return
       * @param cursorId Cursor ID after which to query results, from data.transactions.edges[n].cursor
       * @returns {Array} - returns a Javascript Array of object with each object representing a Collection object (The collection object contains id which can be used in func readState to get actual state)
       */
    getCollectionsByWalletAddress(walletAddress?: string, count?: number, cursorId?: string): Promise<any>;
    /**
     * Get the state from arweave for any contract
     * @param txId Transaction ID of the NFT
     * @returns The NFT state object
     */
    readState(txId: string): Promise<any>;
    /**
     * Add new NFTs to the existing collection
     * @param nftId - The transaction id of the NFT to be added to the collection
     * @param contractId - the contract Id for Collection to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    addToCollection(nftId: string, contractId: string): Promise<any>;
    /**
     * Remove NFTs from the existing collection
     * @param index - The index of the NFT which is to be removed from the collection
     * @param contractId - the contract Id for Collection to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    removeFromCollection(index: number, contractId: string): Promise<any>;
    /**
     * Updates the view of the existing Collection
     * @param newView - The view you want to set for the collection to display (Initialized with 'default')
     * @param contractId - the contract Id for Collection to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    updateView(newView: string, contractId: string): Promise<any>;
    /**
     * Updates the index of the NFT which should be used as the preview for the collection
     * @param imageIndex - The index of the NFT which should be used as the preview for the collection
     * @param contractId - the contract Id for Collection to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    updatePreviewImageIndex(imageIndex: number, contractId: string): Promise<any>;
    /**
     * Updates the array of NFTs from which the collection is composed of (Can be used to reorder the NFts in the collection also)
     * @param collection - The array of NFTs from which the collection is composed of.
     * @param contractId - the contract Id for Collection to be updated
     * @returns {txId} - returns a transaction id of arweave for the updateKID smartweave call
     */
    updateCollection(collection: any, contractId: string): Promise<any>;
    /**
     *  Calculates total Views and earned KOII for given NFTIds Array
     * @param nftIdArr - The array of NFTIds for which total Views and earned KOII will be calculated
     * @returns {object} - returns an object containing totalViews and totalRewards
     */
    getViewsAndEarnedKOII(nftIdArr: any): Promise<any>;
    /**
     * Writes to contract
     * @param input Passes to smartweave write function, in order to execute a contract function
     * @returns Transaction ID
     */
    protected _interactWrite(input: any): Promise<string>;
    /**
     * Read contract latest state
     * @returns Contract
     */
    protected _readContract(): Promise<any>;
    /**
     * Generate a 12 word mnemonic for an Arweave key https://github.com/acolytec3/arweave-mnemonic-keys
     * @returns {string} - a promise resolving to a 12 word mnemonic seed phrase
     */
    private _generateMnemonic;
    /**
     * Generates a JWK object representation of an Arweave key
     * @param mnemonic - a 12 word mnemonic represented as a string
     * @returns {object} - returns a Javascript object that conforms to the JWKInterface required by Arweave-js
     */
    private _getKeyFromMnemonic;
}
/**
 * Get cached data from path
 * @param path Path to cached data
 * @returns Data as generic type T
 */
export declare function getCacheData<T>(path: string): Promise<AxiosResponse<T>>;
