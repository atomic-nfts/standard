{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["totalFrames","App","useState","narcissus","setNarcissus","score","setScore","mainRef","useRef","flower","media","useLayoutEffect","console","log","current","scoreSpan","document","getElementsByClassName","length","createElement","innerText","className","appendChild","image","alt","title","updateScore","blob","Blob","type","url","URL","createObjectURL","narci","src","addEventListener","revokeObjectURL","once","setTimeout","split","join","updateImage","init","a","getCorrectFreezeFrame","correctFreezeFrame","setSVG","state","id","getData","axios","get","response","data","error","oid","window","location","pathname","nft_state","koii_state","decay","lockState","lockBlock","lastLock","list","stateUpdate","trafficLogs","rewardReport","change","max","lastMax","scalar","last","i","item","dailyTrafficBlock","logsSummary","Object","keys","includes","aScore","newScore","frameToSet","Promise","resolve","reject","obj","x","err","useEffect","Fragment","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yxtsCAmBIA,EAAc,IAyQHC,MAvQf,WACE,MAAkCC,mBAAS,4BAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBACA,GADA,UAC0BA,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAUC,iBAAO,MACjBC,EAASC,EAqEfC,2BAAgB,WAKd,OAJAC,QAAQC,IAAI,0BApEM,WAElB,GADAD,QAAQC,IAAI,kBAAmBN,EAAS,WAAYF,GAC/CE,EAAQO,QAAb,CAKE,IAAIC,EAAYC,SAASC,uBAAuB,aAEhD,GAAIF,EAAUG,OAAS,EAAI,CACzB,IAAIH,EAAYC,SAASG,cAAc,QACrCJ,EAAUK,UAAYf,EACtBU,EAAUM,UAAY,YAExBd,EAAQO,QAAQQ,YAAYP,QAE5BA,EAAU,GAAGK,UAAYf,EAG3B,IAAIkB,EAAQP,SAASC,uBAAuB,aAAa,GACrDM,IACFA,EAAMC,IAAN,gBAAsBnB,EAAtB,0EACAkB,EAAME,MAAN,gBAAwBpB,EAAxB,gFAnBFO,QAAQC,IAAI,6BAA8BN,EAAQO,SAkEpDY,GAGO,eAMN,CAACrB,IAGJM,2BAAgB,WAKd,OAJAC,QAAQC,IAAI,0BAtDd,WAEE,GADAD,QAAQC,IAAI,mBAAoBN,GAC3BA,EAAQO,QAAb,CAMEF,QAAQC,IAAI,kCAAmCN,EAAQO,SAEvD,IAAIa,EAAO,IAAIC,KAAK,CAACzB,GAAY,CAAC0B,KAAM,kBAEpCC,EAAMC,IAAIC,gBAAgBL,GAE9Bf,QAAQC,IAAI,UAAWiB,GAEvB,IAAIG,EAAQjB,SAASC,uBAAuB,aAE5C,GAAIgB,EAAMf,OAAS,EAAG,CACpB,IAAIK,EAAQP,SAASG,cAAc,OAC/BI,EAAMW,IAAMJ,EACZP,EAAMF,UAAY,iBAElBE,EAAMY,iBAAiB,QAAQ,kBAAMJ,IAAIK,gBAAgBN,KAAM,CAACO,MAAM,IAE1EzB,QAAQC,IAAI,QAASU,GAErBe,YAAW,WACT,IAAIL,EAAQjB,SAASC,uBAAuB,aAAa,GACzDgB,EAAMZ,UAAYY,EAAMZ,UAAUkB,MAAM,QAAQC,KAAK,MACpD,MAEHjC,EAAQO,QAAQQ,YAAYC,QAE5BU,EAAM,GAAGC,IAAMJ,OA9BjBlB,QAAQC,IAAI,iCAAkCN,EAAQO,SAmDxD2B,GAGO,eASN,CAACtC,IAIJ,IAAMuC,EAAI,uCAAG,4BAAAC,EAAA,sEACoBC,IADpB,cACPC,EADO,OAEXjC,QAAQC,IAAI,gBAAiBgC,GAFlB,SAGLC,EAAOD,GAHF,gCAIJ,CAAEE,MApHTA,UAoHgBC,GAnHhBA,YA+GW,2CAAH,qDA3GG,SAkHEC,EAlHF,8EAkHb,WAAwBnB,GAAxB,eAAAa,EAAA,+EAE2BO,IAAMC,IAAIrB,GAFrC,cAEUsB,EAFV,OAGIxC,QAAQC,IAAIuC,GAHhB,kBAIWA,EAASC,MAJpB,gCAMIzC,QAAQ0C,MAAR,MANJ,0DAlHa,+BA4HEV,IA5HF,2EA4Hb,4DAAAD,EAAA,sEAEQY,EAAOC,OAAOC,SAASC,SAAUnB,MAAM,KAAK,IAAM,8CAF1D,SAK0BU,EAAQ,mEALlC,cAKQU,EALR,gBAQ2BV,EAAQ,mEARnC,OAQQW,EARR,OAWQ9C,EAAU6C,EAAUE,MAAMC,WAAa,EACvCC,EAAYJ,EAAUE,MAAMG,SAC5BC,EAAOL,EAAWM,YAAYC,YAAYC,aAI1CC,EAAS,EACTC,EAAMX,EAAUE,MAAMU,SAAW,EACjCC,EAAS,EACTC,EAAO,EACPF,EAAU,EACVG,EAAI,EAtBZ,cAwBsBT,GAxBtB,IAwBI,4BAAUU,EAAe,SAEbC,kBAAoBb,IACdY,EAAKE,YAAgBC,OAAOC,KAAKJ,EAAKE,aAAaG,SAASzB,MAClE0B,EAASN,EAAKE,YAAYtB,IAChBe,GAEPG,IAASC,EAAI,IAEhBF,GAAkBA,GAGbE,EAAI,GAAOH,IAEhBC,IAAY,GAIdH,GAAkBY,GAAW,EAAIT,EAAS,OAI1CF,EAAMW,EACNV,EAAUG,EACVL,GAAkB,KAEpBI,EAAOC,IAGbA,GAAQ,EArDd,qCAwDQL,EAAS,GAEXzD,QAAQC,IAAI,oBAAqBC,GACjCoE,EAAWpE,IAKXoE,GADgBlF,EAAcc,IACL,MAAQuD,IACjBrE,EACdkF,EAAWlF,EACDkF,EAAW,IACrBA,EAAW,GAIftE,QAAQC,IAAI,cAAeqE,GAxE/B,kBA0EWA,GA1EX,yCA6EItE,QAAQC,IAAI,yBAAZ,MACAP,EAAS,GA9Eb,kBA+EW,GA/EX,2DA5Ha,+BA+MEwC,EA/MF,8EA+Mb,WAAsBqC,GAAtB,SAAAxC,EAAA,6DACE/B,QAAQC,IAAI,UADd,kBAES,IAAIuE,SAAQ,SAAUC,EAASC,GACpC,KAAK,WAKH,IAHA,IAAIC,EAAM,GAFR,WAKOC,GACPlD,YAAY,WAEViD,EAAM9E,EAAO+E,GACbpF,EAAamF,GACbjF,EAASkF,KAEN,IAAFA,IAPIA,EAAI,EAAGA,EAAIL,EAAYK,IAAO,EAA9BA,GAST5E,QAAQC,IAAI,yBAA0B0E,GACtC3E,QAAQC,IAAI,gCAAiC0E,GAE7CF,EAAQE,GAjBL,GAkBH,MAAOE,GACP7E,QAAQC,IAAI,MAAO4E,GACnBH,EAAOG,QAvBb,4CA/Ma,sBAsPb,OAJAC,qBAAU,WACRhD,MACC,IAGD,qBAAKrB,UAAU,MAAf,SAKI,eAAC,IAAMsE,SAAP,WACE,2BACA,sBAAMC,IAAKrF,UCvQNsF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxF,SAASyF,eAAe,SAM1BZ,M","file":"static/js/main.7cf0af8b.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect, useRef } from \"react\";\n\n// import * as kweb from \"@_koi/sdk/web\";\n// import gifFrames from \"gif-frames\";\nimport axios from 'axios';\nimport media from \"./narcissus.json\";\n\n// import SmartWeave from \"smartweave\";\n\nimport \"./App.css\";\n\n// console.log('narcissus', media, media.length)\n// const ktools = new kweb.Web();\n\n// console.log(\"ktools\", ktools);\n\nlet state;\nlet id;\n// let koii;\nlet totalFrames = 225;\n\nfunction App() {\n  const [narcissus, setNarcissus] = useState(<canvas></canvas>);\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  // const [canvas, setCanvas] = useState(<canvas></canvas>);\n  const mainRef = useRef(null)\n  const flower = media;\n\n  const updateScore = () => {\n    console.log(\"useEffect score\", mainRef, 'score is', score);\n    if (!mainRef.current) {\n      console.log('not updating score because', mainRef.current)\n      // setTimeout(updateScore, 1000)\n      return;\n    } else {\n      let scoreSpan = document.getElementsByClassName('scoreSpan')\n      \n      if (scoreSpan.length < 1 ) {\n        let scoreSpan = document.createElement('span')\n          scoreSpan.innerText = score;\n          scoreSpan.className = \"scoreSpan\"\n            \n        mainRef.current.appendChild(scoreSpan);\n      } else {\n        scoreSpan[0].innerText = score;\n      }\n\n      let image = document.getElementsByClassName('narcissus')[0];\n      if (image) {\n        image.alt = `Level ${ score } achieved, tell a friend to check it out to see the Narcissus blossom.`\n        image.title = `Level ${ score } achieved, tell a friend to check it out to see the Narcissus blossom.`\n\n      }\n    }\n  }\n\n  function updateImage () {\n    console.log(\"update narcissus\", mainRef);\n    if (!mainRef.current) {\n      \n      console.log('not updating narcissus because', mainRef.current)\n      \n      return;\n    } else {\n      console.log('about to append because main is', mainRef.current)\n\n      let blob = new Blob([narcissus], {type: 'image/svg+xml'});\n\n      let url = URL.createObjectURL(blob);\n\n      console.log('got url', url)\n\n      let narci = document.getElementsByClassName('narcissus');\n\n      if (narci.length < 1) {\n        let image = document.createElement('img');\n            image.src = url;\n            image.className = \"narcissus hide\";\n  \n            image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true});\n\n        console.log('image', image)\n\n        setTimeout(function () {\n          let narci = document.getElementsByClassName('narcissus')[0];\n          narci.className = narci.className.split('hide').join('')\n        }, 1200)\n  \n        mainRef.current.appendChild(image); \n      } else {\n        narci[0].src = url;\n      }\n    }\n  }\n\n  useLayoutEffect(() => {\n    console.log('triggered score update')\n    updateScore(score)\n\n    // Clean up\n    return () => {\n      // var spans = document.getElementsByClassName('scoreSpan')\n      // for ( let span of spans ) {\n      //   span.remove()\n      // }\n    };\n  }, [score]);\n\n  \n  useLayoutEffect(() => {\n    console.log('triggered image update')\n    updateImage();\n\n    // Clean up\n    return () => {\n      // console.log(\"clean up\");\n      // // mainRef.current.innerHTML = null\n      // let narci = document.getElementsByClassName('narcissus')\n      // for ( let n of narci ) {\n      //   n.remove()\n      // }\n\n    };\n  }, [narcissus]);\n\n  /* -- Functions -- */\n\n  const init = async () => {\n    let correctFreezeFrame = await getCorrectFreezeFrame()\n    console.log('setting frame', correctFreezeFrame)\n    await setSVG(correctFreezeFrame)\n    return { state, id };\n  };\n\n  async function getData (url) {\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getCorrectFreezeFrame() {\n    try {\n      var oid = (window.location.pathname).split('/')[1] || '1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo';\n      // console.log('got oid', oid)\n      // var nft_state = await ktools.readNftState(oid);\n      var nft_state = await getData('https://arweave.net/1ZjIecqKGYdGTFMWR9kdGrmi77lMmZnA6dxEzWulyjo')\n      \n      // var koii_state = await ktools.getContractState();\n      var koii_state = await getData('https://arweave.net/cETTyJQYxJLVQ6nC3VxzsZf1x2-6TW2LFkGZa91gUWc');\n\n      // contract state\n      let current = nft_state.decay.lockState || 0;\n      let lockBlock = nft_state.decay.lastLock;\n      let list = koii_state.stateUpdate.trafficLogs.rewardReport;\n      let newScore; // this will contain the output\n\n      // looping variables\n      let change = 0;\n      let max = nft_state.decay.lastMax || 1;\n      let scalar = 1;\n      let last = 0;\n      let lastMax = 0;\n      let i = 0;\n\n      for ( var item of list ) {\n        // console.log('checking', i, 'change is ', change)\n        if ( item.dailyTrafficBlock > lockBlock ) { \n            if ( typeof(item.logsSummary) && Object.keys(item.logsSummary).includes(oid) ) {\n              let aScore = item.logsSummary[oid];\n              if ( aScore < max ) {\n                \n                if ( last === i - 1 ) {\n                  // if we are on a streak, incremement the scalar\n                  scalar = scalar + scalar;\n                }\n                \n                if ( ( i - 10 ) < lastMax ) {\n                  // we are in a recovery slump, so the scalar is negative now\n                  scalar = ( -1 ) * scalar;\n                }\n                \n                // increment the adjustment \n                change = change + aScore * ( 1 + scalar / 100 )\n\n              } else {\n                // if we have a new max we get a major boost\n                max = aScore;\n                lastMax = i;\n                change = change + 10000;\n              }\n              last = i;\n            }\n        }\n        i = i + 1;\n      }\n      \n      if (change < 1) {\n        // return current;\n        console.log('returning current', current)\n        newScore = current;\n        // return 200;\n      } else {\n        // return current + change;\n        let remainder = totalFrames - current; // the maximum score adjustment we can give (total frames less current score)\n        newScore = remainder * ( 10001 - change );\n        if ( newScore > totalFrames ) {\n          newScore = totalFrames;\n        } else if ( newScore < 0 ) {\n          newScore = 0;\n        }\n      }\n      // newScore = 200; // enable to check gif scrolling locally\n      console.log('newScore is', newScore)\n      // setScore(newScore);\n      return newScore;\n      // return 226;\n    } catch (err) {\n      console.log('error loading nft data', err)\n      setScore(1)\n      return 1;\n    }\n  }\n\n  async function setSVG(frameToSet) {\n    console.log('setSVG')\n    return new Promise(function (resolve, reject) {\n      try {\n        // console.log('narcissus', flower.length)\n        let obj = \"\";\n        // obj = obj + getSVGContents(flower[index])\n        // obj = flower[index]\n        for (let x = 1; x < frameToSet; x++ ) {\n          setTimeout( function () {\n            // obj = obj + getSVGContents(flower[index])\n            obj = flower[x]\n            setNarcissus(obj);\n            setScore(x)\n            // console.log(index)\n          }, x*100)\n        }\n        console.log('about to set narcissus', obj)\n        console.log('about to set narcissus', typeof(obj))\n        // setLoading(false);\n        resolve(obj);\n      } catch (err) {\n        console.log(\"err\", err);\n        reject(err);\n      }\n    });\n  }\n\n  // function getSVGContents(inputString){\n  //     let domParser = new DOMParser();\n  //     let svgDOM = domParser.parseFromString(inputString, 'text/xml')\n  //         .getElementsByTagName('svg')[0];\n  //     return svgDOM.innerHTML\n  // }\n\n  useEffect(() => {\n    init();\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      {/* {loading && (\n        // <img alt=\"this is the loading icon\" src={window.location.origin + \"/img/narcissus.gif\"} />\n      )} */}\n      {/* {!loading && ( */}\n        <React.Fragment>\n          <header></header>\n          <main ref={mainRef}>\n          </main>\n        </React.Fragment>\n      {/* )} */}\n    </div>\n  );\n\n}\n\nexport default App;\n\n// need to fetch the attention logs from koi state\n// then, iterate over the logs and sum the total attention\n// then, check the last time the nft was updated\n// then, check the nft's decay from it's state.decay\n// then, increment counters based on the difference of current block height and the block height at last adjustment\n// then, adjust the 'durability' score\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}